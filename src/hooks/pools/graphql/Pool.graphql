#import './../../balances/graphql/Balance.graphql'

enum PoolType {
  LBP
  XYK
}

enum TradeType {
  Buy
  Sell
}

# figure out how to create a union between two types
# that extend an interface, apparently this isnt possible as of now
#
# interface Pool {
#     poolType: PoolType!,
#     assetInId: String!,
#     assetOutId: String!,
#     assetABalance: String!,
#     assetBBalance: String!,
# }

type LBPAssetWeights {
  initial: String!
  final: String!
  current: String!
}

interface Fee {
  numerator: String!
  denominator: String!
}

type PoolFee implements Fee {
  numerator: String!
  denominator: String!
}

# TODO: figure out which fields are populated at creation and at update
type LBPPool {
  id: String!
  assetInId: String!
  assetOutId: String!
  balances: [Balance!]
  poolFee: PoolFee!
  repayTargetReached: Boolean!
  assetAWeights: LBPAssetWeights!
  assetBWeights: LBPAssetWeights!
  startBlock: String!
  endBlock: String!
}

type XYKPool {
  id: String!
  assetInId: String!
  assetOutId: String!
  balances: [Balance!]
}

union Pool = LBPPool | XYKPool

extend type Query {
  pools: [Pool!]
  # Just to make sure TradeType makes it through the codegen
  # otherwise it'd be ignored
  _tradeType: TradeType
}
