(this["webpackJsonpbasilisk-ui"]=this["webpackJsonpbasilisk-ui"]||[]).push([[0],{145:function(e,n,i){},159:function(e,n){},163:function(e,n){},167:function(e,n,i){},168:function(e,n,i){"use strict";i.r(n);var t=i(1),a=i(100),s=i.n(a),d=(i(145),i(197)),l=i(200),o=i(170),r=i(9),c=i.n(r),u=i(15),m=i(188);const v={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetAccounts"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"accounts"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"isActive"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:260,source:{body:"\nquery GetAccounts {\n    lastBlock @client {\n        parachainBlockNumber,\n        relaychainBlockNumber\n    }\n    \n    accounts @client {\n        id,\n        name,\n        isActive,\n        balances {\n            assetId,\n            balance\n        }\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}};var p=i(66);const k={id:void 0},y=Object(p.a)("basilisk-active-account"),g=()=>y(k),b=()=>{const e=(()=>{const[e,n]=g();return Object(t.useCallback)((async(e,i)=>{var t;const a=null===(t=e.cache)||void 0===t?void 0:t.readQuery({query:v});if(!(null===a||void 0===a?void 0:a.accounts))return;const s=a.accounts.map((e=>({...e,isActive:e.id===i}))),d=Object(u.find)(s,{isActive:!0});return n({id:null===d||void 0===d?void 0:d.id}),s.forEach((n=>{e.cache.modify({id:e.cache.identify({__typename:n.__typename,id:n.id}),fields:{isActive:e=>n.isActive}})})),await new Promise((e=>setTimeout(e,0))),s}),[n])})();return N(Object(t.useCallback)((async(n,i,t)=>{let{client:a}=t;return e(a,i.id)}),[e]),"setActiveAccount")},N=(e,n)=>{const i=Object(t.useRef)(e);return Object(t.useEffect)((()=>{i.current=e}),[e]),function(){return c.a.debug("Running resolver",n),i.current.apply(void 0,arguments)}};var f={appName:"basilisk-ui",xykFee:{numerator:"2",denominator:"1000"},nativeAssetId:"0"};const h=async(e,n)=>{const i=await e.query.system.account(n);return{assetId:f.nativeAssetId,balance:i.data.free.toString()}},O=async(e,n,i)=>{const t=i.map((e=>[n,e]));return(await e.query.tokens.accounts.multi(t)).map(((e,n)=>{const t=e.free.toString();return{assetId:i[n],balance:t}}))};var j=i(201),I=i(199),T=i(40),S={tokens:{AccountData:"OrmlAccountData"}},A=[{AssetPair:{asset_in:"AssetId",asset_out:"AssetId"},Amount:"i128",AmountOf:"Amount",Address:"AccountId",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},Fee:{numerator:"u32",denominator:"u32"},BalanceInfo:{amount:"Balance",assetId:"AssetId"},Chain:{genesisHash:"Vec<u8>",lastBlockHash:"Vec<u8>"},Currency:"AssetId",CurrencyId:"AssetId",CurrencyIdOf:"AssetId",Intention:{who:"AccountId",asset_sell:"AssetId",asset_buy:"AssetId",amount:"Balance",discount:"bool",sell_or_buy:"IntentionType"},IntentionId:"Hash",IntentionType:{_enum:["SELL","BUY"]},LookupSource:"AccountId",Price:"Balance",ClassId:"u64",TokenId:"u64",ClassData:{is_pool:"bool"},TokenData:{locked:"bool"},ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"ClassData"},TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"TokenData"},ClassInfoOf:"ClassInfo",TokenInfoOf:"TokenInfo",ClassIdOf:"ClassId",TokenIdOf:"TokenId",OrderedSet:"Vec<AssetId>",VestingSchedule:{start:"BlockNumber",period:"BlockNumber",period_count:"u32",per_period:"Compact<Balance>"},VestingScheduleOf:"VestingSchedule",LBPWeight:"u32",WeightCurveType:{_enum:["Linear"]},PoolId:"AccountId",BalanceOf:"Balance",AssetType:{_enum:{Token:"Null",PoolShare:"(AssetId,AssetId)"}},Pool:{owner:"AccountId",start:"BlockNumber",end:"BlockNumber",assets:"AssetPair",initial_weight:"LBPWeight",final_weight:"LBPWeight",weight_curve:"WeightCurveType",fee:"Fee",fee_collector:"AccountId"},AssetDetails:{name:"Vec<u8>",asset_type:"AssetType",existential_deposit:"Balance",locked:"bool"},AssetDetailsT:"AssetDetails",AssetMetadata:{symbol:"Vec<u8>",decimals:"u8"},AssetInstance:"AssetInstanceV1",MultiLocation:"MultiLocationV1",AssetNativeLocation:"MultiLocation",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1"}];const B={nodeUrl:"ws://localhost:9988",processorUrl:"/graphql",appName:"Basilisk UI"},w=Object(p.a)("basilisk-config"),x=()=>w(B);var D=i(85);const F={description:"Get pool account id by asset IDs",params:[{name:"assetInId",type:"u32"},{name:"assetOutId",type:"u32"}],type:"AccountId"},P={xyk:{getPoolAccount:F},lbp:{getPoolAccount:F}},[_,C]=Object(T.a)((()=>{const[{nodeUrl:e}]=x(),[n,i]=Object(t.useState)(void 0),a=Object(t.useMemo)((()=>!n),[n]),s=Object(t.useMemo)((()=>new j.a(e)),[e]),d=Object(t.useMemo)((()=>({...A[0],...D.types})),[]),l=Object(t.useMemo)((()=>({...S,...D.typesAlias})),[]);return Object(t.useEffect)((()=>((async()=>{i(void 0);const e=await I.a.create({provider:s,types:d,typesAlias:l,rpc:P});await e.isReady,i(e)})(),()=>{null===n||void 0===n||n.disconnect()})),[s,n,d,l]),{apiInstance:n,loading:a}}));var q="ApiPromise is not initialized",V="No Arguments have been provided to the balance query";const E=e=>async(n,i)=>{var t;if(!e)throw Error(q);if(!i.assetIds)throw Error(V);const a=(s=i.assetIds,Object.values(s).filter((e=>null!=e)));var s;return null===(t=await(async(e,n,i)=>{let t=[];if(Object(u.includes)(i,f.nativeAssetId)){const i=await h(e,n);t.push(i)}const a=i.filter((e=>e!==f.nativeAssetId));if(a.length){const i=await O(e,n,a);t.push(...i)}return t})(e,n.id,a))||void 0===t?void 0:t.map((e=>(e.id="".concat(n.id,"-").concat(e.assetId),(e=>({__typename:"Balance",...e}))(e))))},L=()=>{const{apiInstance:e}=C();return{balances:N(Object(t.useMemo)((()=>E(e)),[e]),"balances")}},W="Vec<BalanceLock>",Q=async(e,n,i)=>{const t=Object(u.find)(e.createType(W,await e.query.balances.locks(n)),(e=>e.id.eq(i))),a=(await e.query.tokens.locks.entries(n)).map((e=>{var n;let[i,t]=e;const a=t.toJSON()[0];return{id:null===a||void 0===a?void 0:a.id,amount:null===a||void 0===a||null===(n=a.amount)||void 0===n?void 0:n.toString()}})),s=Object(u.find)(a,(e=>(null===e||void 0===e?void 0:e.id)===i));return t||s},M=()=>{const e=(()=>{const{apiInstance:e,loading:n}=C();return Object(t.useCallback)((async n=>{var i;if(!e||!n)return;const t=Object(u.first)(e.createType("Vec<VestingScheduleOf>",await e.query.vesting.vestingSchedules(n))),a=await Q(e,n,"ormlvest");return{remainingVestingAmount:null===a||void 0===a||null===(i=a.amount)||void 0===i?void 0:i.toString(),start:null===t||void 0===t?void 0:t.start.toString(),period:null===t||void 0===t?void 0:t.period.toString(),periodCount:null===t||void 0===t?void 0:t.periodCount.toString(),perPeriod:null===t||void 0===t?void 0:t.perPeriod.toString()}}),[e,n])})();return{vestingSchedule:N(Object(t.useCallback)((async n=>await e(n.id)),[e]),"vestingSchedule")}};var G=i(19),X=i(191),Y=i(117);const H="Account",K=()=>{const[e]=g(),n=Object(t.useCallback)((async(e,n)=>{await Object(G.web3Enable)("basilisk-ui");const i=(await Object(G.web3Accounts)()).map((e=>({id:Object(X.a)(Object(Y.a)(e.address),10041),name:e.meta.name,isActive:!1}))).map((n=>({...n,isActive:e==n.id})));return n?Object(u.find)(i,{isActive:n}):i}),[]);return N(Object(t.useCallback)((async(i,t)=>{const a=await n(null===e||void 0===e?void 0:e.id,null===t||void 0===t?void 0:t.isActive);return a?Object(u.isArray)(a)?a.map((e=>({...e,__typename:H}))):{...a,__typename:H}:null}),[e,n]),"accounts")},$={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetLastBlock"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:112,source:{body:"query GetLastBlock {\n    lastBlock @client {\n        parachainBlockNumber,\n        relaychainBlockNumber\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},[R,U]=Object(T.a)((()=>{const{apiInstance:e,loading:n}=C(),[i,a]=Object(t.useState)(void 0),s=Object(t.useCallback)((()=>{e&&e.derive.chain.subscribeNewBlocks((async n=>{const i=await e.query.parachainSystem.validationData(),t=e.createType("Option<PolkadotPrimitivesV1PersistedValidationData>",i);if(t.isSome){t.toJSON();a({parachainBlockNumber:n.block.header.number.toString(),relaychainBlockNumber:"821"})}}))}),[e]);return Object(t.useEffect)((()=>{n||s()}),[n,s]),i})),J="LastBlock",z=J,Z=(e,n)=>e.writeQuery({query:$,data:{lastBlock:n}});var ee=i(65);const ne={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetActiveAccount"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"account"},name:{kind:"Name",value:"accounts"},arguments:[{kind:"Argument",name:{kind:"Name",value:"isActive"},value:{kind:"BooleanValue",value:!0}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"isActive"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"vestingSchedule"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"remainingVestingAmount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"start"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"period"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"periodCount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"perPeriod"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:607,source:{body:"# TODO: fetch only balances for the active fee payment asset\nquery GetActiveAccount {\n    lastBlock @client { \n        parachainBlockNumber,\n        relaychainBlockNumber,\n    }\n    \n    account: accounts(isActive: true) @client {\n        id,\n        name,\n        isActive,\n        balances {\n            assetId,\n            balance\n        },\n        vestingSchedule {\n            # figure out why this fragment doesnt work\n            # ...VestingScheduleFields,\n            remainingVestingAmount,\n            start,\n            period,\n            periodCount,\n            perPeriod\n        }\n    } \n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},[ie,te]=Object(T.a)((()=>{var e,n;const i=Object(ee.a)(),a=Object(m.a)(ne,{notifyOnNetworkStatusChange:!0});return Object(t.useEffect)((()=>{i.refetchQueries({})}),[null===(e=a.data)||void 0===e||null===(n=e.account)||void 0===n?void 0:n.id]),a})),ae=async(e,n)=>new Promise((async(i,t)=>{try{i(await e(i,t))}catch(a){console.log("graceful error",a),(a=n.reduce(((e,n)=>n(e)),a))?t(a):i(null)}})),se=e=>{if("Cancelled"!==(null===e||void 0===e?void 0:e.message))return e;c.a.error("Operation presumably cancelled by the user in the Polkadot.js extension")},de=(e,n,i)=>t=>{let{status:a,events:s=[],dispatchError:d}=t;var l;return a.isFinalized&&c.a.info("operation finalized"),s.forEach((e=>{let{event:{data:n,method:i,section:t},phase:a}=e;console.log("event handler",a.toString(),": ".concat(t,".").concat(i),n.toString())})),a.isInBlock?(console.log("is in block",null===(l=a.createdAtHash)||void 0===l?void 0:l.toString()),(null===d||void 0===d?void 0:d.isModule)?c.a.info("operation unsuccessful",i?i.registry.findMetaError(d.asModule):d):c.a.info("operation successful")):a.isBroadcast?(c.a.info("transaction has been broadcast",a.hash.toHuman()),e()):d?(c.a.error("There was a dispatch error",d),n("Dispatch error")):void 0},le=()=>{const{apiInstance:e,loading:n}=C();return{claimVestedAmount:N(Object(t.useCallback)((async(i,t,a)=>{var s,d;let{cache:l}=a;const o=(null===t||void 0===t?void 0:t.address)?t.address:null===(s=l.readQuery({query:ne}))||void 0===s||null===(d=s.account)||void 0===d?void 0:d.id;if(!o)throw new Error("No Account selected");if(n||!e)throw new Error("Polkadot.js is not ready yet");return await ae((async(n,i)=>{const{signer:t}=await Object(G.web3FromAddress)(o);await e.tx.vesting.claim().signAndSend(o,{signer:t},de(n,i))}),[se])}),[n,e]),"claimVestedAmount")}},oe="Config",re=()=>{const[e]=x(),{apiInstance:n,loading:i}=C();return{config:N(Object(t.useCallback)((async(t,a,s)=>{var d,l,o;let{cache:r}=s;if(!n||i)return;const c=null===(d=r.readQuery({query:ne}))||void 0===d||null===(l=d.account)||void 0===l?void 0:l.id;let u=c?null===(o=n.createType("Option<u32>",await n.query.multiTransactionPayment.accountCurrencyMap(c)))||void 0===o?void 0:o.toHuman():null;return u=u||"0",{__typename:oe,id:"Config",...e,feePaymentAsset:u}}),[n,i]))}},ce=()=>{const{apiInstance:e,loading:n}=C(),[i,a]=x();return{setConfig:N(Object(t.useCallback)((async(i,t,s)=>{let{cache:d}=s;if(!e||n)return;await ae((async(n,i)=>{var a,s,l;const o=null===(a=d.readQuery({query:ne}))||void 0===a||null===(s=a.account)||void 0===s?void 0:s.id;if(!o)return n();const{signer:r}=await Object(G.web3FromAddress)(o);await e.tx.multiTransactionPayment.setCurrency((null===(l=t.config)||void 0===l?void 0:l.feePaymentAsset)||"0").signAndSend(o,{signer:r},((e,n)=>de(e,n))(n,i))}),[se]);const l=t.config;null===l||void 0===l||delete l.feePaymentAsset,a((()=>l||B))}),[e,n]))}},ue=()=>{const{apiInstance:e,loading:n}=C();return{feePaymentAssets:N(Object(t.useCallback)((async()=>{if(!e||n)return;return(await e.query.multiTransactionPayment.acceptedCurrencies.entries()).map((e=>{const n=e[0].toHuman()[0];return{__typename:"FeePaymentAsset",id:n,assetId:n,fallbackPrice:e[1].toString()}}))}),[e,n]))}},me=async()=>({xyk:await i.e(4).then(i.bind(null,208)),lbp:await i.e(3).then(i.bind(null,209))}),[ve,pe]=Object(T.a)((()=>{const[e,n]=Object(t.useState)({instance:void 0,loading:!0});return Object(t.useEffect)((()=>{(async()=>{n({instance:await me(),loading:!1})})()}),[n]),{math:null===e||void 0===e?void 0:e.instance,loading:null===e||void 0===e?void 0:e.loading}})),ke=e=>{let[n,i]=e;return[n.toHuman()[0],i]};var ye=i(11),ge=i.n(ye);const be=new ge.a("100").multipliedBy(new ge.a("10").pow("6")),Ne=e=>new ge.a(be).minus(new ge.a(e)).toFixed(0),fe=(e,n,i,t)=>e.lbp.calculate_linear_weights(n.startBlock,n.endBlock,i.initial,i.final,t),he=e=>e.cache.readQuery({query:$}),Oe={numerator:"2",denominator:"10"},je=(e,n,i)=>async t=>{var a,s,d;let[l,o]=t;const r=o.toJSON(),c=he(n),u=null===c||void 0===c||null===(a=c.lastBlock)||void 0===a?void 0:a.relaychainBlockNumber;if(!r||!u)return;const m=r.feeCollector.toString(),v=i.createType("BalanceOf",r.repayTarget.toString()).toString(),p={id:l,assetInId:r.assets[0].toString(),assetOutId:r.assets[1].toString(),startBlock:r.start.toString(),endBlock:r.end.toString()},k={initial:r.initialWeight.toString(),final:r.finalWeight.toString()},y={...k,current:fe(e,p,k,u)},g={initial:Ne(y.initial),final:Ne(y.final),current:Ne(y.current)},b=null===(s=await Q(i,m,"0x6c6270636c6c6374"))||void 0===s||null===(d=s.amount)||void 0===d?void 0:d.toString(),N=!(!v||!b)&&new ge.a(b).gt(new ge.a(v)),f={numerator:r.fee.numerator.toString(),denominator:r.fee.denominator.toString()};return{...p,assetAWeights:y,assetBWeights:g,repayTargetReached:N,fee:N?f:Oe}},Ie=()=>{const{apiInstance:e,loading:n}=C(),{math:i}=pe();return Object(t.useCallback)((async t=>e&&!n&&i?(async(e,n,i)=>await Promise.all((await e.query.lbp.poolData.entries()).map(ke).map(je(n,i,e)))||[])(e,i,t):[]),[e,n,i])},Te=()=>{const{apiInstance:e}=C(),{math:n}=pe();return Object(t.useCallback)((async(i,t)=>{if(c.a.debug("useGetLbpPool",e,t,n),e&&t&&n)return(async(e,n,i,t)=>await je(e,n,i)([t,await i.query.lbp.poolData(t)]))(n,i,e,t)}),[e,n])},Se=()=>{const{apiInstance:e,loading:n}=C(),i=Ie(),a=(()=>{const{apiInstance:e,loading:n}=C();return Object(t.useCallback)((async(i,t)=>!e||n?[]:i?[await e.query.xyk.poolAssets(i)].map((e=>[i,e])).map((e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}})):(await e.query.xyk.poolAssets.entries()).map(ke).map((e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}}))||[]),[e,n])})(),s=(()=>{const{apiInstance:e,loading:n}=C();return Object(t.useCallback)((async i=>{if(e&&!n&&i)return(e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}})([i,await e.query.xyk.poolAssets(i)])}),[e,n])})(),d=Te();return N(Object(t.useCallback)((async(t,l,o)=>{if(!e||n||!(null===o||void 0===o?void 0:o.client))return;c.a.debug("useGetPoolsQueryResolver","fetching pools",l);let r=null===l||void 0===l?void 0:l.poolId,u={lbpPoolId:r,xykPoolId:r};if((null===l||void 0===l?void 0:l.assetIds)&&(u=await(async(e,n)=>({lbpPoolId:(await e.rpc.lbp.getPoolAccount(n[0],n[1])).toHuman(),xykPoolId:(await e.rpc.xyk.getPoolAccount(n[0],n[1])).toHuman()}))(e,l.assetIds),c.a.debug("useGetPoolsQueryResolver","found poolIDs",u,e)),u.xykPoolId||u.lbpPoolId){var m,v,p,k;let e=await d(o.client,u.lbpPoolId),n=await s(u.xykPoolId);c.a.debug("useGetPoolsQueryResolver","found pools by poolIDs",e,n),(null===(m=n)||void 0===m?void 0:m.assetInId)===(null===(v=n)||void 0===v?void 0:v.assetOutId)&&(n=void 0),(null===(p=e)||void 0===p?void 0:p.assetInId)===(null===(k=e)||void 0===k?void 0:k.assetOutId)&&(e=void 0),c.a.debug("useGetPoolsQueryResolver","eliminated default value pools",e,n);const i=n||e;return c.a.debug("useGetPoolsQueryResolver","returning a single pool",i),i&&{...i,__typename:n?"XYKPool":e?"LBPPool":void 0}}const[y,g]=await Promise.all([i(o.client),a()]);return c.a.debug("useGetPoolsQueryResolver","returning multiple pools",[y,g]),[].concat(null===y||void 0===y?void 0:y.map((e=>({...e,__typename:"LBPPool"})))).concat(null===g||void 0===g?void 0:g.map((e=>({...e,__typename:"XYKPool"}))))}),[i]),"pools")},Ae=()=>{const{apiInstance:e,loading:n}=C(),i=(()=>{const{apiInstance:e,loading:n}=C();return Object(t.useCallback)((async()=>{if(e&&!n)return(await(null===e||void 0===e?void 0:e.query.assetRegistry.assetIds.entries())).map((e=>n=>{let[i,t]=n;return{id:e.createType("Option<u32>",t).toHuman()}})(e))||[]}),[e,n])})();return N(Object(t.useCallback)((async()=>{var e;return null===(e=await i())||void 0===e?void 0:e.map((e=>({...e,__typename:"Asset"})))}),[e,n]))};let Be,we,xe,De;!function(e){e.D30="D30",e.D7="D7",e.H24="H24",e.H1="H1"}(Be||(Be={})),function(e){e.PRICE="PRICE",e.VOLUME="VOLUME",e.WEIGHTS="WEIGHTS"}(we||(we={})),function(e){e.LBP="LBP",e.XYK="XYK"}(xe||(xe={})),function(e){e.Buy="Buy",e.Sell="Sell"}(De||(De={}));const Fe=e=>{var n;return null===(n=e.readQuery({query:ne,returnPartialData:!0}))||void 0===n?void 0:n.account},Pe=async(e,n,i,t,a,s)=>{await ae((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found"));const{signer:c}=await Object(G.web3FromAddress)(r);await n.tx.lbp.buy(i,t,a,s).signAndSend(r,{signer:c},((e,n,i)=>de(e,n,i))(d,l,n))}),[se])},_e=async(e,n,i,t,a,s)=>{await ae((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found"));const{signer:c}=await Object(G.web3FromAddress)(r);await n.tx.lbp.sell(i,t,a,s).signAndSend(r,{signer:c},((e,n,i)=>de(e,n,i))(d,l,n))}),[se])},Ce=async(e,n,i,t,a,s)=>{await ae((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found!"));const{signer:c}=await Object(G.web3FromAddress)(r);await n.tx.xyk.buy(i,t,a,s,false).signAndSend(r,{signer:c},((e,n,i)=>de(e,n,i))(d,l,n))}),[se])},qe=async(e,n,i,t,a,s)=>{await ae((async(d,l)=>{const o=Fe(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found!"));const{signer:c}=await Object(G.web3FromAddress)(r);await n.tx.xyk.sell(i,t,a,s,false).signAndSend(r,{signer:c},((e,n,i)=>de(e,n,i))(d,l,n))}),[se])},Ve=()=>({submitTrade:(()=>{const{apiInstance:e}=C();return N(Object(t.useCallback)((async(n,i,t)=>{let{cache:a}=t;if(i&&e){if((null===i||void 0===i?void 0:i.poolType)===xe.XYK&&(null===i||void 0===i?void 0:i.tradeType)===De.Buy)return await Ce(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===xe.XYK&&(null===i||void 0===i?void 0:i.tradeType)===De.Sell)return await qe(a,e,i.assetInId,i.assetOutId,i.assetInAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===xe.LBP&&(null===i||void 0===i?void 0:i.tradeType)===De.Buy)return await Pe(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===xe.LBP&&(null===i||void 0===i?void 0:i.tradeType)===De.Sell)return await _e(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);throw new Error("We dont support this trade type yet")}}),[Ce,qe,e]))})()}),Ee=()=>{return e=(()=>{const{isWeb3Injected:e}=i(19);return{id:"0",isAvailable:e}})(),{__typename:"Extension",...e};var e},Le=()=>{const{Query:e,Account:n}={Query:{accounts:K()},Account:{...L(),...M()}},{Query:i,XYKPool:a,LBPPool:s}=(()=>{const e=Se(),n={...L()};return{Query:{pools:e},XYKPool:n,LBPPool:n}})(),{Query:d}={Query:{extension:N(Object(t.useCallback)(Ee,[Ee]))}};return{Query:{...e,...d,...re(),...ue(),...L(),...i,assets:Ae()},Mutation:{setActiveAccount:b(),...le(),...ce(),...Ve()},Account:n,XYKPool:a,LBPPool:s}},We={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Balance"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balance"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"balance"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"_assetIds"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"AssetIds"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"AssetIds"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"a"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"b"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"VestingSchedule"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"remainingVestingAmount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"start"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"period"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"periodCount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"perPeriod"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Account"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"name"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"isActive"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"vestingSchedule"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"VestingSchedule"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"accounts"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Account"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"account"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Account"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"setActiveAccount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Account"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LastBlock"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"lastBlock"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"LastBlock"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Config"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"nodeUrl"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"processorUrl"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"appName"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feePaymentAsset"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"config"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Config"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Extension"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"isAvailable"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"extension"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Extension"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FeePaymentAsset"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assetId"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"fallbackPrice"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"feePaymentAssets"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FeePaymentAsset"}}}},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"PoolType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"LBP"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"XYK"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"TradeType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"Buy"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"Sell"},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LBPAssetWeights"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"initial"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"final"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"current"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Fee"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"numerator"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"denominator"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LBPPool"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"fee"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Fee"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"repayTargetReached"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetAWeights"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"LBPAssetWeights"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetBWeights"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"LBPAssetWeights"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"startBlock"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"endBlock"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"XYKPool"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}},directives:[]}]},{kind:"UnionTypeDefinition",name:{kind:"Name",value:"Pool"},directives:[],types:[{kind:"NamedType",name:{kind:"Name",value:"LBPPool"}},{kind:"NamedType",name:{kind:"Name",value:"XYKPool"}}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"pools"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Pool"}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"_tradeType"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"TradeType"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Asset"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assets"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Asset"}}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"_empty"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]}],loc:{start:0,end:3945,source:{body:"type Balance {\n  id: String\n  assetId: String!\n  balance: String!\n}\n\n# Specify what entity is returned under the `balance` field when queried\n# This is again useful for strict typing down the line\nextend type Query {\n  balance: [Balance!]!\n  # Just to make sure AssetIds makes it through the codegen\n  # otherwise it'd be ignored\n  _assetIds: AssetIds\n}\n\n# this hack is necessary to keep the AssetIds generated type\ntype AssetIds {\n  a: String!\n  b: String\n}\n# https://github.com/open-web3-stack/open-runtime-module-library/blob/master/vesting/src/lib.rs#L11\ntype VestingSchedule {\n    # total locked amoount left to eventually be claimed\n    remainingVestingAmount: String,\n    # since this block\n    start: String,\n    # every `period` blocks\n    period: String,\n    # for number of periods\n    periodCount: String,\n    # claimable amount per period\n    perPeriod: String\n}#import \"./../../balances/graphql/Balance.graphql\"\n#import './../../vesting/graphql/VestingSchedule.graphql'\n\ntype Account {\n    id: String!,\n    name: String,\n    isActive: Boolean!,\n    balances: [Balance!]!,\n    vestingSchedule: VestingSchedule!\n}\n\nextend type Query {\n    accounts: [Account!]!\n    account: Account\n}\n\nextend type Mutation {\n    setActiveAccount: Account\n}type LastBlock {\n    id: String!\n    # yes, this is correct\n    parachainBlockNumber: String,\n    relaychainBlockNumber: String,\n}\n\nextend type Query {\n    lastBlock: LastBlock\n}type Config {\n    nodeUrl: String!,\n    processorUrl: String!,\n    appName: String!,\n    feePaymentAsset: String\n}\n\nextend type Query {\n    config: Config!\n}# Extension entity that lives in the normalized cache\n# We also use this to generate an Extension type to be used within the implementation\ntype Extension {\n  id: String!\n  isAvailable: Boolean!\n}\n\n# Specify what entity is returned under the `extension` field when queried\n# This is again useful for strict typing down the line\nextend type Query {\n  extension: Extension!\n}\ntype FeePaymentAsset {\n    assetId: String,\n    # This price has 18 digit precision, instead of the usual 12\n    fallbackPrice: String\n}\n\n\nextend type Query {\n    feePaymentAssets: [FeePaymentAsset!]\n}#import './../../balances/graphql/Balance.graphql'\n\nenum PoolType {\n  LBP\n  XYK\n}\n\nenum TradeType {\n  Buy\n  Sell\n}\n\n# figure out how to create a union between two types\n# that extend an interface, apparently this isnt possible as of now\n#\n# interface Pool {\n#     poolType: PoolType!,\n#     assetInId: String!,\n#     assetOutId: String!,\n#     assetABalance: String!,\n#     assetBBalance: String!,\n# }\n\ntype LBPAssetWeights {\n  initial: String!\n  final: String!\n  current: String!\n}\n\ntype Fee {\n  numerator: String!\n  denominator: String!\n}\n\n# TODO: figure out which fields are populated at creation and at update\ntype LBPPool {\n  id: String!\n  assetInId: String!\n  assetOutId: String!\n  balances: [Balance!]\n  fee: Fee!\n  repayTargetReached: Boolean!\n  assetAWeights: LBPAssetWeights!\n  assetBWeights: LBPAssetWeights!\n  startBlock: String!\n  endBlock: String!\n}\n\ntype XYKPool {\n  id: String!\n  assetInId: String!\n  assetOutId: String!\n  balances: [Balance!]\n}\n\nunion Pool = LBPPool | XYKPool\n\nextend type Query {\n  pools: [Pool!]\n  # Just to make sure TradeType makes it through the codegen\n  # otherwise it'd be ignored\n  _tradeType: TradeType\n}\ntype Asset {\n    id: String!\n}\n\nextend type Query {\n    assets: [Asset!]\n}#import './hooks/accounts/graphql/Accounts.graphql'\n#import './hooks/lastBlock/graphql/LastBlock.graphql'\n#import './hooks/config/graphql/Config.graphql'\n#import './hooks/vesting/graphql/VestingSchedule.graphql'\n#import './hooks/extension/graphql/Extension.graphql'\n#import './hooks/feePaymentAssets/graphql/FeePaymentAssets.graphql'\n#import './hooks/pools/graphql/Pool.graphql'\n#import './hooks/assets/graphql/Asset.graphql'\n\nextend type Query {\n  # just a placeholder to make the codegen not complain about\n  # root query not being defined\n  _empty: String\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Qe=()=>{const e=Le(),n=Object(t.useMemo)((()=>new l.a),[]),[{processorUrl:i}]=x(),a=Object(t.useMemo)((()=>new o.a({uri:i,cache:n,connectToDevTools:!0,queryDeduplication:!0,resolvers:e,typeDefs:We})),[i,n,e]);return(e=>{const n=U();Object(t.useEffect)((()=>{Z(e.cache,{__typename:J,id:z,...n})}),[]),Object(t.useEffect)((()=>{var i;if(!n)return;const t=e.cache.readQuery({query:$});(null===t||void 0===t||null===(i=t.lastBlock)||void 0===i?void 0:i.parachainBlockNumber)?e.refetchQueries({updateCache(e){Z(e,{__typename:J,id:z,...n})}}):Z(e.cache,{__typename:J,id:z,...n})}),[n])})(a),a};var Me=i(6);const Ge=e=>{let{children:n}=e;const i=Qe();return Object(Me.jsx)(d.a,{client:i,children:n})},Xe=e=>{let{children:n}=e;return Object(Me.jsx)(Me.Fragment,{children:n})},Ye=e=>{let{children:n}=e;return Object(Me.jsx)(_,{children:Object(Me.jsx)(ve,{children:Object(Me.jsx)(R,{children:Object(Me.jsx)(Ge,{children:Object(Me.jsx)(Xe,{children:n})})})})})};var He=i(83),Ke=i(10);const $e={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetPoolByAssets"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"pool"},name:{kind:"Name",value:"pools"},arguments:[{kind:"Argument",name:{kind:"Name",value:"assetIds"},value:{kind:"ListValue",values:[{kind:"Variable",name:{kind:"Name",value:"assetInId"}},{kind:"Variable",name:{kind:"Name",value:"assetOutId"}}]}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetInId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetOutId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"repayTarget"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetAWeights"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetBWeights"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startBlock"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"endBlock"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"fee"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"numerator"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"denominator"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:612,source:{body:"query GetPoolByAssets($assetInId: String!, $assetOutId: String!) {\n    lastBlock @client {\n        parachainBlockNumber\n    }\n    \n    pool: pools(assetIds: [$assetInId, $assetOutId]) @client {\n        id,\n        assetInId,\n        assetOutId,\n        balances {\n            assetId,\n            balance\n        },\n\n        # TODO: investigate how caching works when these fields are missing for XYK pools\n        # lbp fields,\n        repayTarget,\n        assetAWeights,\n        assetBWeights,\n        startBlock,\n        endBlock,\n        fee {\n            numerator,\n            denominator\n        }\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Re=e=>{let{assetIdInputProps:n,assetAmountInputProps:i,disabled:t}=e;return Object(Me.jsxs)("div",{children:[Object(Me.jsxs)("div",{children:[Object(Me.jsx)("b",{children:"AssetId:"})," ",Object(Me.jsx)("br",{}),Object(Me.jsx)("input",{disabled:t,type:"text",...n})]}),Object(Me.jsxs)("div",{children:[Object(Me.jsx)("b",{children:"Asset amount:"})," ",Object(Me.jsx)("br",{}),Object(Me.jsx)("input",{disabled:t,type:"text",...i})]})]})},Ue=new ge.a(10).pow(12),Je=(new ge.a(10).pow(18),e=>e&&new ge.a(e).dividedBy(Ue).toFixed(12)),ze=new ge.a(10).pow(12),Ze=(new ge.a(10).pow(18),e=>e&&new ge.a(e).multipliedBy(ze).toFixed(0));var en=i(112);const nn=(e,n)=>{var i,a;const[s,d]=Object(t.useState)(!1),l=null===(i=e.control._fields[n])||void 0===i||null===(a=i._f)||void 0===a?void 0:a.ref;return Object(t.useEffect)((()=>{if(!l)return;const e=null===l||void 0===l?void 0:l.addEventListener("input",(()=>d((e=>!e))));return()=>null===l||void 0===l?void 0:l.removeEventListener("input",e)}),[l]),s};var tn=i(198);const an={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"SubmitTrade"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInAmount"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutAmount"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"amountWithSlippage"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"poolType"}},type:{kind:"NamedType",name:{kind:"Name",value:"PoolType"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"tradeType"}},type:{kind:"NamedType",name:{kind:"Name",value:"TradeType"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"submitTrade"},arguments:[{kind:"Argument",name:{kind:"Name",value:"assetInId"},value:{kind:"Variable",name:{kind:"Name",value:"assetInId"}}},{kind:"Argument",name:{kind:"Name",value:"assetOutId"},value:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}}},{kind:"Argument",name:{kind:"Name",value:"tradeType"},value:{kind:"Variable",name:{kind:"Name",value:"tradeType"}}},{kind:"Argument",name:{kind:"Name",value:"poolType"},value:{kind:"Variable",name:{kind:"Name",value:"poolType"}}},{kind:"Argument",name:{kind:"Name",value:"assetInAmount"},value:{kind:"Variable",name:{kind:"Name",value:"assetInAmount"}}},{kind:"Argument",name:{kind:"Name",value:"assetOutAmount"},value:{kind:"Variable",name:{kind:"Name",value:"assetOutAmount"}}},{kind:"Argument",name:{kind:"Name",value:"amountWithSlippage"},value:{kind:"Variable",name:{kind:"Name",value:"amountWithSlippage"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}]}]}}],loc:{start:0,end:505,source:{body:"mutation SubmitTrade(\n    $assetInId: String!, \n    $assetOutId: String!,\n    $assetInAmount: String!,\n    $assetOutAmount: String!,\n    $amountWithSlippage: String!,\n    $poolType: PoolType,\n    $tradeType: TradeType\n) {\n    submitTrade(\n        assetInId: $assetInId\n        assetOutId: $assetOutId,\n        tradeType: $tradeType,\n        poolType: $poolType,\n        assetInAmount: $assetInAmount,\n        assetOutAmount: $assetOutAmount,\n        amountWithSlippage: $amountWithSlippage\n    ) @client\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},sn=(e,n,i,a)=>{const[s]=Object(tn.a)(an,{notifyOnNetworkStatusChange:!0});return Object(t.useCallback)((t=>{let{assetInId:d,assetOutId:l,assetInAmount:o,assetOutAmount:r}=t;if(!a)throw new Error("Can't submit a trade mutation without a pool");if(o=Ze(o),r=Ze(r),!d||!l||!o||!r||!(null===i||void 0===i?void 0:i.spotPriceAmount))throw new Error("Can't submit a trade mutation without all the required arguments");const u=((e,n,i)=>{let t=new ge.a(e).multipliedBy(new ge.a(n).dividedBy(100));const a=new ge.a(e);return(i===De.Buy?a.plus(t):a.minus(t)).toFixed(0)})(null===i||void 0===i?void 0:i.spotPriceAmount,n,e);c.a.debug("TradeForm.useHandleSubmit","amountWithSlippage",{spotPriceAmount:i.spotPriceAmount,amountWithSlippage:u,tradeType:e});const m="LBPPool"===a.__typename?xe.LBP:xe.XYK;s({variables:{tradeType:e,assetInId:d,assetInAmount:o,assetOutId:l,assetOutAmount:r,amountWithSlippage:u,poolType:m}})}),[s,a,e,i])},dn=(e,n,i,t,a)=>{var s,d;const l=null===(s=Object(u.find)(n.balances,{assetId:i}))||void 0===s?void 0:s.balance,o=null===(d=Object(u.find)(n.balances,{assetId:t}))||void 0===d?void 0:d.balance;if(!l||!o)throw new Error("Can't find the required balances in the pool");return((e,n,i,t)=>e.xyk.calculate_out_given_in(n,i,t))(e,l,o,a)},ln=(e,n,i)=>{var t,a;return{assetABalance:null===(t=Object(u.find)(e.balances,{assetId:n}))||void 0===t?void 0:t.balance,assetBBalance:null===(a=Object(u.find)(e.balances,{assetId:i}))||void 0===a?void 0:a.balance}},on=(e,n,i)=>({assetInWeight:n===e.assetInId?e.assetAWeights.current:e.assetBWeights.current,assetOutWeight:i===e.assetOutId?e.assetBWeights.current:e.assetAWeights.current}),rn=(e,n,i,t,a)=>{const{assetABalance:s,assetBBalance:d}=ln(n,i,t);if(!s||!d)throw new Error("Can't find the required balances in the pool");const{assetInWeight:l,assetOutWeight:o}=on(n,i,t);return((e,n,i,t,a,s)=>e.lbp.calculate_in_given_out(n,i,t,a,s))(e,s,d,l,o,a)},cn=(e,n,i,t,a)=>{const{assetABalance:s,assetBBalance:d}=ln(n,i,t);if(!s||!d)throw new Error("Can't find the required balances in the pool");const{assetInWeight:l,assetOutWeight:o}=on(n,i,t);return((e,n,i,t,a,s)=>e.lbp.calculate_out_given_in(n,i,t,a,s))(e,s,d,l,o,a)},un=(e,n,i,t,a)=>{const{assetABalance:s,assetBBalance:d}=ln(n,i,t);if(!s||!d)throw new Error("Can't find the required balances in the pool");return((e,n,i,t)=>e.xyk.calculate_in_given_out(n,i,t))(e,s,d,a)},mn=(e,n,i)=>{const t=[e.assetInId,e.assetOutId];return t.includes(n)&&t.includes(i)},vn=(e,n)=>{if(!e||!n)return;const i=new ge.a(e);return new ge.a(n).minus(i).dividedBy(i)},pn=(e,n,i)=>{const t=new ge.a(e).multipliedBy(Je(i)).toFixed(0),a=vn(t,n);if(!a||a.isNaN())return;ge.a.config({ROUNDING_MODE:ge.a.ROUND_UP});return{percentualSlippage:new ge.a(a).multipliedBy(100).abs().toFixed(10),spotPriceAmount:t}},kn=(e,n,i,t)=>{if((null===n||void 0===n?void 0:n.aToB)&&(null===n||void 0===n?void 0:n.bToA)&&i&&t)return pn.apply(null,e===De.Buy?[n.bToA,i,t]:[n.aToB,t,i])};var yn=i(203);const gn=e=>new ge.a(e.numerator).dividedBy(e.denominator).multipliedBy("100").toFixed(2),bn=e=>e?"XYKPool"===e.__typename?f.xykFee:e.fee:void 0,Nn="5",fn="5",hn=(e,n)=>{const i=e.watch("autoSlippage"),a=Object(t.useMemo)((()=>e.getValues("autoSlippage")),[i]);return Object(t.useEffect)((()=>{if(!a)return;const i=n?"XYKPool"===(null===n||void 0===n?void 0:n.__typename)?Nn:fn:Nn,t=(s=i,(d=bn(n))?new ge.a(s).plus(gn(d)).toFixed(2):s);var s,d;c.a.debug("TradeForm.useCalculateAllowedSlippage","allowedSlippageWithFee",t),e.setValue("allowedSlippage",t)}),[n,a]),{allowedSlippageInputDisabled:a}},On=e=>{let{pool:n,loading:i,onAssetIdsChange:a,assetIds:s,spotPrice:d}=e;const l=(e=>{let{assetInId:n,assetOutId:i}=e;return Object(en.a)({defaultValues:{assetInId:n,assetOutId:i,assetInAmount:"0",assetOutAmount:"0",allowedSlippage:"5",autoSlippage:!0}})})(s),o=(e=>{const n=bn(e);if(n)return gn(n)})(n),r=(e=>{const[n,i]=Object(t.useState)(De.Sell),a=nn(e,"assetInAmount"),s=nn(e,"assetInId"),d=nn(e,"assetOutAmount"),l=nn(e,"assetOutId");return Object(t.useEffect)((()=>{c.a.debug("TradeForm.setTradeType",De.Sell),i(De.Sell)}),[a,s]),Object(t.useEffect)((()=>{c.a.debug("TradeForm.setTradeType",De.Buy),i(De.Buy)}),[d,l]),n})(l);((e,n)=>{const[i,a]=e.watch(["assetInId","assetOutId"]);Object(t.useEffect)((()=>{c.a.debug("TradeForm.useHandleAssetIdsChange",i,a),n(i,a)}),[i,a])})(l,a),((e,n,i)=>{const{math:a}=pe();let[s,d]=e.watch(["assetInId","assetInAmount"]),[l,o]=e.watch(["assetOutId","assetOutAmount"]);d=Ze(d),o=Ze(o);const r=Object(t.useMemo)((()=>"XYKPool"===(null===i||void 0===i?void 0:i.__typename)?dn:cn),[i]),u=Object(t.useMemo)((()=>"XYKPool"===(null===i||void 0===i?void 0:i.__typename)?un:rn),[i]);Object(t.useEffect)((()=>{if(!i||!a||!l||!d)return;if(!mn(i,s,l))return;if(n!==De.Sell)return;const t=r(a,i,s,l,d);c.a.debug("TradeForm.useCalculateInAndOut","outAmount",t),e.setValue("assetOutAmount",Je(t))}),[d,s,l,n,i]),Object(t.useEffect)((()=>{if(!i||!a||!l||!o)return;if(!mn(i,s,l))return;if(n!==De.Buy)return;const t=u(a,i,s,l,o);c.a.debug("TradeForm.useCalculateInAndOut","inAmount",Je(t)),e.setValue("assetInAmount",Je(t))}),[o,s,l,n,i])})(l,r,n),((e,n)=>{const i=Object(yn.a)(null===n||void 0===n?void 0:n.id);Object(t.useEffect)((()=>{Object(u.isEqual)(i,null===n||void 0===n?void 0:n.id)||(e.resetField("assetInAmount"),e.resetField("assetOutAmount"))}),[i,null===n||void 0===n?void 0:n.id])})(l,n);const m=kn(r,d,Ze(l.getValues("assetInAmount")),Ze(l.getValues("assetOutAmount"))),v=sn(r,l.getValues("allowedSlippage"),m,n),{allowedSlippageInputDisabled:p}=hn(l,n);return Object(Me.jsx)("div",{children:Object(Me.jsxs)("form",{onSubmit:l.handleSubmit(v),children:[Object(Me.jsx)("p",{children:r}),Object(Me.jsx)(Re,{assetIdInputProps:l.register("assetInId"),assetAmountInputProps:l.register("assetInAmount")}),Object(Me.jsx)("br",{}),Object(Me.jsx)(Re,{assetIdInputProps:l.register("assetOutId"),assetAmountInputProps:l.register("assetOutAmount")}),Object(Me.jsxs)("div",{children:[Object(Me.jsx)("b",{children:"Allowed slippage"}),Object(Me.jsx)("br",{}),Object(Me.jsx)("input",{type:"text",disabled:p,...l.register("allowedSlippage")}),Object(Me.jsx)("br",{}),Object(Me.jsx)("b",{children:"Auto slippage"}),Object(Me.jsx)("input",{type:"checkbox",...l.register("autoSlippage")})]}),Object(Me.jsx)("br",{}),Object(Me.jsxs)("p",{children:[Object(Me.jsx)("b",{children:"Slippage:"})," ",null===m||void 0===m?void 0:m.percentualSlippage," / ",Je(null===m||void 0===m?void 0:m.spotPriceAmount)]}),Object(Me.jsxs)("p",{children:[Object(Me.jsx)("b",{children:"Fee:"})," ",o,"%"]}),Object(Me.jsx)("button",{disabled:i,type:"submit",children:"Trade"})]})})},jn=e=>{let{spotPrice:n,poolLiquidity:i}=e;return Object(Me.jsxs)("div",{children:[Object(Me.jsx)("p",{children:"TradeChart"}),Object(Me.jsxs)("div",{children:[Object(Me.jsx)("b",{children:"Spot price"}),Object(Me.jsx)("br",{}),Object(Me.jsxs)("span",{children:["1 A = ",Je(null===n||void 0===n?void 0:n.aToB),"B"]}),Object(Me.jsx)("br",{}),Object(Me.jsxs)("span",{children:["1 B = ",Je(null===n||void 0===n?void 0:n.bToA),"A"]}),Object(Me.jsx)("br",{}),Object(Me.jsx)("br",{}),Object(Me.jsx)("b",{children:"Pool liquidity"}),Object(Me.jsx)("br",{}),Object(Me.jsxs)("span",{children:["A = ",Je(i.assetABalance)]}),Object(Me.jsx)("br",{}),Object(Me.jsxs)("span",{children:["B = ",Je(i.assetBBalance)]}),Object(Me.jsx)("br",{}),Object(Me.jsx)("br",{})]})]})},In="1000000000000",Tn=(e,n,i,t)=>{var a,s;const d=null===(a=Object(u.find)(n.balances,{assetId:i}))||void 0===a?void 0:a.balance,l=null===(s=Object(u.find)(n.balances,{assetId:t}))||void 0===s?void 0:s.balance;if(!d||!l)throw new Error("Can't find the required balances in the pool");return function(e,n,i,t,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:In;return e.lbp.get_spot_price(n,i,t,a,s)}(e,d,l,i===n.assetInId?n.assetAWeights.current:n.assetBWeights.current,t===n.assetOutId?n.assetBWeights.current:n.assetAWeights.current)},Sn=(e,n,i,t)=>{var a,s;const d=null===(a=Object(u.find)(n.balances,{assetId:i}))||void 0===a?void 0:a.balance,l=null===(s=Object(u.find)(n.balances,{assetId:t}))||void 0===s?void 0:s.balance;if(d&&l)return((e,n,i)=>e.xyk.get_spot_price(n,i,In))(e,d,l)},An=()=>{const[e,n]=Object(t.useState)({assetInId:"0",assetOutId:"2"}),{data:i,loading:a,error:s}=(d=e,Object(m.a)($e,{variables:d,notifyOnNetworkStatusChange:!0}));var d;c.a.debug("TradePage.useGetPoolByAssetsQuery",e);const l=Object(t.useMemo)((()=>null===i||void 0===i?void 0:i.pool),[null===i||void 0===i?void 0:i.pool]);s&&c.a.error(s);const o=Object(t.useMemo)((()=>{const e=a;return c.a.debug("TradePage.loading",e),e}),[a]);c.a.debug("TradePage.poolData.pool",null===i||void 0===i?void 0:i.pool);const r=((e,n)=>{let{assetInId:i,assetOutId:a}=e;const s=Object(ee.a)(),d=he(s),{math:l}=pe();return Object(t.useMemo)((()=>{if(!l||!n||!i||!a||!d)return;const e="XYKPool"===(null===n||void 0===n?void 0:n.__typename)?Sn:Tn,t={aToB:e(l,n,i,a),bToA:e(l,n,a,i)};return c.a.debug("TradePage.useSpotPrice",t),t}),[d,i,a,n])})(e,null===i||void 0===i?void 0:i.pool),v=Object(t.useMemo)((()=>{var n,i;return{assetABalance:null===(n=Object(u.find)(null===l||void 0===l?void 0:l.balances,{assetId:e.assetInId}))||void 0===n?void 0:n.balance,assetBBalance:null===(i=Object(u.find)(null===l||void 0===l?void 0:l.balances,{assetId:e.assetOutId}))||void 0===i?void 0:i.balance}}),[l]);return Object(Me.jsxs)("div",{children:[Object(Me.jsx)("h1",{children:"Trade"}),Object(Me.jsx)("br",{}),Object(Me.jsx)("br",{}),Object(Me.jsx)(jn,{poolLiquidity:v,spotPrice:r}),Object(Me.jsx)(On,{onAssetIdsChange:(i,t)=>{const a={assetInId:i,assetOutId:t};c.a.debug("TradePage.handleAssetIdsChange",Object(u.isEqual)(e,a),a),Object(u.isEqual)(e,a)||n(a)},assetIds:e,loading:o,pool:l,spotPrice:r})]})},Bn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"SetActiveAccount"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"setActiveAccount"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}]}]}}],loc:{start:0,end:80,source:{body:"mutation SetActiveAccount($id: String) {\n    setActiveAccount(id: $id) @client\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},wn=e=>Object(tn.a)(Bn,{variables:e,refetchQueries:[ne]}),xn=e=>{let{account:n}=e;const[i]=wn({id:null===n||void 0===n?void 0:n.id}),[t]=wn({id:void 0});return Object(Me.jsxs)("div",{style:{marginBottom:"24px",padding:"12px",paddingLeft:0},children:[Object(Me.jsxs)("h3",{children:[null===n||void 0===n?void 0:n.name,(null===n||void 0===n?void 0:n.isActive)?" [active]":Object(Me.jsx)(Me.Fragment,{})]}),Object(Me.jsxs)("p",{children:[Object(Me.jsx)("b",{children:"Address:"}),null===n||void 0===n?void 0:n.id]}),Object(Me.jsxs)("div",{children:[Object(Me.jsx)("b",{children:"Balances:"}),null===n||void 0===n?void 0:n.balances.map(((e,n)=>Object(Me.jsxs)("p",{children:[e.assetId,":",Object(Me.jsxs)("i",{children:[" ",e.balance]})]},n)))]}),Object(Me.jsx)("button",{onClick:e=>(null===n||void 0===n?void 0:n.isActive)?t():i(),children:(null===n||void 0===n?void 0:n.isActive)?"Unset active":"Set active"})]})},Dn=()=>{var e;const{data:n,loading:i}=Object(m.a)(v,{notifyOnNetworkStatusChange:!0}),a=Object(t.useMemo)((()=>i),[i]);return Object(Me.jsxs)("div",{style:{textAlign:"left"},children:[Object(Me.jsx)("h1",{children:"Accounts"}),a?Object(Me.jsx)("i",{children:"[WalletPage] Loading accounts..."}):Object(Me.jsx)("i",{children:"[WalletPage] Everything is up to date"}),Object(Me.jsx)("br",{}),Object(Me.jsx)("br",{}),Object(Me.jsx)("div",{children:null===n||void 0===n||null===(e=n.accounts)||void 0===e?void 0:e.map(((e,n)=>Object(Me.jsx)(xn,{account:e},n)))})]})},Fn=()=>Object(Me.jsxs)(Ke.d,{children:[Object(Me.jsx)(Ke.b,{path:"/",element:Object(Me.jsx)(An,{})}),Object(Me.jsx)(Ke.b,{path:"wallet",element:Object(Me.jsx)(Dn,{})}),Object(Me.jsx)(Ke.b,{path:"*",element:Object(Me.jsx)(Ke.a,{to:"/"})})]}),Pn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetExtension"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"extension"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"isAvailable"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:116,source:{body:"# Query that triggers the local extension resolver\nquery GetExtension {\n  extension @client {\n    isAvailable\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}}}},_n=e=>{let{children:n}=e;const{data:i}=Object(m.a)(Pn,{notifyOnNetworkStatusChange:!0});return Object(Me.jsx)(Me.Fragment,{children:(null===i||void 0===i?void 0:i.extension.isAvailable)?"extension available":"extension unavailable"})};c.a.setLevel("debug");const Cn="feat/fetch-balances";Cn.length&&"/basilisk-ui/".concat(Cn,"/app");var qn=()=>Object(Me.jsx)(Ye,{children:Object(Me.jsx)(He.a,{children:Object(Me.jsx)(_n,{children:Object(Me.jsx)(Fn,{})})})});var Vn=e=>{e&&e instanceof Function&&i.e(5).then(i.bind(null,210)).then((n=>{let{getCLS:i,getFID:t,getFCP:a,getLCP:s,getTTFB:d}=n;i(e),t(e),a(e),s(e),d(e)}))};i(167);s.a.render(Object(Me.jsx)(qn,{}),document.getElementById("root")),Vn()},63:function(e,n){}},[[168,1,2]]]);
//# sourceMappingURL=main.22e2193d.chunk.js.map