{"version":3,"file":"static/js/949.a2bc9d52.chunk.js","mappings":"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","sources":["../node_modules/hydra-dx-wasm/build/xyk/bundler/hydra_dx_wasm_bg.js"],"sourcesContent":["import * as wasm from './hydra_dx_wasm_bg.wasm';\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n/**\n* @param {string} s\n* @param {string} b\n* @param {string} a\n* @returns {string}\n*/\nexport function get_spot_price(s, b, a) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(b, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.get_spot_price(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} s\n* @param {string} b\n* @param {string} a\n* @returns {string}\n*/\nexport function calculate_out_given_in(s, b, a) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(b, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.calculate_out_given_in(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} s\n* @param {string} b\n* @param {string} a\n* @returns {string}\n*/\nexport function calculate_in_given_out(s, b, a) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(s, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(b, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.calculate_in_given_out(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} reserve_a\n* @param {string} reserve_b\n* @param {string} amount_a\n* @returns {string}\n*/\nexport function calculate_liquidity_in(reserve_a, reserve_b, amount_a) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(reserve_a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(reserve_b, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(amount_a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.calculate_liquidity_in(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} reserve_a\n* @param {string} reserve_b\n* @param {string} shares\n* @param {string} total_shares\n* @returns {string}\n*/\nexport function calculate_liquidity_out_asset_a(reserve_a, reserve_b, shares, total_shares) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(reserve_a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(reserve_b, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(shares, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(total_shares, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.calculate_liquidity_out_asset_a(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} reserve_a\n* @param {string} reserve_b\n* @param {string} shares\n* @param {string} total_shares\n* @returns {string}\n*/\nexport function calculate_liquidity_out_asset_b(reserve_a, reserve_b, shares, total_shares) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(reserve_a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(reserve_b, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(shares, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(total_shares, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        wasm.calculate_liquidity_out_asset_b(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {string} a\n* @param {number} fee_numerator\n* @param {number} fee_denominator\n* @returns {string}\n*/\nexport function calculate_pool_trade_fee(a, fee_numerator, fee_denominator) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(a, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.calculate_pool_trade_fee(retptr, ptr0, len0, fee_numerator, fee_denominator);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n"],"names":["WASM_VECTOR_LEN","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","cachedTextEncoder","TextEncoder","module","require","encodeString","encodeInto","arg","view","buf","encode","set","read","length","written","passStringToWasm0","malloc","realloc","undefined","ptr","subarray","len","mem","offset","code","charCodeAt","slice","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","getStringFromWasm0","decode","get_spot_price","s","b","a","retptr","ptr0","len0","ptr1","len1","ptr2","len2","r0","r1","calculate_out_given_in","calculate_in_given_out","calculate_liquidity_in","reserve_a","reserve_b","amount_a","calculate_liquidity_out_asset_a","shares","total_shares","ptr3","len3","calculate_liquidity_out_asset_b","calculate_pool_trade_fee","fee_numerator","fee_denominator"],"sourceRoot":""}