{"version":3,"sources":["hooks/accounts/usePersistActiveAccount.tsx","hooks/accounts/resolvers/useSetActiveAccountMutationResolver.tsx","hooks/accounts/useSetActiveAccount.tsx","hooks/accounts/resolvers/useAccountsMutationResolvers.tsx","hooks/polkadotJs/typesConfig.tsx","hooks/config/usePersistentConfig.tsx","hooks/polkadotJs/usePolkadotJs.tsx","hooks/balances/useGetBalancesByAddress.tsx","hooks/balances/useBalanceQueryResolvers.tsx","hooks/vesting/useGetVestingScheduleByAddress.tsx","hooks/vesting/useVestingScheduleQueryResolvers.tsx","hooks/accounts/useGetAccounts.tsx","hooks/accounts/resolvers/useGetAccountsQueryResolver.tsx","hooks/lastBlock/useLastBlockQuery.tsx","hooks/lastBlock/useSubscribeNewBlockNumber.tsx","hooks/lastBlock/useRefetchWithNewBlock.tsx","hooks/accounts/queries/useGetActiveAccountQuery.tsx","hooks/vesting/useVestingMutationResolvers.tsx","hooks/balances/useBalanceMutationResolvers.tsx","hooks/config/useConfigQueryResolvers.tsx","hooks/config/useConfigMutationResolver.tsx","hooks/feePaymentAssets/useFeePaymentAssetsQueryResolvers.tsx","hooks/math/useMath.tsx","hooks/pools/useGetXykPools.tsx","hooks/pools/lbp/calculateOppositeAssetWeight.tsx","hooks/pools/lbp/calculateCurrentAssetWeight.tsx","hooks/lastBlock/readLastBlock.tsx","hooks/pools/useGetLbpPools.tsx","hooks/pools/useGetLbpPool.tsx","hooks/pools/resolvers/useGetPoolsQueryResolver.tsx","hooks/pools/useGetXykPool.tsx","hooks/assets/resolvers/useGetAssetsQueryResolver.tsx","hooks/assets/useGetAssets.tsx","components/Chart/shared.tsx","generated/graphql.tsx","hooks/accounts/readActiveAccount.tsx","hooks/pools/lbp/buy.tsx","hooks/pools/lbp/sell.tsx","hooks/pools/xyk/buy.tsx","hooks/pools/xyk/sell.tsx","hooks/pools/resolvers/usePoolsMutationResolvers.tsx","hooks/pools/resolvers/useSubmitTradeMutationResolvers.tsx","hooks/extension/resolvers/query/extension.tsx","hooks/extension/lib/getExtension.tsx","hooks/apollo/useApollo.tsx","hooks/accounts/resolvers/useAccountsQueryResolvers.tsx","hooks/pools/resolvers/usePoolsQueryResolver.tsx","hooks/extension/resolvers/useExtensionResolvers.tsx","hooks/assets/resolvers/useAssetsQueryResolvers.tsx","containers/MultiProvider.tsx","hooks/pools/queries/useGetPoolByAssetsQuery.tsx","components/Input/TokenInput.tsx","hooks/math/useFromPrecision.tsx","hooks/math/useToPrecision.tsx","containers/TradeForm/hooks/useTradeForm.tsx","containers/TradeForm/hooks/useListenForInput.tsx","hooks/pools/mutations/useSubmitTradeMutation.tsx","containers/TradeForm/hooks/useHandleSubmit.tsx","hooks/pools/xyk/calculateOutGivenIn.tsx","hooks/pools/lbp/calculateInGivenOut.tsx","hooks/pools/lbp/calculateOutGivenIn.tsx","hooks/pools/xyk/calculateInGivenOut.tsx","hooks/pools/poolHasAssets.tsx","hooks/math/usePercentageChange.tsx","containers/TradeForm/hooks/useSlippage.tsx","constants.tsx","containers/TradeForm/hooks/usePercentageFee.tsx","containers/TradeForm/hooks/useCalculateAllowedSlippage.tsx","containers/TradeForm/TradeForm.tsx","containers/TradeForm/hooks/useTradeType.tsx","containers/TradeForm/hooks/useHandleAssetIdsChange.tsx","containers/TradeForm/hooks/useCalculateInAndOut.tsx","containers/TradeForm/hooks/useResetAmountInputsOnPoolChange.tsx","containers/TradeChart.tsx","hooks/pools/lbp/calculateSpotPrice.tsx","hooks/pools/xyk/calculateSpotPrice.tsx","pages/TradePage/TradePage.tsx","pages/TradePage/hooks/useSpotPrice.tsx","hooks/accounts/mutations/useSetActiveAccountMutation.tsx","hooks/accounts/queries/useGetAccountsQuery.tsx","pages/WalletPage.tsx","containers/Router.tsx","components/Balance/metricUnit.tsx","components/Balance/FormattedBalance/FormattedBalance.tsx","components/Balance/FormattedBalance/hooks/useFormatSI.tsx","components/Icon/svg/HelpIcon.svg","components/Icon/svg/NotificationActiveIcon.svg","components/Icon/svg/NotificationInactiveIcon.svg","components/Icon/svg/DropdownArrowIcon.svg","components/Icon/Icon.tsx","components/Wallet/AccountSelector/AccountItem/AccountItem.tsx","components/Button/Button.tsx","components/Wallet/AccountSelector/AccountSelector.tsx","components/Wallet/Wallet.tsx","components/Wallet/AccountSelector/hooks/useModalPortalElement.tsx","components/Balance/AssetBalanceInput/hooks/useModalPortal.tsx","hooks/extension/queries/useGetExtensionQuery.tsx","containers/Wallet.tsx","containers/PageContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultValue","id","undefined","usePersistedActiveAccount","createPersistedState","usePersistActiveAccount","useSetActiveAccountMutationResolver","setActiveAccount","setPersistedActiveAccount","useCallback","async","client","address","console","log","cache","Promise","resolve","setTimeout","useSetActiveAccount","useResolverToRef","_obj","args","resolver","name","resolverRef","useRef","useEffect","current","debug","apply","arguments","defaultConfigValue","nodeUrl","process","processorUrl","appName","usePersistedConfig","usePersistentConfig","getPoolAccount","description","params","type","rpc","xyk","lbp","PolkadotJsProvider","usePolkadotJsContext","constate","apiInstance","setApiInstance","useState","loading","useMemo","provider","WsProvider","types","typesConfig","ormlTypes","typesAlias","ormlTypesAlias","api","ApiPromise","create","isReady","disconnect","useGetBalancesByAddress","assetIds","balances","includes","nativeAssetBalance","query","system","account","push","assetId","balance","data","free","toString","assetBalances","filter","e","tokens","accounts","multi","map","codec","i","entries","storageKey","toHuman","forEach","assetBalance","createType","getBalancesByAddress","useBalanceQueryResolvers","entity","__typename","assetInId","assetOutId","balanceLockDataType","getLockedBalanceByAddressAndLockId","lockId","lockedNativeBalance","find","locks","lockedAmount","eq","tokenBalanceLocks","_storageKey","tokenBalanceLock","toJSON","amount","lockedTokensBalance","useVestingScheduleQueryResolvers","getVestingScheduleByAddress","vestingSchedule","first","vesting","vestingSchedules","lockedVestingAmount","remainingVestingAmount","start","period","periodCount","perPeriod","useGetVestingScheduleByAddress","useGetAccountsQueryResolver","getAccounts","web3Enable","web3Accounts","encodeAddress","decodeAddress","meta","GET_LAST_BLOCK","LastBlockProvider","useLastBlockContext","lastBlock","setLastBlock","subscribeNewBlocks","derive","chain","validationData","parachainSystem","validationDataOption","isSome","parachainBlockNumber","block","header","number","relaychainBlockNumber","writeLastBlock","writeQuery","GET_ACTIVE_ACCOUNT","GetActiveAccountQueryProvider","useGetActiveAccountQueryContext","useApolloClient","result","useQuery","notifyOnNetworkStatusChange","refetchQueries","withGracefulErrors","fn","errorHandlers","reject","reduce","errorHandler","gracefulExtensionCancelationErrorHandler","message","error","vestingClaimHandler","status","events","dispatchError","isFinalized","info","event","method","section","phase","isInBlock","createdAtHash","isModule","registry","findMetaError","asModule","isBroadcast","hash","polkadotJsNotReadyYetError","useVestingMutationResolvers","claimVestedAmount","variables","readQuery","Error","signer","web3FromAddress","tx","claim","signAndSend","transferBalanceExtrinsic","currencies","transfer","useBalanceMutationResolvers","transferBalance","from","to","currencyId","transferBalanceHandler","useConfigQueryResolvers","persistedConfig","config","_variables","feePaymentAsset","multiTransactionPayment","accountCurrencyMap","useConfigMutationResolvers","_persistedConfig","setPersistedConfig","setConfig","setCurrency","setCurrencyHandler","persistableConfig","useFeePaymentAssetsQueryResolvers","feePaymentAssets","acceptedCurrencies","acceptedCurrency","fallbackPrice","loadMath","MathProvider","useMathContext","wasm","setWasm","instance","math","mapToPoolId","hundredWithPrecision6","BigNumber","multipliedBy","pow","calculateOppositeAssetWeight","weight","minus","toFixed","calculateCurrentAssetWeight","pool","weights","calculate_linear_weights","startBlock","endBlock","initial","final","readLastBlock","repayFee","numerator","denominator","mapToPool","poolData","lastBlockData","feeCollector","repayTarget","partialPool","assets","end","partialAssetAWeights","initialWeight","finalWeight","assetAWeights","assetBWeights","feeCollectorBalanceLockAmount","repayTargetReached","gt","poolFee","fee","useGetLbpPools","all","getLbpPools","useGetLbpPool","poolId","getLbpPool","useGetPoolsQueryResolver","getXykPools","poolAssets","useGetXykPools","getXykPool","useGetXykPool","context","poolIds","lbpPoolId","xykPoolId","getPoolIdsByAssetIds","lbpPool","xykPool","lbpPools","xykPools","concat","useGetAssetsQueryResolver","getAssets","assetRegistry","mapToAsset","useGetAssets","asset","ChartGranularity","ChartType","PoolType","TradeType","readActiveAccount","returnPartialData","buy","assetBuy","assetSell","amountBuy","maxSold","activeAccount","buyHandler","sell","amountSell","minBought","sellHandler","xykBuyHandler","usePoolsMutationResolvers","submitTrade","poolType","XYK","tradeType","Buy","buyXyk","assetOutAmount","amountWithSlippage","Sell","sellXyk","assetInAmount","LBP","buyLbp","sellLbp","useSubmitTradeMutationResolver","extensionQueryResolver","withTypename","extension","isWeb3Injected","require","isAvailable","getExtension","useResolvers","Query","AccountsQueryResolver","Account","Accounts","PoolsQueryResolver","XYKPool","LBPPool","getPoolsQueryResolver","poolFieldsQueryResolvers","pools","usePoolsQueryResolver","ExtensionQueryResolver","Mutation","typeDefs","useConfigureApolloClient","resolvers","InMemoryCache","ApolloClient","uri","connectToDevTools","queryDeduplication","updateCache","useRefetchWithNewBlock","ConfiguredApolloProvider","children","ApolloProvider","QueryProvider","MultiProvider","GET_POOL_BY_ASSETS","TokenInput","assetIdInputProps","assetAmountInputProps","disabled","precision12","fromPrecision12","dividedBy","toPrecision12","useListenForInput","form","field","state","setState","inputRef","control","_fields","_f","ref","listener","addEventListener","removeEventListener","SUBMIT_TRADE","useHandleSubmit","allowedSlippage","slippage","useMutation","spotPriceAmount","slippageAmount","amountBN","plus","applyAllowedSlippage","calculateOutGivenInFromPool","amountIn","assetInBalance","assetOutBalance","inReserve","outReserve","calculate_out_given_in","calculateOutGivenIn","getPoolBalances","assetABalance","assetBBalance","getInAndOutWeights","assetInWeight","assetOutWeight","calculateInGivenOutFromPool","amountOut","inWeight","outWeight","calculate_in_given_out","calculateInGivenOut","poolHasAssets","percentageChange","a","b","aBN","calculateSlippage","spotPrice","resultPercentageChange","isNaN","ROUNDING_MODE","ROUND_UP","percentualSlippage","abs","useSlippage","aToB","bToA","xykFee","feeToPercentage","feeFromPool","constants","defaultAllowedSlippage","useCalculateAllowedSlippage","watchAutoSlippage","watch","allowedSlippageInputDisabled","getValues","allowedSlippageWithFee","setValue","TradeForm","onAssetIdsChange","useForm","defaultValues","autoSlippage","useTradeForm","usePercentageFee","setTradeType","watchassetInAmount","watchAassetInId","watchAassetOutAmount","watchAassetOutId","useTradeType","useHandleAssetIdsChange","calculateOutGivenInFromPoolXYK","calculateOutGivenInFromPoolLBP","calculateInGivenOutFromPoolXYK","calculateInGivenOutFromPoolLBP","outAmount","inAmount","useCalculateInAndOut","previousPoolId","usePreviousDistinct","isEqual","resetField","useResetAmountInputsOnPoolChange","handleSubmit","onSubmit","register","TradeChart","poolLiquidity","oneWithPrecision","calculateSpotPriceFromPool","get_spot_price","calculateSpotPrice","TradePage","setAssetIds","poolLoading","poolError","calculateSpotPriceFromPoolXYK","calculateSpotPriceFromPoolLBP","useSpotPrice","newIds","SET_ACTIVE_ACCOUNT","useSetActiveAccountMutation","GET_ACCOUNTS","useGetAccountsQuery","persistedActiveAccount","unsetActiveAccount","style","marginBottom","padding","paddingLeft","onClick","_","WalletPage","accountsData","accountsLoading","textAlign","Router","path","element","UnitStyle","MetricUnit","unitMap","assetIdNameMap","SI_PREFIXES","prefixes","prefix","metricPrefix","base10","symbol","fullName","FormattedBalance","precision","unitStyle","LONG","assetSymbol","formattedBalance","balanceWithPrecision12","siFormat","formatFixedSI","unitName","unit","numberOfDecimalPlaces","value","split","length","suffix","displayUnit","useFormatSI","className","toLowerCase","_path","_extends","Object","assign","target","source","key","prototype","hasOwnProperty","call","this","SvgHelpIcon","_ref","svgRef","title","titleId","props","width","height","viewBox","fill","xmlns","d","ForwardRef","_circle","SvgNotificationActiveIcon","fillRule","clipRule","cx","cy","r","SvgNotificationInactiveIcon","SvgDropdownArrowIcon","IconType","Icon","HELP","NOTIFICATION_ACTIVE","NOTIFICATION_INACTIVE","DROPDOWN_ARROW","AccountItem","active","classNames","then","SHORT","size","theme","ButtonKind","Button","kind","Primary","Secondary","AccountSelector","onAccountSelected","innerRef","closeModal","href","Wallet","modalContainerRef","extensionLoading","isExtensionAvailable","modalPortalElement","handleAccountSelected","elementRef","isModalOpen","useModalPortalElement","toggleModal","modalPortal","toggleId","elementFactory","container","closeOnClickOutside","setModalPortal","setIsModalOpen","openModal","uuidv4","createPortal","useOnClickOutside","didClickOutsideToggle","closest","useModalPortal","handleAccountSelectorClick","GET_EXTENSION","extensionData","PageContainer","setLevel","branch","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.07eda063.chunk.js","sourcesContent":["import createPersistedState from 'use-persisted-state';\n\nexport const key = 'basilisk-active-account';\nexport const defaultValue = {\n  id: undefined,\n};\nexport interface PersistedAccount {\n  id: string | undefined;\n}\n\n// we're not using react-use/useLocalStorage since i couldn't figure out\n// why it would not trigger effects when the local storage updates\nconst usePersistedActiveAccount = createPersistedState(key);\nexport const usePersistActiveAccount = () =>\n  usePersistedActiveAccount<PersistedAccount | undefined>(defaultValue);\n","import { ApolloClient, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { useSetActiveAccount } from '../useSetActiveAccount';\nimport { SetActiveAccountMutationVariables } from '../mutations/useSetActiveAccountMutation';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\n\nexport const useSetActiveAccountMutationResolver = () => {\n  const setActiveAccount = useSetActiveAccount();\n\n  return useResolverToRef(\n    useCallback(\n      async (\n        _obj,\n        args: SetActiveAccountMutationVariables,\n        { client }: { client: ApolloClient<NormalizedCacheObject> }\n      ) => setActiveAccount(client, args.id),\n      [setActiveAccount]\n    ),\n    'setActiveAccount'\n  );\n};\n","import { ApolloClient, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { usePersistActiveAccount } from './usePersistActiveAccount';\n\nexport const useSetActiveAccount = () => {\n  const [, setPersistedActiveAccount] = usePersistActiveAccount();\n\n  return useCallback(\n    async (\n      client: ApolloClient<NormalizedCacheObject>,\n      address: string | undefined\n    ) => {\n      // const accountsData = client.cache?.readQuery<GetAccountsQueryResponse>({\n      //   query: GET_ACCOUNTS,\n      // });\n\n      console.log('setPersistedActiveAccount', client.cache);\n\n      // if (!accountsData?.accounts) return;\n      // const accounts = accountsData.accounts;\n\n      // const accounts = accountsData.accounts.map((account) => ({\n      //   ...account,\n      //   isActive: account.id === address,\n      // }));\n\n      // const activeAccount = find(accounts, { id: address });\n      console.log('setPersistedActiveAccount', address);\n      setPersistedActiveAccount({\n        id: address,\n      });\n\n      // TODO: return the data to be mutated from the mutation instead\n      // client.cache?.writeQuery<GetAccountsQueryResponse>({\n      //     query: GET_ACCOUNTS,\n      //     data: { accounts, lastBlock: accountsData.lastBlock }\n      // });\n\n      // accounts.forEach((account) => {\n      //   client.cache.modify({\n      //     id: client.cache.identify({\n      //       __typename: account.__typename,\n      //       id: account.id,\n      //     }),\n      //     fields: {\n      //       isActive: (_) => account.isActive,\n      //     },\n      //   });\n      // });\n\n      // wait for the local storage changes before finishing the mutation\n      // TODO: find a better way to wait until the local storage changes are\n      // propagated to the resolverRef\n      await new Promise((resolve) => setTimeout(resolve, 0));\n\n      return true;\n    },\n    [setPersistedActiveAccount]\n  );\n};\n","import { Resolver } from '@apollo/client';\nimport { useEffect, useRef } from 'react';\nimport log from 'loglevel';\nimport { useSetActiveAccountMutationResolver } from './useSetActiveAccountMutationResolver';\n\n/**\n * Updates the resolver fn ref each time the given resolver fn changes.\n *\n * This is necessary to reflect changes made to functions within hooks\n * within the Apollo resolvers configuration.\n */\nexport const useResolverToRef = (resolver: Resolver, name?: string) => {\n  const resolverRef = useRef(resolver);\n  // when the resolver changes, update the ref\n  useEffect(() => {\n    resolverRef.current = resolver;\n  }, [resolver]);\n\n  return function resolverFromRef() {\n    // TODO is there a better way to debug resolvers? Since the function name\n    // is not visible in the apollo error\n    log.debug('Running resolver', name);\n    // execute the wrapper resolver ref, with the given arguments from Apollo\n    return resolverRef.current.apply(undefined, arguments as any);\n  };\n};\n\n/**\n * Used to resolve mutations regarding the Account entity\n * @returns\n */\nexport const useAccountsMutationResolvers = () => {\n  const setActiveAccountMutationResolver =\n    useSetActiveAccountMutationResolver();\n\n  return {\n    setActiveAccount: setActiveAccountMutationResolver,\n  };\n};\n","export default {\n    \"alias\": {\n      \"tokens\": {\n        \"AccountData\": \"OrmlAccountData\"\n      }\n    },\n    \"types\": [\n      {\n        \"AssetPair\": {\n          \"asset_in\": \"AssetId\",\n          \"asset_out\": \"AssetId\"\n        },\n        \"Amount\": \"i128\",\n        \"AmountOf\": \"Amount\",\n        \"Address\": \"AccountId\",\n        \"OrmlAccountData\": {\n          \"free\": \"Balance\",\n          \"frozen\": \"Balance\",\n          \"reserved\": \"Balance\"\n        },\n        \"Fee\": {\n          \"numerator\": \"u32\",\n          \"denominator\": \"u32\"\n        },\n        \"BalanceInfo\": {\n          \"amount\": \"Balance\",\n          \"assetId\": \"AssetId\"\n        },\n        \"Chain\": {\n          \"genesisHash\": \"Vec<u8>\",\n          \"lastBlockHash\": \"Vec<u8>\"\n        },\n        \"Currency\": \"AssetId\",\n        \"CurrencyId\": \"AssetId\",\n        \"CurrencyIdOf\": \"AssetId\",\n        \"Intention\": {\n          \"who\": \"AccountId\",\n          \"asset_sell\": \"AssetId\",\n          \"asset_buy\": \"AssetId\",\n          \"amount\": \"Balance\",\n          \"discount\": \"bool\",\n          \"sell_or_buy\": \"IntentionType\"\n        },\n        \"IntentionId\": \"Hash\",\n        \"IntentionType\": {\n          \"_enum\": [\n            \"SELL\",\n            \"BUY\"\n          ]\n        },\n        \"LookupSource\": \"AccountId\",\n        \"Price\": \"Balance\",\n        \"ClassId\": \"u64\",\n        \"TokenId\": \"u64\",\n        \"ClassData\": {\n          \"is_pool\": \"bool\"\n        },\n        \"TokenData\": {\n          \"locked\": \"bool\"\n        },\n        \"ClassInfo\": {\n          \"metadata\": \"Vec<u8>\",\n          \"total_issuance\": \"TokenId\",\n          \"owner\": \"AccountId\",\n          \"data\": \"ClassData\"\n        },\n        \"TokenInfo\": {\n          \"metadata\": \"Vec<u8>\",\n          \"owner\": \"AccountId\",\n          \"data\": \"TokenData\"\n        },\n        \"ClassInfoOf\": \"ClassInfo\",\n        \"TokenInfoOf\": \"TokenInfo\",\n        \"ClassIdOf\": \"ClassId\",\n        \"TokenIdOf\": \"TokenId\",\n        \"OrderedSet\": \"Vec<AssetId>\",\n        \"VestingSchedule\": {\n          \"start\": \"BlockNumber\",\n          \"period\": \"BlockNumber\",\n          \"period_count\": \"u32\",\n          \"per_period\": \"Compact<Balance>\"\n        },\n        \"VestingScheduleOf\": \"VestingSchedule\",\n        \"LBPWeight\": \"u32\",\n        \"WeightCurveType\": {\n          \"_enum\": [\n            \"Linear\"\n          ]\n        },\n        \"PoolId\": \"AccountId\",\n        \"BalanceOf\": \"Balance\",\n        \"AssetType\": {\n          \"_enum\": {\n            \"Token\": \"Null\",\n            \"PoolShare\": \"(AssetId,AssetId)\"\n          }\n        },\n        \"Pool\": {\n          \"owner\": \"AccountId\",\n          \"start\": \"BlockNumber\",\n          \"end\": \"BlockNumber\",\n          \"assets\": \"AssetPair\",\n          \"initial_weight\": \"LBPWeight\",\n          \"final_weight\": \"LBPWeight\",\n          \"weight_curve\": \"WeightCurveType\",\n          \"fee\": \"Fee\",\n          \"fee_collector\": \"AccountId\"\n        },\n        \"AssetDetails\": {\n          \"name\": \"Vec<u8>\",\n          \"asset_type\": \"AssetType\",\n          \"existential_deposit\": \"Balance\",\n          \"locked\": \"bool\"\n        },\n        \"AssetDetailsT\": \"AssetDetails\",\n        \"AssetMetadata\": {\n          \"symbol\": \"Vec<u8>\",\n          \"decimals\": \"u8\"\n        },\n        \"AssetInstance\": \"AssetInstanceV1\",\n        \"MultiLocation\": \"MultiLocationV1\",\n        \"AssetNativeLocation\": \"MultiLocation\",\n        \"MultiAsset\": \"MultiAssetV1\",\n        \"Xcm\": \"XcmV1\",\n        \"XcmOrder\": \"XcmOrderV1\"\n      }\n    ]\n  };","import createPersistedState from 'use-persisted-state';\nimport { Config } from '../../generated/graphql';\n\nconst key = 'basilisk-config';\nexport const defaultConfigValue = {\n    nodeUrl: process.env.REACT_APP_NODE_URL!,\n    processorUrl: process.env.REACT_APP_PROCESSOR_URL!,\n    appName: process.env.REACT_APP_APP_NAME!\n};\n\n// TODO: write apollo integration for querying and mutating the config\nconst usePersistedConfig = createPersistedState(key)\nexport const usePersistentConfig = () => usePersistedConfig<Config>(defaultConfigValue);","import { ApiPromise, WsProvider } from '@polkadot/api';\nimport { useMemo, useState, useEffect } from 'react';\nimport constate from 'constate';\nimport typesConfig from './typesConfig';\nimport { usePersistentConfig } from '../config/usePersistentConfig';\nimport {\n  types as ormlTypes,\n  typesAlias as ormlTypesAlias,\n} from '@open-web3/orml-type-definitions';\n\nconst getPoolAccount = {\n  description: 'Get pool account id by asset IDs',\n  params: [\n    {\n      name: 'assetInId',\n      type: 'u32',\n    },\n    {\n      name: 'assetOutId',\n      type: 'u32',\n    },\n  ],\n  type: 'AccountId',\n};\nconst rpc = {\n  xyk: {\n    getPoolAccount,\n  },\n  lbp: {\n    getPoolAccount,\n  },\n};\n\n/**\n * Setup an instance of PolkadotJs, and watch\n * for config updates. In case the nodeUrl changes,\n * then re-create the PolkadotJs instance\n */\nexport const useConfigurePolkadotJs = () => {\n  const [{ nodeUrl }] = usePersistentConfig();\n  const [apiInstance, setApiInstance] = useState<ApiPromise | undefined>(\n    undefined\n  );\n  const loading = useMemo(() => (apiInstance ? false : true), [apiInstance]);\n  const provider = useMemo(() => new WsProvider(nodeUrl), [nodeUrl]);\n\n  const types = useMemo(\n    () => ({\n      ...typesConfig.types[0],\n      ...ormlTypes,\n    }),\n    []\n  );\n\n  const typesAlias = useMemo(\n    () => ({\n      ...typesConfig.alias,\n      ...ormlTypesAlias,\n    }),\n    []\n  );\n\n  // (re-)Create the PolkadotJS instance, when the provider updates.\n  useEffect(() => {\n    (async () => {\n      setApiInstance(undefined);\n      const api = await ApiPromise.create({\n        provider,\n        types,\n        typesAlias,\n        rpc,\n      });\n      await api.isReady;\n      setApiInstance(api);\n    })();\n\n    // when the component using the usePolkadot hook unmounts, disconnect the websocket\n    return () => {\n      apiInstance?.disconnect();\n    };\n  }, [provider, apiInstance, types, typesAlias]);\n\n  return { apiInstance, loading };\n};\n\n// TODO: lift to context using constate\nexport const [PolkadotJsProvider, usePolkadotJsContext] = constate(\n  useConfigurePolkadotJs\n);\n","import { ApiPromise } from '@polkadot/api';\nimport { includes } from 'lodash';\nimport { useCallback } from 'react';\nimport { Balance } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\n\nexport const nativeAssetId = '0';\nexport const assetBalanceDataType = 'AccountData';\n\nexport const getBalancesByAddress = async (\n    apiInstance: ApiPromise, \n    address: string, \n    assetIds?: string[]\n) => {\n    const balances: Balance[] = [];\n        \n    // fetch the native balance, only if no assetIds were specified, or if it was explicitly requested\n    if (!assetIds || includes(assetIds, nativeAssetId)) {\n        const nativeAssetBalance = await apiInstance.query.system.account(address);    \n\n        balances.push({\n            assetId: nativeAssetId,\n            balance: nativeAssetBalance?.data.free.toString()\n        });\n    }\n\n    // we've already fetched the native balance above, ignore it down the line\n    assetIds = assetIds ? assetIds.filter(e => e !== nativeAssetId) : assetIds;\n\n    // TODO: write type definitions for `query.tokens`\n    const assetBalances = assetIds\n        // if there are specific assetIds to fetch, query only those\n        ? (await apiInstance.query.tokens.accounts.multi(\n            // query for [address, assetId]\n            assetIds\n                ?.map((assetId) => [address, assetId])\n        ))\n            .map((codec, i) => ({\n                // pair the assetId in the same order as asked for in the multi query above\n                assetId: assetIds![i],\n                balance: codec\n            }))\n        // if no assetIds were specified, fetch all balances\n        : (await apiInstance.query.tokens.accounts.entries(address))\n            .map(([storageKey, codec]) => ({\n                assetId: (storageKey.toHuman() as string[])[1],\n                balance: codec\n            }))\n\n    assetBalances?.forEach(assetBalance => {\n        // only extracting the free balance as of now\n        const balance = apiInstance?.createType(\n            assetBalanceDataType,\n            assetBalance.balance\n        ).free.toString();\n\n        balances.push({ assetId: assetBalance.assetId, balance });\n    });\n\n    // TODO: treat Balance as a top level entity for caching purposes\n    return balances;\n}\n\nexport const useGetBalancesByAddress = () => {\n    const { apiInstance, loading } = usePolkadotJsContext()\n\n    return useCallback(async (address?: string, assetIds?: string[]) => {\n        if (!apiInstance || !address) return;\n        return await getBalancesByAddress(apiInstance, address, assetIds)\n    }, [apiInstance, loading]);\n}","import { useCallback } from 'react'\nimport { Account, LbpPool, XykPool } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { useGetBalancesByAddress } from './useGetBalancesByAddress';\n\nexport const __typename = 'Balance';\nexport const useBalanceQueryResolvers = () => {\n    const getBalancesByAddress = useGetBalancesByAddress();\n    const balances = useResolverToRef(\n        useCallback(\n            /**\n             * TODO: figure out how to use @export to fetch balances only for certain assetIds\n             * then we don't have to pass in so many different entities as possible arugments here.\n             * \n             * This should also allow caching of balances if they are not fetched as a nested field,\n             * but rather a top level field per address.\n             */ \n            async (entity: Account | LbpPool | XykPool, args) => {\n                let assetIds;\n                \n                // TODO: how to extract the typename from the LbpPool[__typename] directly?\n                if (entity.__typename === 'LBPPool' || entity.__typename === 'XYKPool') {\n                    entity = (entity as LbpPool | XykPool);\n                    assetIds = [entity.assetInId, entity.assetOutId];\n                }\n\n                return (await getBalancesByAddress(entity.id, assetIds))\n                    ?.map(balance => ({\n                        ...balance,\n                        __typename,\n                        id: `${entity.id}-${balance.assetId}`,\n                    }))\n            }, \n            [getBalancesByAddress]\n        ),\n        'balances'\n    );\n\n    return {\n        balances\n    }\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { Vec } from '@polkadot/types';\nimport { VestingScheduleOf, BalanceOf } from '@open-web3/orml-types/interfaces'\nimport { find, first } from 'lodash';\nimport { ApiPromise } from '@polkadot/api';\nimport { Codec } from '@polkadot/types/types';\n\nexport const balanceLockDataType = 'Vec<BalanceLock>';\nexport const tokensLockDataType = balanceLockDataType;\n\nexport const vestingBalanceLockId = 'ormlvest';\n\nexport const vestingScheduleDataType = 'Vec<VestingScheduleOf>';\n\nexport interface OrmlTokensBalanceLock {\n    id?: string,\n    amount?: number,\n}\n\nexport const getLockedBalanceByAddressAndLockId = async (\n    apiInstance: ApiPromise,\n    address: string,\n    lockId: string\n) => {\n    const lockedNativeBalance = find(\n        apiInstance.createType(\n            balanceLockDataType,\n            await apiInstance.query.balances.locks(address)\n        ),\n        lockedAmount => (\n            lockedAmount.id.eq(lockId)\n        )\n    );\n\n    const tokenBalanceLocks = (await apiInstance.query.tokens.locks.entries(address))\n        .map(([_storageKey, codec]: [any, Codec]) => {\n            const tokenBalanceLock = (codec.toJSON() as any)[0] as unknown as OrmlTokensBalanceLock;\n            return {\n                id: tokenBalanceLock?.id,\n                amount: tokenBalanceLock?.amount?.toString()\n            }\n        });\n    \n    const lockedTokensBalance = find(\n        tokenBalanceLocks,\n        lockedAmount => (\n            lockedAmount?.id === lockId \n        )\n    );\n    \n    return lockedNativeBalance || lockedTokensBalance;\n}\n\nexport const useGetVestingScheduleByAddress = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const getVestingScheduleByAddress = useCallback(async (address?: string) => {\n        if (!apiInstance || !address) return;\n\n        // TODO: instead of multiple .createType calls, use the following\n        // https://github.com/AcalaNetwork/acala.js/blob/9634e2291f1723a84980b3087c55573763c8e82e/packages/sdk-core/src/functions/getSubscribeOrAtQuery.ts#L4\n        const vestingSchedule = first(\n            apiInstance.createType(\n                vestingScheduleDataType,\n                await apiInstance.query.vesting.vestingSchedules(address)\n            ) as Vec<VestingScheduleOf>\n        );\n\n        const lockedVestingAmount = await getLockedBalanceByAddressAndLockId(\n            apiInstance,\n            address,\n            vestingBalanceLockId\n        );\n\n        // TODO: are we sure this really conforms with the graphql VestingSchedule type\n        // in all conditions?\n        return {\n            // TODO: add a claimableAmount (https://gist.github.com/maht0rz/53466af0aefba004d5a4baad23f8ce26)\n            remainingVestingAmount: lockedVestingAmount?.amount?.toString(),\n            start: vestingSchedule?.start.toString(),\n            period: vestingSchedule?.period.toString(),\n            periodCount: vestingSchedule?.periodCount.toString(),\n            perPeriod: vestingSchedule?.perPeriod.toString()\n        }\n\n    }, [apiInstance, loading]);\n\n    return getVestingScheduleByAddress;\n}","import { useCallback } from 'react'\nimport { Account } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { useGetVestingScheduleByAddress } from './useGetVestingScheduleByAddress';\n\nexport const useVestingScheduleQueryResolvers = () => {\n    const getVestingScheduleByAddress = useGetVestingScheduleByAddress();\n    const vestingSchedule = useResolverToRef(\n        useCallback(\n            async (account: Account) => await getVestingScheduleByAddress(account.id), \n            [getVestingScheduleByAddress]\n        ),\n        'vestingSchedule'\n    );\n\n    return {\n        vestingSchedule\n    }\n}","import { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport { decodeAddress, encodeAddress } from '@polkadot/util-crypto';\nimport { useCallback } from 'react';\n\n// prefix for the ss58 address formatting of substrate addresses\nexport const basiliskAddressPrefix = 10041;\n\n/**\n * Used to fetch either all accounts, or accounts matching the given\n * set of parameters e.g. 'isActive'.\n */\nexport const useGetAccounts = () =>\n  useCallback(async () => {\n    // TODO: use `config.appName`\n    // ensure we're connected to the polkadot.js extension\n    await web3Enable('basilisk-ui');\n\n    // get all the accounts from the polkadot.js extension\n    const accounts = (await web3Accounts())\n      // transform the returned accounts into the required entity format\n      .map((account) => {\n        console.log('getAccounts', account);\n        const address = encodeAddress(\n          decodeAddress(account.address),\n          basiliskAddressPrefix\n        );\n        return {\n          id: address,\n          name: account.meta.name,\n          balances: [],\n        };\n      });\n\n    // return all retrieved accounts\n    return accounts;\n  }, []);\n","import { useCallback } from 'react';\nimport { useGetAccounts } from '../useGetAccounts';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\n\nexport const __typename = 'Account';\n\nexport const useGetAccountsQueryResolver = () => {\n  const getAccounts = useGetAccounts();\n\n  return useResolverToRef(\n    useCallback(\n      async (_obj) => {\n        const accounts = await getAccounts();\n\n        // if no results were found, return undefined/null\n        // this is useful when un-setting the active account\n        if (!accounts) {\n          return null;\n        }\n\n        return accounts.map((account) => ({\n          ...account,\n          __typename,\n        }));\n      },\n      [getAccounts]\n    ),\n    'accounts'\n  );\n};\n","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { LastBlock, Query } from '../../generated/graphql';\n\n\nexport const GET_LAST_BLOCK = loader('./graphql/GetLastBlock.query.graphql');\nexport interface GetLastBlockQueryResponse {\n    lastBlock: Query['lastBlock']\n}\n\nexport const useLastBlockQuery = () => useQuery<GetLastBlockQueryResponse>(GET_LAST_BLOCK);","import constate from 'constate';\nimport { useCallback, useEffect, useState } from 'react';\nimport { LastBlock } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { Option } from '@polkadot/types'\nimport BN from 'bn.js';\nimport { Codec } from '@polkadot/types/types';\n\nexport const validationDataDataType = 'Option<PolkadotPrimitivesV1PersistedValidationData>';\nexport interface PolkadotPrimitivesV1PersistedValidationData {\n    relayParentNumber: number\n}\nexport type ValidationData = PolkadotPrimitivesV1PersistedValidationData\n\n// TODO: lift up using constate\nexport const useSubscribeNewBlock = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const [lastBlock, setLastBlock] = useState<Partial<LastBlock> | undefined>(undefined);\n\n    const subscribeNewBlocks = useCallback(() => {\n        if (!apiInstance) return;\n        // TODO: how to unsubscribe?\n        apiInstance.derive.chain\n            .subscribeNewBlocks(async (block) => {\n                const validationData = await apiInstance.query.parachainSystem.validationData();\n\n                const validationDataOption = apiInstance.createType(\n                    validationDataDataType,\n                    validationData\n                );\n                \n                // TODO: this will only update the block if the relay chain block number is known\n                if (validationDataOption.isSome) {\n                    const validationData = validationDataOption.toJSON() as unknown as PolkadotPrimitivesV1PersistedValidationData;\n                    setLastBlock({\n                        parachainBlockNumber: block.block.header.number.toString(),\n                        relaychainBlockNumber: '821' || validationData.relayParentNumber.toString()\n                    })\n                }                \n            })\n\n    }, [apiInstance]);\n\n    useEffect(() => {\n        if (loading) return;\n        subscribeNewBlocks();\n    }, [loading, subscribeNewBlocks])\n\n    return lastBlock;\n}\n\nexport const [LastBlockProvider, useLastBlockContext] = constate(useSubscribeNewBlock);","import { ApolloCache, ApolloClient, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { relativeTimeRounding } from 'moment';\nimport { useEffect } from 'react';\nimport { LastBlock } from '../../generated/graphql';\nimport { GetLastBlockQueryResponse, GET_LAST_BLOCK } from './useLastBlockQuery';\nimport { useLastBlockContext } from './useSubscribeNewBlockNumber'\n\nexport const __typename = 'LastBlock';\nexport const id = __typename;\n\nexport const writeLastBlock = (cache: ApolloCache<NormalizedCacheObject>, lastBlock: LastBlock) => {\n    return cache.writeQuery<GetLastBlockQueryResponse>({\n        query: GET_LAST_BLOCK,\n        data: {\n            lastBlock\n        }\n    })\n}\nexport const useRefetchWithNewBlock = (client: ApolloClient<NormalizedCacheObject>) => {\n    const lastBlock = useLastBlockContext();\n\n    useEffect(() => {\n        writeLastBlock(client.cache, {\n            __typename,\n            id,\n            ...lastBlock\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!lastBlock) return;\n\n        const lastBlockData = client.cache.readQuery<GetLastBlockQueryResponse>({\n            query: GET_LAST_BLOCK\n        });\n\n        if (!lastBlockData?.lastBlock?.parachainBlockNumber) {\n            // received the first real lastBlockNumber, don't refetch just yet\n            writeLastBlock(client.cache, {\n                __typename,\n                id,\n               ...lastBlock\n            })\n        } else {\n            // lastBlockNumber has been updated, and it's not the first time\n            // refetch queries that depend on the lastBlockNumber\n            client.refetchQueries({\n                updateCache(cache) {\n                    writeLastBlock(cache, {\n                        __typename,\n                        id,\n                        ...lastBlock\n                    })\n                }\n            })\n        }\n    }, [lastBlock]);\n}","import { useApolloClient, useQuery } from '@apollo/client';\nimport constate from 'constate';\nimport { loader } from 'graphql.macro';\nimport { useEffect } from 'react';\nimport { Query } from '../../../generated/graphql';\n\nexport const GET_ACTIVE_ACCOUNT = loader(\n  './../graphql/GetActiveAccount.query.graphql'\n);\n\nexport interface GetActiveAccountQueryResponse {\n  account: Query['account'];\n  lastBlock: Query['lastBlock'];\n}\n\n// TODO: turn this into a lazy query instead, so it does not get fetched right away\nexport const useGetActiveAccountQuery = () => {\n  const client = useApolloClient();\n  const result = useQuery<GetActiveAccountQueryResponse>(GET_ACTIVE_ACCOUNT, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  // when the active account updates, refetch the config\n  // since the config for `feePaymentAsset` depends on the active account\n  useEffect(() => {\n    client.refetchQueries({\n      // include: [GET_CONFIG]\n    });\n  }, [result.data?.account?.id, client]);\n\n  return result;\n};\nexport const [GetActiveAccountQueryProvider, useGetActiveAccountQueryContext] =\n  constate(useGetActiveAccountQuery);\n","import { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { ClaimVestedAmountMutationVariables } from './useClaimVestedAmountMutation';\nimport { ExtrinsicStatus } from '@polkadot/types/interfaces/author';\nimport { DispatchError, EventRecord } from '@polkadot/types/interfaces/system';\nimport log from 'loglevel';\nimport { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { ApiPromise } from '@polkadot/api';\n\n/**\n * Run an async function and handle the thrown errors\n * with an array of error handlers, which may handle the errors gracefully\n * \n * @param fn \n * @param errorHandlers \n * @returns \n */\nexport type resolve = (result?: any) => void;\nexport type reject = (error?: any) => void;\nexport const withGracefulErrors = async (\n    fn: (resolve: resolve, reject: reject) => Promise<any>,\n    errorHandlers: ((error: any) => void)[]\n) => {\n    return new Promise<any>(async (resolve, reject) => {\n        try {\n            resolve(await fn(resolve, reject));\n        } catch (e: any) {\n            console.log('graceful error', e);\n            e = errorHandlers.reduce((e, errorHandler) => errorHandler(e), e);\n            // rejecting this promise with an error instead of throwing an error\n            // is necessary to reflect the apollo resolver loading state correctly\n            e ? reject(e) : resolve(null)\n        }\n    })\n}\n\nexport const cancelledErrorMessage = 'Cancelled';\n\n/**\n * This is an example graceful error handler,\n * if this would return `e` instead of `void`,\n * then the following graceful error handler would be triggered,\n * or by default the error would be thrown.\n * \n * @param e\n * @returns \n */\nexport const gracefulExtensionCancelationErrorHandler = (e: any) => {\n    if ((e as Error)?.message === cancelledErrorMessage) {\n        log.error('Operation presumably cancelled by the user in the Polkadot.js extension')\n        return;\n    }\n    return e;\n}\n\nexport const vestingClaimHandler = (resolve: resolve, reject: reject, apiInstance?: ApiPromise) => ({\n    status,\n    events = [],\n    dispatchError\n}: {\n    status: ExtrinsicStatus,\n    events: EventRecord[],\n    dispatchError?: DispatchError\n}) => {\n    if (status.isFinalized) log.info('operation finalized')\n\n    // TODO: extract intention registred for exchange buy/sell\n    events.forEach(({ event: { data, method, section }, phase }) => {\n        console.log('event handler', phase.toString(), `: ${section}.${method}`, data.toString());\n    });\n\n    // TODO: handle status via the action log / notification stack\n    if (status.isInBlock) {\n        console.log('is in block', status.createdAtHash?.toString());\n        if (dispatchError?.isModule) {\n            return log.info('operation unsuccessful',\n                !apiInstance\n                    ? dispatchError\n                    : apiInstance.registry.findMetaError(dispatchError.asModule)\n            );\n        }\n\n        return log.info('operation successful');\n    }\n\n    // if the operation has been broadcast, finish the mutation\n    if (status.isBroadcast) {\n        log.info('transaction has been broadcast', status.hash.toHuman());\n        return resolve();\n    }\n    if (dispatchError) {\n        log.error('There was a dispatch error', dispatchError);\n        return reject('Dispatch error');\n    }\n};\n\nexport const noAccountSelectedError = 'No Account selected';\nexport const polkadotJsNotReadyYetError = 'Polkadot.js is not ready yet';\n\nexport const useVestingMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const claimVestedAmount = useResolverToRef(\n        useCallback(async (\n            _obj,\n            variables: ClaimVestedAmountMutationVariables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            const address = variables?.address\n                ? variables.address\n                : cache.readQuery<GetActiveAccountQueryResponse>({\n                    query: GET_ACTIVE_ACCOUNT\n                })?.account?.id;\n\n            // TODO: error handling?\n            if (!address) throw new Error(noAccountSelectedError);\n            if (loading || !apiInstance) throw new Error(polkadotJsNotReadyYetError);\n\n            // // TODO: why does this not return a tx hash?\n            return await withGracefulErrors(async (resolve, reject) => {\n                const { signer } = await web3FromAddress(address);\n                await apiInstance.tx.vesting.claim()\n                    .signAndSend(\n                        address,\n                        { signer },\n                        vestingClaimHandler(resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ])\n\n        }, [loading, apiInstance]),\n        'claimVestedAmount'\n    )\n\n    return {\n        claimVestedAmount\n    }\n}","import { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, polkadotJsNotReadyYetError, reject, resolve, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\nimport { TransferBalanceMutationVariables } from './useTransferBalanceMutation';\nimport { ExtrinsicStatus } from '@polkadot/types/interfaces/author';\nimport { DispatchError } from '@polkadot/types/interfaces/system';\nimport log from 'loglevel';\nimport { ApiPromise } from '@polkadot/api';\nimport { RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';\n\n// TODO: use validate JSON schema module of some sort\nexport const invalidTransferVariablesError = 'Invalid transfer parameters provided';\n\nexport const transferBalanceHandler = (\n    apiInstance: ApiPromise,\n    resolve: resolve, \n    reject: reject\n) => ({\n    status,\n    dispatchError\n}: {\n    status: ExtrinsicStatus,\n    dispatchError?: DispatchError\n}) => {\n    if (status.isFinalized) log.info('operation finalized')\n\n    // TODO: handle status via the action log / notification stack\n    if (status.isInBlock) {\n        if (dispatchError?.isModule) {\n            return log.error('transfer unsuccessful', \n                apiInstance.registry.findMetaError(dispatchError.asModule)\n            );\n        }\n\n        return log.info('transfer successful');\n    }\n\n    // if the operation has been broadcast, finish the mutation\n    if (status.isBroadcast) {\n        log.info('transaction has been broadcast');\n        return resolve();\n    }\n    if (dispatchError) {\n        log.error('There was a dispatch error', \n            apiInstance.registry.findMetaError(dispatchError.asModule)\n        );\n        return reject();\n    }\n}\n\nexport const transferBalanceExtrinsic = (apiInstance: ApiPromise) => apiInstance.tx.currencies.transfer;\n\nexport const useEstimateTransferBalance = ({ from, to, currencyId, amount }: TransferBalanceMutationVariables) => {\n    const { apiInstance } = usePolkadotJsContext();\n    const [paymentInfo, setPaymentInfo] = useState<RuntimeDispatchInfo | undefined>(undefined);\n\n    const estimatePaymentInfo = useCallback(async () => {\n        if (!apiInstance || !from || !to || !currencyId || !amount) return setPaymentInfo(undefined);\n        \n        const paymentInfo = await transferBalanceExtrinsic(apiInstance)\n                .apply(apiInstance, [to, currencyId, amount])\n                .paymentInfo(from);\n        \n        setPaymentInfo(paymentInfo);\n\n    }, [apiInstance, from, to, currencyId, amount, setPaymentInfo]);\n\n    return { estimatePaymentInfo, paymentInfo };\n}\n\nexport const useBalanceMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const transferBalance = useResolverToRef(\n        useCallback(async (\n            _obj,\n            { from, to, currencyId, amount }: TransferBalanceMutationVariables\n        ) => {\n            if (!from || !to || !currencyId || !amount) throw new Error(invalidTransferVariablesError);\n            if (loading || !apiInstance) throw new Error(polkadotJsNotReadyYetError);\n\n            return withGracefulErrors(async (resolve, reject) => {\n                const { signer } = await web3FromAddress(from);\n                await transferBalanceExtrinsic(apiInstance).apply(apiInstance, [to, currencyId, amount])\n                    .signAndSend(\n                        from,\n                        { signer },\n                        transferBalanceHandler(apiInstance, resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ]);\n        }, [apiInstance, loading])\n    )\n\n    return {\n        transferBalance\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { usePersistentConfig } from './usePersistentConfig';\n\nexport const accountCurrencyMapDataType = 'Option<u32>';\n\nexport const __typename = 'Config';\nexport const id = __typename;\n\nexport const nativeAssetId = '0';\n\nexport const useConfigQueryResolvers = () => {\n    const [persistedConfig] = usePersistentConfig();\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const config = useResolverToRef(\n        useCallback(async (\n            _obj,\n            _variables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            if (!apiInstance || loading) return;\n\n            // TODO: evict config from the cache after active account changes\n            const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                query: GET_ACTIVE_ACCOUNT\n            })?.account?.id;\n\n            let feePaymentAsset =  address\n                ? apiInstance.createType(\n                    accountCurrencyMapDataType,\n                    await apiInstance.query.multiTransactionPayment.accountCurrencyMap(address)\n                )?.toHuman()\n                : null\n\n            feePaymentAsset = feePaymentAsset ? feePaymentAsset : nativeAssetId\n            \n            return {\n                __typename,\n                id,\n                ...persistedConfig,\n                feePaymentAsset\n            };\n        }, [apiInstance, loading])\n    );\n\n    return {\n        config\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\nimport { defaultConfigValue, usePersistentConfig } from './usePersistentConfig';\nimport { SetConfigMutationVariables } from './useSetConfigMutation';\n\nexport const defaultAssetId = '0';\n\nexport const setCurrencyHandler = (resolve: resolve, reject: reject) => {\n    return vestingClaimHandler(resolve, reject);\n}\n\nexport const useConfigMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const [_persistedConfig, setPersistedConfig] = usePersistentConfig();\n\n    const setConfig = useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: SetConfigMutationVariables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            // TODO: error handling?\n            if (!apiInstance || loading) return;\n\n            // TODO: return an optimistic update to the cache with the new config\n            await withGracefulErrors(async (resolve, reject) => {\n                const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                    query: GET_ACTIVE_ACCOUNT\n                })?.account?.id;\n\n                if (!address) return resolve();\n\n                const { signer } = await web3FromAddress(address);\n                \n                await apiInstance.tx.multiTransactionPayment.setCurrency(\n                    args.config?.feePaymentAsset || defaultAssetId\n                )\n                    .signAndSend(\n                        address,\n                        { signer },\n                        setCurrencyHandler(resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ]);\n            \n            const persistableConfig = args.config;\n            // there's no point in persisting the feePaymentAsset since it will\n            // be refetched from the node anyways\n            delete persistableConfig?.feePaymentAsset;\n            \n            setPersistedConfig(() => persistableConfig || defaultConfigValue);\n        }, [apiInstance, loading])\n    );\n\n    return {\n        setConfig\n    }\n}","import { useCallback } from 'react'\nimport { FeePaymentAsset } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\n\nexport const __typename: FeePaymentAsset['__typename'] = 'FeePaymentAsset';\nexport const useFeePaymentAssetsQueryResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const feePaymentAssets = useResolverToRef(\n        useCallback(async () => {\n            if (!apiInstance || loading) return;\n\n            const acceptedCurrencies = await apiInstance.query.multiTransactionPayment.acceptedCurrencies.entries()\n            const feePaymentAssets: FeePaymentAsset[] = acceptedCurrencies.map((acceptedCurrency) => {\n                const assetId = (acceptedCurrency[0].toHuman() as string[])[0];\n                return {\n                    // TODO: is there a safer type way to do this?\n                    // TODO: maybe? combine this with known asset data\n                    __typename,\n                    id: assetId,\n                    assetId: assetId,\n                    fallbackPrice: acceptedCurrency[1].toString()\n                }\n            })\n            \n            return feePaymentAssets;\n        }, [apiInstance, loading])\n    );\n\n    return {\n        feePaymentAssets\n    }\n}","import constate from 'constate';\nimport { useEffect, useState } from 'react'\n\n// TODO: figure out how to extract types from the wasm type definitions\nexport interface HydraDxMathXyk {\n    get_spot_price: (a: string, b: string, c: string) => string | undefined,\n    calculate_in_given_out: (a: string, b: string, c: string) => string | undefined,\n    calculate_out_given_in: (a: string, b: string, c: string) => string | undefined\n}\n\nexport interface HydraDxMathLbp {\n    calculate_linear_weights: (start_x: string, end_x: string, start_y: string, end_y: string, at: string) => string,\n    calculate_in_given_out: (s: string, b: string, s_w: string, b_w: string, a: string) => string,\n    calculate_out_given_in: (s: string, b: string, s_w: string, b_w: string, a: string) => string,\n    get_spot_price: (s: string, b: string, s_w: string, b_w: string, a: string) => string,\n}\n\nexport interface HydraDxMath {\n    xyk: HydraDxMathXyk,\n    lbp: HydraDxMathLbp\n}\n\nexport const loadMath = async (): Promise<HydraDxMath> => {\n    return {\n        xyk: await import('hydra-dx-wasm/build/xyk/bundler'),\n        lbp: await import('hydra-dx-wasm/build/lbp/bundler') as unknown as HydraDxMathLbp\n    }\n}\n\n/**\n * Load the wasm math module\n * @returns \n */\nexport const useMath = () => {\n    const [wasm, setWasm] = useState<{\n        instance: HydraDxMath | undefined,\n        loading: boolean\n    } | undefined>({\n        instance: undefined,\n        loading: true,\n    });\n\n    useEffect(() => {\n        (async () => {\n            setWasm({\n                // TODO: if the module path is a variable, the module can't be found for some reason\n                instance: await loadMath(),\n                loading: false,\n            });\n        })();\n    }, [setWasm])\n\n    // TODO if we need additional math functions outside of wasm,\n    // inject them here\n    return { math: wasm?.instance, loading: wasm?.loading };\n}\n\nexport const [MathProvider, useMathContext] = constate(useMath);","import { useCallback } from 'react';\nimport { XykPool } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport type { StorageKey } from '@polkadot/types';\nimport type { AnyTuple, Codec } from '@polkadot/types/types';\nimport { ApiPromise } from '@polkadot/api';\n\nexport type PoolAssets = string[];\nexport const poolAssetsDataType = '(u32, u32)';\n\nexport const mapToPoolId = ([storageKey, codec]: [StorageKey<AnyTuple>, Codec]): [string, Codec] => {\n    const id = (storageKey.toHuman() as string[])[0];\n    return [id, codec];\n}\n\nexport const mapToPool = (apiInstance: ApiPromise) => ([id, codec]: [string, Codec]) => {\n    const poolAssets = codec.toHuman() as PoolAssets;\n\n    if (!poolAssets) return;\n\n    return {\n        id,\n        assetInId: poolAssets[0],\n        assetOutId: poolAssets[1],\n    } as XykPool\n}\n\nexport const useGetXykPools = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string, assetIds?: string[]) => {\n        if (!apiInstance || loading) return [];\n\n        if (poolId) {\n            return [(await apiInstance.query.xyk.poolAssets(poolId))]\n                .map(pool => [poolId, pool] as [string, Codec])\n                .map(mapToPool(apiInstance))\n        }\n    \n        return (await apiInstance.query.xyk.poolAssets.entries())\n            .map(mapToPoolId)  \n            .map(mapToPool(apiInstance)) || []\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import BigNumber from 'bignumber.js'\n\nexport const hundredWithPrecision6 = new BigNumber('100')\n    .multipliedBy(\n        new BigNumber('10').pow('6')\n    )\n\n/**\n * LBP pools specify weights only for the first asset in the pool,\n * the `opposite` weights need to be calculated by subtracting from `100`\n * @param weight \n * @returns Calculated oppostite weight as `100 - weight`\n */\nexport const calculateOppositeAssetWeight = (weight: string): string => {\n    return new BigNumber(hundredWithPrecision6)\n        .minus(\n            new BigNumber(weight)\n        )\n        .toFixed(0)\n}\n","import { LbpAssetWeights, LbpPool, Pool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\n\n/**\n * Used to determine the current asset weight, given the initial/final weights \n * and the interval it should be interpolated on.\n * \n * @param math \n * @param pool \n * @param weights \n * @param relaychainBlockNumber \n * @returns Current asset weight, calculated lineary from the inputs above\n */\nexport const calculateCurrentAssetWeight = (\n    math: HydraDxMath,\n    pool: Pick<LbpPool, 'startBlock' | 'endBlock'>,\n    weights: Pick<LbpAssetWeights, 'initial' | 'final'>,\n    relaychainBlockNumber: string\n): string => {\n    return math.lbp.calculate_linear_weights(\n        pool.startBlock,\n        pool.endBlock,\n        weights.initial,\n        weights.final,\n        relaychainBlockNumber\n    );\n}","import { ApolloClient, NormalizedCache } from '@apollo/client';\nimport { GetLastBlockQueryResponse, GET_LAST_BLOCK } from './useLastBlockQuery';\n\nexport const readLastBlock = (client: ApolloClient<object>) => {\n    return client.cache.readQuery<GetLastBlockQueryResponse>({\n        query: GET_LAST_BLOCK\n    });\n}","import { AccountId, AssetId } from '@open-web3/orml-types/interfaces';\nimport { ApiPromise } from '@polkadot/api';\nimport { useCallback } from 'react';\nimport { Fee, LbpAssetWeights, LbpPool } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport type { Codec } from '@polkadot/types/types';\nimport { mapToPoolId } from './useGetXykPools';\nimport { calculateOppositeAssetWeight } from './lbp/calculateOppositeAssetWeight';\nimport { HydraDxMath, useMath, useMathContext } from '../math/useMath';\nimport { calculateCurrentAssetWeight } from './lbp/calculateCurrentAssetWeight';\nimport { partial } from 'lodash';\nimport { ApolloClient, useApolloClient } from '@apollo/client';\nimport { readLastBlock } from '../lastBlock/readLastBlock';\nimport { getLockedBalanceByAddressAndLockId } from '../vesting/useGetVestingScheduleByAddress';\nimport log from 'loglevel';\nimport BigNumber from 'bignumber.js';\n\nexport type AssetPair = number[];\nexport interface PoolData {\n    assets: AssetPair,\n    feeCollector: string,\n    fee: {\n        numerator: number,\n        denominator: number\n    },\n    repayTarget: number,\n    initialWeight: number,\n    finalWeight: number,\n    start: number,\n    end: number,\n}\n\n// ID isnt parsed when converting the codec into a JSON\nexport const lbpRepayFeeLockId = '0x6c6270636c6c6374' // 'lbpcllct';\nexport const balanceDataType = 'BalanceOf';\n\n// fee applied in a case when the repayTarget has not been reached\nconst repayFee: Fee = {\n    numerator: '2',\n    denominator: '10',\n}\n\n/**\n * @param math \n * @param client \n * @returns Function to format the given codec into an LBPPool\n */\nexport const mapToPool = (\n    math: HydraDxMath,\n    client: ApolloClient<object>,\n    apiInstance: ApiPromise\n) => \n    /**\n     * @param [id, codec]\n     * @returns LBPPool parsed from the coded provided as an argument\n     */\n    async ([id, codec]: [string, Codec]) => {\n        // TODO this is possibly VERY unsafe and needs to be revisited for type parsing / creation\n        const poolData = codec.toJSON() as unknown as PoolData;\n        const lastBlockData = readLastBlock(client);\n        const relaychainBlockNumber = lastBlockData?.lastBlock?.relaychainBlockNumber;\n        \n        if (!poolData || !relaychainBlockNumber) return;\n\n        const feeCollector = poolData.feeCollector.toString();\n        const repayTarget = apiInstance.createType(\n            balanceDataType,\n            poolData.repayTarget.toString()\n        ).toString()\n\n        // construct the pool entity without weights\n        const partialPool: Omit<LbpPool, 'assetBWeights' | 'assetAWeights' | 'repayTargetReached' | 'fee'> = {\n            id,\n            assetInId: poolData.assets[0].toString(),\n            assetOutId: poolData.assets[1].toString(),\n            startBlock: poolData.start.toString(),\n            endBlock: poolData.end.toString()\n        }\n\n        // determine weights for asset A\n        const partialAssetAWeights: Omit<LbpAssetWeights, 'current'> = {\n            initial: poolData.initialWeight.toString(),\n            final: poolData.finalWeight.toString(),\n        }\n\n        const assetAWeights: LbpAssetWeights = {\n            ...partialAssetAWeights,\n            current: calculateCurrentAssetWeight(\n                math,\n                partialPool,\n                partialAssetAWeights,\n                relaychainBlockNumber\n            )\n        }\n\n         // determine weights for asset B\n         const assetBWeights: LbpAssetWeights = {\n            initial: calculateOppositeAssetWeight(assetAWeights.initial),\n            final: calculateOppositeAssetWeight(assetAWeights.final),\n            current: calculateOppositeAssetWeight(assetAWeights.current)\n        }\n\n        // TODO: this function only works by finding the first lock with the given ID\n        // TODO: this data fetching should be moved to a resolver, and this mapper\n        // should be a plain function\n        const feeCollectorBalanceLockAmount = (await getLockedBalanceByAddressAndLockId(\n            apiInstance,\n            feeCollector, \n            lbpRepayFeeLockId\n        ))?.amount?.toString();\n        \n        const repayTargetReached = repayTarget && feeCollectorBalanceLockAmount\n            // if collected fees are greater than the repay target, the repay target has been reached\n            // this means that we won't apply the repay fee down the line\n            ? new BigNumber(feeCollectorBalanceLockAmount).gt(new BigNumber(repayTarget))\n            : false\n\n        const poolFee: Fee = {\n            numerator: poolData.fee.numerator.toString(),\n            denominator: poolData.fee.denominator.toString(),\n        }\n\n        const pool: LbpPool = {\n            ...partialPool,\n            assetAWeights,\n            assetBWeights,\n            repayTargetReached,\n            // if we've haven't reached the repay target, the pool will carry a larger fee\n            fee: repayTargetReached ? poolFee : repayFee\n        };\n\n        return pool;\n    }\n\nexport const getLbpPools = async (\n    apiInstance: ApiPromise,\n    math: HydraDxMath,\n    client: ApolloClient<object>\n) => {\n    return await Promise.all(\n        (await apiInstance.query.lbp.poolData.entries())\n            .map(mapToPoolId) \n            .map(mapToPool(math, client, apiInstance))\n    ) || [];\n}\n\n/**\n * Hook to fetch and map LBPPool data\n * @returns Function that returns the on-chain LBPPool(s)\n */\nexport const useGetLbpPools = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const { math } = useMathContext()\n\n    return useCallback(async (client: ApolloClient<object>) => {\n        // return an empty array by default\n        if (!apiInstance || loading || !math) return [];\n        return getLbpPools(apiInstance, math, client);\n    }, [apiInstance, loading, math])\n}","import { ApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport log from 'loglevel';\nimport { useCallback } from 'react';\nimport { HydraDxMath, useMathContext } from '../math/useMath';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { mapToPool } from './useGetLbpPools';\n\nexport const getLbpPool = async (\n    math: HydraDxMath,\n    client: ApolloClient<object>,\n    apiInstance: ApiPromise,\n    poolId: string,\n) => {\n    return await mapToPool(math, client, apiInstance)([\n        poolId,\n        await apiInstance.query.lbp.poolData(poolId)\n    ])\n}\n\nexport const useGetLbpPool = () => {\n    const { apiInstance } = usePolkadotJsContext();\n    const { math } = useMathContext();\n\n    return useCallback(async (\n        client: ApolloClient<object>, \n        poolId?: string\n    ) => {\n        log.debug('useGetLbpPool', apiInstance, poolId, math)\n        if (!apiInstance || !poolId || !math) return;\n        return getLbpPool(math, client, apiInstance, poolId);\n    }, [apiInstance, math])\n}","import { ApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { Codec } from '@polkadot/types/types';\nimport { isArray, isObject } from 'lodash';\nimport log from 'loglevel';\nimport { useCallback } from 'react';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { LbpPool, XykPool } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers';\nimport { __typename } from '../../accounts/resolvers/useGetAccountsQueryResolver';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { useGetLbpPool } from '../useGetLbpPool';\nimport { useGetLbpPools } from '../useGetLbpPools';\nimport { useGetXykPool } from '../useGetXykPool';\nimport { useGetXykPools } from '../useGetXykPools';\n\nexport interface PoolQueryResolverArgs {\n    poolId?: string,\n    assetIds?: string[],\n    poolType?: PoolType\n}\n// Filter those out, until the following issue is implemented\n// https://github.com/galacticcouncil/Basilisk-node/issues/248\nexport const defaultLbpPoolId = 'bXnAY36Vvd3HdWTX5v1Cgej2tYFsq1UpzShWyAQAr5HQ9FaJx';\nexport const defaultXykPoolId = 'bXnAY36Vvd3HdWTX5v1Cgej2tYFsq1UpzShWyAQAr5HQ9FaJx';\n\nexport interface PoolIds {\n    lbpPoolId?: string,\n    xykPoolId?: string\n}\n\nexport const getPoolIdsByAssetIds = async (apiInstance: ApiPromise, assetIds: string[]) => {\n    let lbpPoolId: string | undefined = (await (apiInstance.rpc as any).lbp.getPoolAccount(\n        assetIds[0], assetIds[1]\n    )).toHuman();\n    \n    let xykPoolId: string | undefined = (await (apiInstance.rpc as any).xyk.getPoolAccount(\n        assetIds[0], assetIds[1]\n    )).toHuman();\n\n    return {\n        lbpPoolId,\n        xykPoolId\n    }\n}\n\nexport const useGetPoolsQueryResolver = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const getLbpPools = useGetLbpPools();\n    const getXykPools = useGetXykPools();\n    const getXykPool = useGetXykPool();\n    const getLbpPool = useGetLbpPool();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args?: PoolQueryResolverArgs,\n            context?: { client: ApolloClient<object> }\n        ) => {\n            if (!apiInstance || loading || !context?.client) return;\n            log.debug('useGetPoolsQueryResolver', 'fetching pools', args);\n\n            // use the provided poolId\n            let poolId = args?.poolId;\n            let poolIds: PoolIds = {\n                lbpPoolId: poolId,\n                xykPoolId: poolId\n            };\n\n            // if we're querying by assetIds, find the poolIds via RPC\n            if (args?.assetIds) {\n                poolIds = await getPoolIdsByAssetIds(apiInstance, args.assetIds);\n                log.debug('useGetPoolsQueryResolver', 'found poolIDs', poolIds, apiInstance);\n            }\n\n            // if the poolId is specified, try resolving with a single pool\n            if (poolIds.xykPoolId || poolIds.lbpPoolId) {\n                let lbpPool = await getLbpPool(context.client, poolIds.lbpPoolId);\n                let xykPool = await getXykPool(poolIds.xykPoolId);\n        \n                log.debug('useGetPoolsQueryResolver', 'found pools by poolIDs', lbpPool, xykPool);\n\n                // if the assets are matching, its a default value which means the pool was not found\n                if (xykPool?.assetInId === xykPool?.assetOutId) xykPool = undefined;\n                if (lbpPool?.assetInId === lbpPool?.assetOutId) lbpPool = undefined;\n\n                log.debug('useGetPoolsQueryResolver', 'eliminated default value pools', lbpPool, xykPool);\n\n                // TODO: which pool should have priority if both types exist for the same assets?\n                const pool = xykPool || lbpPool;\n                \n                log.debug('useGetPoolsQueryResolver', 'returning a single pool', pool);\n\n                return pool && ({\n                    ...pool,\n                    __typename: xykPool \n                        ? 'XYKPool' as XykPool['__typename']\n                        : lbpPool\n                            ? 'LBPPool' as LbpPool['__typename']\n                            : undefined\n                })\n            }\n\n            // if no extra args were provided, get all the pools\n            const [lbpPools, xykPools] = await Promise.all([\n                getLbpPools(context.client),\n                getXykPools()\n            ]);\n            \n            log.debug('useGetPoolsQueryResolver', 'returning multiple pools', [lbpPools, xykPools]);\n\n            return ([] as (LbpPool | XykPool)[])\n                .concat(\n                    lbpPools\n                        ?.map(pool => ({\n                            ...pool,\n                            __typename: 'LBPPool'\n                        }) as LbpPool)\n                )\n                .concat(\n                    xykPools\n                        ?.map(pool => ({\n                            ...pool,\n                            __typename: 'XYKPool'\n                        }) as XykPool)\n                )\n\n        }, [getLbpPools]),\n        'pools'\n    )\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { mapToPool } from './useGetXykPools';\n\nexport const useGetXykPool = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string) => {\n        if (!apiInstance || loading || !poolId) return;\n\n        return mapToPool(apiInstance)([\n            poolId,\n            await apiInstance.query.xyk.poolAssets(poolId)\n        ]);\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import { useCallback } from 'react';\nimport { Asset } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { useGetAssets } from '../useGetAssets';\n\nexport const __typename: Asset['__typename'] = 'Asset';\n\nexport const useGetAssetsQueryResolver = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const getAssets = useGetAssets();\n\n    return useResolverToRef(\n        useCallback(async () => {\n            return (await getAssets())\n                ?.map(asset => ({\n                    ...asset,\n                    __typename\n                }))\n        }, [\n            apiInstance,\n            loading\n        ])\n    )\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport type { Codec } from '@polkadot/types/types';\nimport { ApiPromise } from '@polkadot/api';\nimport { Asset } from '../../generated/graphql';\n\nexport const assetDataType = 'Option<u32>';\n\n// TODO: parse the symbol from the storage key, or use a static client-side symbol map\nexport const mapToAsset = (apiInstance: ApiPromise) => ([_storageKey, codec]: [unknown, Codec]) => {\n    return {\n        id: (apiInstance.createType(\n                assetDataType,\n                codec\n            ).toHuman() as string)\n    } as Asset;\n        \n}\n\nexport const useGetAssets = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async () => {\n        if (!apiInstance || loading) return;\n\n        // TODO: do we wanna order these by id?\n        return (await apiInstance?.query.assetRegistry.assetIds.entries())\n            .map(mapToAsset(apiInstance)) || [];\n    }, [\n        apiInstance,\n        loading\n    ]);\n}","export enum ChartGranularity {\n    // ALL = 'ALL',\n    D30 = 'D30',\n    D7 = 'D7',\n    H24 = 'H24',\n    H1 = 'H1'\n}\n\nexport enum ChartType {\n    PRICE = 'PRICE',\n    VOLUME = 'VOLUME',\n    WEIGHTS = 'WEIGHTS'\n}\n\n\nexport interface Asset {\n    symbol: string | undefined,\n    fullName: string | undefined\n    icon?: string | undefined\n}\n\nexport interface AssetPair {\n    assetA: Asset,\n    assetB: Asset | undefined\n}\n\nexport enum PoolType {\n    LBP = 'LBP',\n    XYK = 'XYK'\n}\n\n// Display data is not in the {x,y} format, since it solely represents\n// an amount in a given asset\nexport interface DisplayData {\n    balance: number | undefined,\n    usdBalance: number | undefined,\n    asset: Asset\n}","import { gql } from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Account = {\n  __typename?: 'Account';\n  balances: Array<Balance>;\n  id: Scalars['String'];\n  name?: Maybe<Scalars['String']>;\n  vestingSchedule: VestingSchedule;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  id: Scalars['String'];\n};\n\nexport type Balance = {\n  __typename?: 'Balance';\n  assetId: Scalars['String'];\n  balance: Scalars['String'];\n};\n\nexport type Config = {\n  __typename?: 'Config';\n  appName: Scalars['String'];\n  feePaymentAsset?: Maybe<Scalars['String']>;\n  nodeUrl: Scalars['String'];\n  processorUrl: Scalars['String'];\n};\n\nexport type Extension = {\n  __typename?: 'Extension';\n  id: Scalars['String'];\n  isAvailable: Scalars['Boolean'];\n};\n\nexport type Fee = {\n  __typename?: 'Fee';\n  denominator: Scalars['String'];\n  numerator: Scalars['String'];\n};\n\nexport type FeePaymentAsset = {\n  __typename?: 'FeePaymentAsset';\n  assetId?: Maybe<Scalars['String']>;\n  fallbackPrice?: Maybe<Scalars['String']>;\n};\n\nexport type LbpAssetWeights = {\n  __typename?: 'LBPAssetWeights';\n  current: Scalars['String'];\n  final: Scalars['String'];\n  initial: Scalars['String'];\n};\n\nexport type LbpPool = {\n  __typename?: 'LBPPool';\n  assetAWeights: LbpAssetWeights;\n  assetBWeights: LbpAssetWeights;\n  assetInId: Scalars['String'];\n  assetOutId: Scalars['String'];\n  balances?: Maybe<Array<Balance>>;\n  endBlock: Scalars['String'];\n  fee: Fee;\n  id: Scalars['String'];\n  repayTargetReached: Scalars['Boolean'];\n  startBlock: Scalars['String'];\n};\n\nexport type LastBlock = {\n  __typename?: 'LastBlock';\n  id: Scalars['String'];\n  parachainBlockNumber?: Maybe<Scalars['String']>;\n  relaychainBlockNumber?: Maybe<Scalars['String']>;\n};\n\nexport type Pool = LbpPool | XykPool;\n\nexport type Query = {\n  __typename?: 'Query';\n  _empty?: Maybe<Scalars['String']>;\n  _tradeType?: Maybe<TradeType>;\n  account?: Maybe<Account>;\n  accounts: Array<Account>;\n  assets?: Maybe<Array<Asset>>;\n  config: Config;\n  extension: Extension;\n  feePaymentAssets?: Maybe<Array<FeePaymentAsset>>;\n  lastBlock?: Maybe<LastBlock>;\n  pools?: Maybe<Array<Pool>>;\n};\n\nexport enum TradeType {\n  Buy = 'Buy',\n  Sell = 'Sell',\n}\n\nexport type VestingSchedule = {\n  __typename?: 'VestingSchedule';\n  perPeriod?: Maybe<Scalars['String']>;\n  period?: Maybe<Scalars['String']>;\n  periodCount?: Maybe<Scalars['String']>;\n  remainingVestingAmount?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['String']>;\n};\n\nexport type XykPool = {\n  __typename?: 'XYKPool';\n  assetInId: Scalars['String'];\n  assetOutId: Scalars['String'];\n  balances?: Maybe<Array<Balance>>;\n  id: Scalars['String'];\n};\n","import { ApolloCache } from '@apollo/client';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from './queries/useGetActiveAccountQuery';\n\nexport const readActiveAccount = (\n    cache: ApolloCache<object>\n) => {\n    return cache.readQuery<GetActiveAccountQueryResponse>({\n        query: GET_ACTIVE_ACCOUNT,\n        /**\n         * TODO: if the active account query does not return all the queried data,\n         * such as vesting schedules (fields should be nullable, but they are simply not returned.\n         * Then the cache is incomplete and would return null/undefined, thats why we need to\n         * accept only partial data below.\n         */\n        returnPartialData: true,\n    })?.account\n}","import { ApolloCache } from '@apollo/client'\nimport { ApiPromise } from '@polkadot/api'\nimport { web3FromAddress } from '@polkadot/extension-dapp'\nimport { useCallback } from 'react'\nimport { readActiveAccount } from '../../accounts/readActiveAccount'\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../../vesting/useVestingMutationResolvers'\n\nexport const buyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const buy = async (\n    cache: ApolloCache<object>,\n    apiInstance: ApiPromise,\n    assetBuy: string,\n    assetSell: string,\n    amountBuy: string,\n    maxSold: string,\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        if (!address) return reject(new Error('No active account found'));\n\n        const { signer } = await web3FromAddress(address);\n        \n        await apiInstance.tx.lbp.buy(\n            assetBuy,\n            assetSell,\n            amountBuy,\n            maxSold\n        )\n            .signAndSend(\n                address,\n                { signer },\n                buyHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ])\n}","import { ApolloCache } from '@apollo/client'\nimport { ApiPromise } from '@polkadot/api'\nimport { web3FromAddress } from '@polkadot/extension-dapp'\nimport { readActiveAccount } from '../../accounts/readActiveAccount'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../../vesting/useVestingMutationResolvers'\n\nexport const sellHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const sell = async (\n    cache: ApolloCache<object>,\n    apiInstance: ApiPromise,\n    assetSell: string,\n    assetBuy: string,\n    amountSell: string,\n    minBought: string,\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        if (!address) return reject(new Error('No active account found'));\n\n        const { signer } = await web3FromAddress(address);\n        \n        await apiInstance.tx.lbp.sell(\n            assetSell,\n            assetBuy,\n            amountSell,\n            minBought\n        )\n            .signAndSend(\n                address,\n                { signer },\n                sellHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ])\n}","import { ApolloCache, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../../accounts/queries/useGetActiveAccountQuery';\nimport { readActiveAccount } from '../../accounts/readActiveAccount';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { withGracefulErrors, gracefulExtensionCancelationErrorHandler, vestingClaimHandler, resolve, reject } from '../../vesting/useVestingMutationResolvers';\n\nexport const xykBuyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const discount = false;\n\nexport const buy = async (\n    cache: ApolloCache<NormalizedCacheObject>,\n    apiInstance: ApiPromise,\n    assetBuy: string, // 1\n    assetSell: string, // 49.7 + 0.2% = 49.9\n    amountBuy: string, // 99\n    maxSold: string, // 49.5 + 0.5%\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        // TODO: extract this error\n        if (!address) return reject(new Error('No active account found!'));\n\n        const { signer } = await web3FromAddress(address);\n\n        await apiInstance.tx.xyk.buy(\n            assetBuy,\n            assetSell,\n            amountBuy,\n            maxSold,\n            discount\n        )\n            .signAndSend(\n                address,\n                { signer },\n                xykBuyHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ])\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../../accounts/queries/useGetActiveAccountQuery';\nimport { readActiveAccount } from '../../accounts/readActiveAccount';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../../vesting/useVestingMutationResolvers';\n\nexport const xykBuyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const discount = false;\n\nexport const sell = async (\n    cache: ApolloCache<NormalizedCacheObject>,\n    apiInstance: ApiPromise,\n    assetSell: string,\n    assetBuy: string,\n    amountSell: string,\n    minBought: string,\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        if (!address) return reject(new Error('No active account found!'));\n\n        const { signer } = await web3FromAddress(address);\n\n        await apiInstance.tx.xyk.sell(\n            assetSell,\n            assetBuy,\n            amountSell,\n            minBought,\n            discount\n        )\n            .signAndSend(\n                address,\n                { signer },\n                xykBuyHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ]);\n}","import { useSubmitTradeMutationResolver } from './useSubmitTradeMutationResolvers'\n\nexport const usePoolsMutationResolvers = () => {\n    const submitTrade = useSubmitTradeMutationResolver();\n    \n    return {\n        submitTrade\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport BigNumber from 'bignumber.js';\nimport { gql } from 'graphql.macro';\nimport { useCallback } from 'react'\nimport { PoolType } from '../../../components/Chart/shared';\nimport { Maybe, TradeType } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { SubmitTradeMutationVariables } from '../mutations/useSubmitTradeMutation';\nimport { buy as buyLbp } from '../lbp/buy';\nimport { sell as sellLbp } from '../lbp/sell';\nimport { buy as buyXyk } from '../xyk/buy'\nimport { sell as sellXyk } from '../xyk/sell';\n\n// this is for buy, for sell we need to use minus, not plus\nexport const applyAllowedSlippage = (\n    amount: string, \n    allowedSlippage: string,\n    tradeType: TradeType\n) => {\n    let slippageAmount = new BigNumber(amount)\n        .multipliedBy(\n            new BigNumber(allowedSlippage)\n                .dividedBy(100)\n        )\n\n    const amountBN = new BigNumber(amount);\n    \n    const amountWithSlippage = tradeType === TradeType.Buy\n            // if you're buying an exact amount,\n            // you must be willing to pay more\n            ? amountBN.plus(slippageAmount)\n            // if you're selling an exact amount,\n            // you should be willing to receive less\n            : amountBN.minus(slippageAmount)\n    \n    return amountWithSlippage.toFixed(0);\n}\n\nexport const applyTradeFee = (\n    amount: string,\n    // TODO: get this from constants\n    tradeFee: string = '0.002', // 0.2% default\n    tradeType: TradeType\n) => {\n    let fee = new BigNumber(amount)\n        .multipliedBy(\n            new BigNumber(tradeFee)\n        )\n\n    const amountBN = new BigNumber(amount);\n    \n    const amountWithFee = tradeType === TradeType.Buy\n            ? amountBN.plus(fee)\n            : amountBN.minus(fee);\n            \n    return amountWithFee.toFixed(0);\n}\n\nexport const useSubmitTradeMutationResolver = () => {\n    const { apiInstance } = usePolkadotJsContext();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: Maybe<SubmitTradeMutationVariables>,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            if (!args || !apiInstance) return\n            if (args?.poolType === PoolType.XYK && args?.tradeType === TradeType.Buy) {\n                return await buyXyk(\n                    cache,\n                    apiInstance,\n                    args.assetOutId,\n                    args.assetInId,\n                    args.assetOutAmount,\n                    args.amountWithSlippage,\n                );\n            }\n\n            if (args?.poolType === PoolType.XYK && args?.tradeType === TradeType.Sell) {\n                return await sellXyk(\n                    cache,\n                    apiInstance,\n                    args.assetInId,\n                    args.assetOutId,\n                    args.assetInAmount,\n                    args.amountWithSlippage,\n                );\n            }\n\n            if (args?.poolType === PoolType.LBP && args?.tradeType === TradeType.Buy) {\n                return await buyLbp(\n                    cache,\n                    apiInstance,\n                    args.assetOutId,\n                    args.assetInId,\n                    args.assetOutAmount,\n                    args.amountWithSlippage\n                )\n            }\n\n            if (args?.poolType === PoolType.LBP && args?.tradeType === TradeType.Sell) {\n                return await sellLbp(\n                    cache,\n                    apiInstance,\n                    args.assetOutId,\n                    args.assetInId,\n                    args.assetOutAmount,\n                    args.amountWithSlippage\n                )\n            }\n\n            throw new Error('We dont support this trade type yet');\n        }, [buyXyk, sellXyk, apiInstance])\n    )\n}","import { useCallback } from 'react';\nimport { Extension } from '../../../../generated/graphql';\nimport { useResolverToRef } from '../../../accounts/resolvers/useAccountsMutationResolvers';\nimport { getExtension } from '../../lib/getExtension';\n\n// make sure the __typename is well typed\nexport const __typename: Extension['__typename'] = 'Extension';\n// helper function to decorate the extension entity for normalised caching\nconst withTypename = (extension: Extension) => ({\n  __typename,\n  ...extension,\n});\n\n/**\n * Resolver for the `Extension` entity which uses the standalone lib/getExtension\n * function to resolve the requested data.\n *\n * There are no arguments in this resolver, it only returns the normalized `Extension` entity.\n */\nexport const extensionQueryResolver = () => withTypename(getExtension());\n\n/**\n * For standardization purposes, we expose the resolver as a hook.\n * Since many more complex resolvers require contextual dependency injection,\n * and thus need to apply the useContext hook.\n */\nexport const useExtensionQueryResolver = () => ({\n  // key is the entity, value is the resolver\n  extension: useResolverToRef(\n    // practically we dont have to wrap this in useCallback\n    // since it does not have any contextual dependencies\n    useCallback(extensionQueryResolver, [extensionQueryResolver])\n  ),\n});\n","import { Extension } from '../../../generated/graphql';\n\n// id for cache normalization purposes, serves no other purpose\nconst id = '0';\n\n// TODO: handle multiple extensions e.g. Talisman and polkadot.js\n// function that checks if an extension is available or not\nexport const getExtension = (): Extension => {\n  // import the constant here to enable mocking in tests\n  const { isWeb3Injected } = require('@polkadot/extension-dapp');\n\n  return {\n    id,\n    // we don't call web3Enable here\n    // to avoid triggering the polkadot.js permission popup right away\n    isAvailable: isWeb3Injected,\n  };\n};\n","import { useMemo } from 'react';\nimport { ApolloClient, InMemoryCache, Resolvers } from '@apollo/client';\nimport { useAccountsQueryResolvers } from '../accounts/resolvers/useAccountsQueryResolvers';\nimport { loader } from 'graphql.macro';\nimport { useAccountsMutationResolvers } from '../accounts/resolvers/useAccountsMutationResolvers';\nimport { useRefetchWithNewBlock } from '../lastBlock/useRefetchWithNewBlock';\nimport { usePersistentConfig } from '../config/usePersistentConfig';\nimport { useVestingMutationResolvers } from '../vesting/useVestingMutationResolvers';\n\nimport { useBalanceMutationResolvers } from '../balances/useBalanceMutationResolvers';\nimport { useConfigQueryResolvers } from '../config/useConfigQueryResolvers';\nimport { useConfigMutationResolvers } from '../config/useConfigMutationResolver';\nimport { useFeePaymentAssetsQueryResolvers } from '../feePaymentAssets/useFeePaymentAssetsQueryResolvers';\nimport { usePoolsQueryResolver } from '../pools/resolvers/usePoolsQueryResolver';\nimport { useBalanceQueryResolvers } from '../balances/useBalanceQueryResolvers';\nimport { useAssetsQueryResolvers } from '../assets/resolvers/useAssetsQueryResolvers';\nimport { usePoolsMutationResolvers } from '../pools/resolvers/usePoolsMutationResolvers';\nimport { useExtensionResolvers } from '../extension/resolvers/useExtensionResolvers';\n\n/**\n * Add all local gql resolvers here\n * @returns Resolvers\n */\nexport const useResolvers: () => Resolvers = () => {\n  const { Query: AccountsQueryResolver, Account } = useAccountsQueryResolvers();\n  const {\n    Query: PoolsQueryResolver,\n    XYKPool,\n    LBPPool,\n  } = usePoolsQueryResolver();\n  const { Query: ExtensionQueryResolver } = useExtensionResolvers();\n  return {\n    Query: {\n      ...AccountsQueryResolver,\n      ...ExtensionQueryResolver,\n      ...useConfigQueryResolvers(),\n      ...useFeePaymentAssetsQueryResolvers(),\n      ...useBalanceQueryResolvers(),\n      ...PoolsQueryResolver,\n      ...useAssetsQueryResolvers(),\n    },\n    Mutation: {\n      ...useAccountsMutationResolvers(),\n      ...useVestingMutationResolvers(),\n      ...useBalanceMutationResolvers(),\n      ...useConfigMutationResolvers(),\n      ...usePoolsMutationResolvers(),\n    },\n    Account,\n    XYKPool,\n    LBPPool,\n  };\n};\n\nexport const typeDefs = loader('./../../schema.graphql');\n\n/**\n * Recreates the apollo client instance each time the config changes\n * @returns\n */\nexport const useConfigureApolloClient = () => {\n  const resolvers = useResolvers();\n  const cache = useMemo(() => new InMemoryCache(), []);\n  // can't get the config from a query before we setup apollo\n  // therefore we get it from the local storage instead\n  const [{ processorUrl }] = usePersistentConfig();\n\n  const client = useMemo(() => {\n    return new ApolloClient({\n      uri: processorUrl,\n      cache,\n      // TODO: don't connect in production\n      connectToDevTools: true,\n      queryDeduplication: true,\n      resolvers,\n      typeDefs,\n    });\n  }, [processorUrl, cache, resolvers]);\n\n  useRefetchWithNewBlock(client);\n\n  return client;\n};\n\nexport const useApollo = () => useConfigureApolloClient();\n","import { useBalanceQueryResolvers } from '../../balances/useBalanceQueryResolvers';\nimport { useVestingScheduleQueryResolvers } from '../../vesting/useVestingScheduleQueryResolvers';\nimport { useGetAccountsQueryResolver } from './useGetAccountsQueryResolver';\n\n/**\n * Used to resolve queries for the `Account` (or `accounts`) entity.\n */\nexport const useAccountsQueryResolvers = () => {\n  const getAccountsQueryResolver = useGetAccountsQueryResolver();\n\n  return {\n    Query: {\n      accounts: getAccountsQueryResolver,\n    },\n    Accounts: {\n      ...useBalanceQueryResolvers(),\n    },\n    /**\n     * Additional sub-resolvers for the `Account` entity,\n     * resolving e.g. the `balances` or `vestingSchedules` fields.\n     */\n    Account: {\n      ...useBalanceQueryResolvers(),\n      ...useVestingScheduleQueryResolvers(),\n    },\n  };\n};\n","import { useBalanceQueryResolvers } from '../../balances/useBalanceQueryResolvers'\nimport { useGetPoolsQueryResolver } from './useGetPoolsQueryResolver'\n\nexport const usePoolsQueryResolver = () => {\n    const getPoolsQueryResolver = useGetPoolsQueryResolver()\n    const poolFieldsQueryResolvers = {\n        ...useBalanceQueryResolvers()\n    }\n\n    return {\n        Query: {\n            pools: getPoolsQueryResolver,\n        },\n        XYKPool: poolFieldsQueryResolvers,\n        LBPPool: poolFieldsQueryResolvers\n    }\n}","import { useExtensionQueryResolver } from './query/extension';\n\nexport const useExtensionResolvers = () => {\n  return {\n    Query: {\n      ...useExtensionQueryResolver(),\n    },\n  };\n};\n","import { useGetAssetsQueryResolver } from './useGetAssetsQueryResolver'\n\nexport const useAssetsQueryResolvers = () => {\n    const getAssetsQueryResolver = useGetAssetsQueryResolver();\n\n    return {\n        assets: getAssetsQueryResolver\n        // TODO: add stuff like a total circulating supply or other data we might need\n        // Asset:\n    }\n}","import { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport { useConfigureApolloClient } from '../hooks/apollo/useApollo';\nimport { LastBlockProvider } from '../hooks/lastBlock/useSubscribeNewBlockNumber';\nimport { PolkadotJsProvider } from '../hooks/polkadotJs/usePolkadotJs';\nimport { MathProvider } from '../hooks/math/useMath';\n\nexport const ConfiguredApolloProvider = ({\n  children,\n}: {\n  children: React.ReactNode;\n}) => {\n  const client = useConfigureApolloClient();\n  return <ApolloProvider client={client}>{children}</ApolloProvider>;\n};\n\nexport const QueryProvider = ({ children }: { children: React.ReactNode }) => (\n  <>{children}</>\n);\n\n// TODO: use react-multi-provider instead of ugly nesting\nexport const MultiProvider = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <PolkadotJsProvider>\n      <MathProvider>\n        <LastBlockProvider>\n          <ConfiguredApolloProvider>\n            <QueryProvider>{children}</QueryProvider>\n          </ConfiguredApolloProvider>\n        </LastBlockProvider>\n      </MathProvider>\n    </PolkadotJsProvider>\n  );\n};\n","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { Pool } from '../../../generated/graphql';\nimport { GetPoolsQueryResponse } from './useGetPoolsQuery';\n\nexport const GET_POOL_BY_ASSETS = loader('./../graphql/GetPoolByAssets.query.graphql');\n\nexport interface GetPoolByAssetsQueryVariables {\n    assetInId?: string,\n    assetOutId?: string,\n}\nexport interface GetPoolQueryResponse {\n    pool: Pool\n}\n\nexport const useGetPoolByAssetsQuery = (variables: GetPoolByAssetsQueryVariables) => useQuery<GetPoolQueryResponse>(\n    GET_POOL_BY_ASSETS, \n    { \n        variables,\n        notifyOnNetworkStatusChange: true,\n    }\n);","import { useMemo } from 'react'\nimport { UseFormReturn } from 'react-hook-form'\n\nexport interface TokenInputProps {\n    assetIdInputProps: object,\n    assetAmountInputProps: object,\n    disabled?: boolean\n}\n\nexport const TokenInput = ({\n    assetIdInputProps,\n    assetAmountInputProps,\n    disabled\n}: TokenInputProps) => {\n    return <div>\n        <div>\n            <b>AssetId:</b> <br/>\n            <input\n                disabled={disabled}\n                type='text' \n                {...assetIdInputProps} \n            />\n        </div>\n        <div>\n            <b>Asset amount:</b> <br/>\n            <input\n                disabled={disabled}\n                type='text' \n                {...assetAmountInputProps}\n            />\n        </div>\n    </div>\n}","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\n\nexport const PRECISION_12 = 12;\nexport const PRECISION_18 = 18;\nexport const precision12 = new BigNumber(10).pow(PRECISION_12);\nexport const precision18 = new BigNumber(10).pow(PRECISION_18);\n\nexport const fromPrecision12 = (amount?: string | BigNumber) => (\n    amount && new BigNumber(amount)\n        .dividedBy(precision12).toFixed(PRECISION_12)\n)\nexport const useFromPrecision12 = (amount?: string | BigNumber) => (\n    useMemo(() => fromPrecision12(amount), [amount])\n)\n\nexport const useFromPrecision18 = (amount?: string | BigNumber) => (\n    useMemo(() => (\n        amount && new BigNumber(amount)\n            .dividedBy(precision18).toFixed(PRECISION_18)\n    ), [amount])\n)","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\nimport { PRECISION_12 } from './useFromPrecision';\n\nexport const PRECISION_0 = 0;\nexport const precision12 = new BigNumber(10).pow(12);\nexport const precision18 = new BigNumber(10).pow(18);\n\nexport const toPrecision12 = (amount?: string | BigNumber) => (\n    amount && new BigNumber(amount)\n            .multipliedBy(precision12).toFixed(PRECISION_0)\n);\nexport const useToPrecision12 = (amount?: string | BigNumber) => (\n    useMemo(() => toPrecision12(amount), [amount])\n)\n\nexport const useToPrecision18 = (amount?: string | BigNumber) => (\n    useMemo(() => (\n        amount && new BigNumber(amount)\n            .multipliedBy(precision18).toFixed(PRECISION_0)\n    ), [amount])\n)","import { useForm } from 'react-hook-form'\nimport { TradeFormProps } from '../TradeForm'\n\nexport interface TradeFormFields {\n    assetInId: string,\n    assetOutId?: string,\n    assetInAmount?: string,\n    assetOutAmount?: string,\n    allowedSlippage: string,\n    autoSlippage: boolean,\n}\n\n\n/**\n * Define fields for the TradeForm\n * @param param0 \n * @returns \n */\n export const useTradeForm = ({ assetInId, assetOutId }: TradeFormProps['assetIds']) => {\n    return useForm<TradeFormFields>({\n        defaultValues: {\n            assetInId,\n            assetOutId,\n            assetInAmount: '0',\n            assetOutAmount: '0',\n            allowedSlippage: '5',\n            autoSlippage: true,\n        }\n    })\n}","// TODO: revisit, this is very hacky, possibly a memory leak because the event handlers are not removed\n\nimport { useEffect, useState } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Trigger a state update each time the given input changes (via the `input` event)\n * @param form \n * @param field \n * @returns \n */\n export const useListenForInput = (form: UseFormReturn<TradeFormFields>, field: string) => {\n    const [state, setState] = useState<boolean>(false);\n    \n    const inputRef = (form.control._fields[field] as any)?._f?.ref;\n\n    useEffect(() => {\n        if (!inputRef) return;\n        const listener = inputRef\n            ?.addEventListener('input', () => setState(state => !state));\n        \n        return () => inputRef?.removeEventListener('input', listener);\n    }, [inputRef])\n\n    return state;\n}","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { TradeType } from '../../../generated/graphql';\n\nconst SUBMIT_TRADE = loader('./../graphql/SubmitTrade.mutation.graphql');\n\nexport interface SubmitTradeMutationVariables {\n    assetInId: string,\n    assetOutId: string,\n    assetInAmount: string,\n    assetOutAmount: string,\n    poolType: PoolType,\n    tradeType: TradeType,\n    amountWithSlippage: string\n}\n\nexport const useSubmitTradeMutation = () => useMutation<void, SubmitTradeMutationVariables>(\n    SUBMIT_TRADE, \n    {\n        notifyOnNetworkStatusChange: true\n    }\n)\n\n/**\n * lbp.buy(assetOut, assetIn, amount, maxLimit)\n * lbp.sell(assetIn, assetOut, amount, maxLimit)\n * \n * exchange.buy(assetBuy, assetSell, amountBuy, maxSold, discount)\n * exchange.sell(assetSell, assetBuy, amountSell, minBought, discount)\n */\n\n","import log from 'loglevel';\nimport { useCallback } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { TradeType } from '../../../generated/graphql';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\nimport { useSubmitTradeMutation } from '../../../hooks/pools/mutations/useSubmitTradeMutation';\nimport { applyAllowedSlippage } from '../../../hooks/pools/resolvers/useSubmitTradeMutationResolvers';\nimport { SpotPrice } from '../../../pages/TradePage/TradePage';\nimport { TradeFormProps } from '../TradeForm';\nimport { Slippage } from './useSlippage';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Submit the trade mutation once the trade form has been submitted\n * @param tradeType\n * @param pool \n * @returns \n */\n export const useHandleSubmit = (\n    tradeType: TradeType,\n    allowedSlippage: string,\n    slippage?: Slippage,\n    pool?: TradeFormProps['pool'],\n\n) => {\n    const [submitTrade] = useSubmitTradeMutation();\n    return useCallback(({\n        assetInId,\n        assetOutId,\n        assetInAmount,\n        assetOutAmount\n    }: TradeFormFields) => {\n        if (!pool) throw new Error(`Can't submit a trade mutation without a pool`);\n\n        assetInAmount = toPrecision12(assetInAmount);\n        assetOutAmount = toPrecision12(assetOutAmount);\n\n        if (!assetInId || !assetOutId || !assetInAmount || !assetOutAmount || !slippage?.spotPriceAmount) {\n            throw new Error(`Can't submit a trade mutation without all the required arguments`)\n        }\n\n        const amountWithSlippage = applyAllowedSlippage(\n            slippage?.spotPriceAmount,\n            allowedSlippage,\n            tradeType\n        );\n\n        log.debug('TradeForm.useHandleSubmit', 'amountWithSlippage', {\n            spotPriceAmount: slippage.spotPriceAmount,\n            amountWithSlippage,\n            tradeType\n        });\n\n        const poolType = pool.__typename === 'LBPPool'\n            ? PoolType.LBP\n            : PoolType.XYK\n\n        // Submit a trade with the given parameters to be handled by Apollo\n        submitTrade({ variables: {\n            tradeType,\n            assetInId,\n            assetInAmount,\n            assetOutId,\n            assetOutAmount,\n            amountWithSlippage,\n            poolType,\n        }});\n\n    }, [submitTrade, pool, tradeType, slippage]);\n}","import { find } from 'lodash';\nimport { XykPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\n\nexport const calculateOutGivenIn = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    amountIn: string,\n) => math.xyk.calculate_out_given_in(inReserve, outReserve, amountIn);\n\nexport const calculateOutGivenInFromPool = (\n    math: HydraDxMath,\n    pool: XykPool,\n    assetInId: string,\n    assetOutId: string,\n    amountIn: string,\n) => {\n    const assetInBalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetOutBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    return calculateOutGivenIn(math, assetInBalance, assetOutBalance, amountIn);\n}","import { find } from 'lodash';\nimport { LbpPool, Pool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\n\n/**\n * Wrapper for `math.lbp.calculate_in_given_out`\n * @param math\n * @param inReserve \n * @param outReserve \n * @param inWeight \n * @param outWeight \n * @param amount \n * @returns \n */\nexport const calculateInGivenOut = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    inWeight: string,\n    outWeight: string,\n    amount: string\n) => {\n    return math.lbp.calculate_in_given_out(inReserve, outReserve, inWeight, outWeight, amount);\n}\n\nexport const getPoolBalances = (pool: Pool, assetInId: string, assetOutId: string) => {\n    const assetABalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetBBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    return { assetABalance, assetBBalance }\n}\n\nexport const getInAndOutWeights = (pool: LbpPool, assetInId: string, assetOutId: string) => {\n    const assetInWeight = assetInId === pool.assetInId\n        ? pool.assetAWeights.current\n        : pool.assetBWeights.current\n\n    const assetOutWeight = assetOutId === pool.assetOutId\n        ? pool.assetBWeights.current\n        : pool.assetAWeights.current;\n\n    return { assetInWeight, assetOutWeight };\n}\n\nexport const calculateInGivenOutFromPool = (\n    math: HydraDxMath,\n    pool: LbpPool,\n    assetInId: string,\n    assetOutId: string,\n    amountOut: string,\n) => {\n    const { assetABalance: assetInBalance, assetBBalance: assetOutBalance } = getPoolBalances(\n        pool,\n        assetInId,\n        assetOutId,\n    )\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    const { assetInWeight, assetOutWeight } = getInAndOutWeights(pool, assetInId, assetOutId);\n\n    return calculateInGivenOut(\n        math, \n        assetInBalance, \n        assetOutBalance,\n        assetInWeight,\n        assetOutWeight,\n        amountOut\n    );\n}","import { find } from 'lodash';\nimport { LbpPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\nimport { getInAndOutWeights, getPoolBalances } from './calculateInGivenOut';\n\n/**\n * Wrapper for `math.lbp.calculate_out_given_in`\n * @param math \n * @param inReserve \n * @param outReserve \n * @param inWeight \n * @param outWeight \n * @param amount \n * @returns \n */\nexport const calculateOutGivenIn = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    inWeight: string,\n    outWeight: string,\n    amount: string,\n) => {\n    return math.lbp.calculate_out_given_in(inReserve, outReserve, inWeight, outWeight, amount);\n}\n\nexport const calculateOutGivenInFromPool = (\n    math: HydraDxMath,\n    pool: LbpPool,\n    assetInId: string,\n    assetOutId: string,\n    amountIn: string,\n) => {\n    const { assetABalance: assetInBalance, assetBBalance: assetOutBalance } = getPoolBalances(\n        pool,\n        assetInId,\n        assetOutId,\n    )\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    const { assetInWeight, assetOutWeight } = getInAndOutWeights(pool, assetInId, assetOutId);\n\n    return calculateOutGivenIn(\n        math, \n        assetInBalance, \n        assetOutBalance,\n        assetInWeight,\n        assetOutWeight,\n        amountIn\n    );\n}","import { XykPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\nimport { getPoolBalances } from '../lbp/calculateInGivenOut';\n\nexport const calculateInGivenOut = (\n    math: HydraDxMath,\n    outReserve: string,\n    inReserve: string,\n    amountOut: string,\n) => math.xyk.calculate_in_given_out(outReserve, inReserve, amountOut);\n\nexport const calculateInGivenOutFromPool = (\n    math: HydraDxMath,\n    pool: XykPool,\n    assetInId: string,\n    assetOutId: string,\n    amountOut: string\n) => {\n    const { assetABalance: assetInBalance, assetBBalance: assetOutBalance } = getPoolBalances(\n        pool,\n        assetInId,\n        assetOutId,\n    )\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    //TODO: argument order appears swapped when compared to the hydradx-math library\n    return calculateInGivenOut(math, assetInBalance, assetOutBalance, amountOut);\n}","import { Pool } from '../../generated/graphql';\n\n/**\n * Check if the given pool contains the selected assets\n * @param pool \n * @param assetInId \n * @param assetOutId \n * @returns \n */\nexport const poolHasAssets = (pool: Pool, assetInId: string, assetOutId: string) => {\n    const poolAssets = [pool.assetInId, pool.assetOutId];\n    return poolAssets.includes(assetInId) && poolAssets.includes(assetOutId);\n}","import BigNumber from 'bignumber.js'\nimport { useMemo } from 'react';\nimport { toPrecision12 } from './useToPrecision';\n\nexport const percentageChange = (a?: string | BigNumber, b?: string | BigNumber) => {\n    if (!a || !b) return;\n    \n    const aBN = new BigNumber(a);\n    const bBN = new BigNumber(b);\n\n    return (bBN.minus(aBN))\n        .dividedBy(aBN)\n}\nexport const usePercentageChange = (a?: string, b?: string) => (\n    useMemo(() => percentageChange(a, b), [{a, b}])\n)","import BigNumber from 'bignumber.js';\nimport { isNaN } from 'lodash';\nimport { useMemo } from 'react';\nimport { TradeType } from '../../../generated/graphql';\nimport { fromPrecision12 } from '../../../hooks/math/useFromPrecision';\nimport { percentageChange } from '../../../hooks/math/usePercentageChange';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\n\nexport interface Slippage {\n    percentualSlippage: string,\n    spotPriceAmount: string\n}\n\nexport const calculateSlippage = (\n    spotPrice: string,\n    assetInAmount: string,\n    assetOutAmount: string,\n) => {\n    const spotPriceAmount = new BigNumber(spotPrice)\n        .multipliedBy(\n            fromPrecision12(assetOutAmount)!\n        )\n        .toFixed(0);\n\n    const resultPercentageChange = percentageChange(\n        spotPriceAmount,\n        assetInAmount\n    );\n\n    if (!resultPercentageChange || resultPercentageChange.isNaN()) return;\n\n    // TODO: don't use this for every bignumber call\n    // TODO: fix edge cases for .09 decimal formatting\n    BigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_UP });\n    const percentualSlippage = new BigNumber(resultPercentageChange)\n        .multipliedBy(100)\n        .abs()\n        .toFixed(10) // TODO: deal with formatting to 2 decimal places when displaying the result\n\n    const slippage: Slippage = {\n        percentualSlippage,\n        spotPriceAmount\n    }\n    return slippage\n}\n\n/**\n * Slippage is the percieved difference between\n * the given `spotPrice` and the given assetAmount`\n * \n * @param spotPrice\n * @param assetAmount \n * @returns \n */\nexport const useSlippage = (\n    tradeType: TradeType,\n    spotPrice?: {\n        aToB?: string,\n        bToA?: string\n    },\n    assetInAmount?: string,\n    assetOutAmount?: string,\n) => {\n    if (!spotPrice?.aToB || !spotPrice?.bToA || !assetInAmount || !assetOutAmount) return;\n    return calculateSlippage.apply(null,\n        tradeType === TradeType.Buy\n            ? [spotPrice.bToA, assetInAmount, assetOutAmount]\n            : [spotPrice.aToB, assetOutAmount, assetInAmount]\n    )\n}","import { Fee } from './generated/graphql';\n\nexport default {\n    appName: 'basilisk-ui',\n    xykFee: {\n        numerator: '2',\n        denominator: '1000'\n    } as Fee\n}","import BigNumber from 'bignumber.js';\nimport { Fee, LbpPool, Pool } from '../../../generated/graphql';\nimport constants from './../../../constants';\n\nexport const feeToPercentage = (fee: Fee) => {\n    return new BigNumber(fee.numerator)\n        .dividedBy(fee.denominator)\n        .multipliedBy('100')\n        .toFixed(2);\n}\n\nexport const feeFromPool = (pool?: Pool): Fee | undefined => {\n    return pool\n        ? (\n            pool.__typename === 'XYKPool'\n                ? constants.xykFee\n                : (pool as LbpPool).fee\n        ) : undefined\n}\n\nexport const usePercentageFee = (pool?: Pool) => {\n    const fee = feeFromPool(pool);\n    if (!fee) return;\n    return feeToPercentage(fee);\n} ","import { useEffect, useMemo } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { Fee, LbpPool, Pool } from '../../../generated/graphql';\nimport { TradeFormFields } from './useTradeForm';\nimport BigNumber from 'bignumber.js';\nimport log from 'loglevel';\nimport { feeFromPool, feeToPercentage } from './usePercentageFee';\n\nexport const defaultAllowedSlippage = {\n    xyk: '5',\n    lbp: '5'\n}\n\nexport const addFeeToSlippage = (slippage: string, fee?: Fee) => {\n    if (!fee) return slippage;\n    \n    return new BigNumber(slippage).plus(\n        feeToPercentage(fee)\n    ).toFixed(2);\n}\n\nexport const useCalculateAllowedSlippage = (\n    form: UseFormReturn<TradeFormFields>,\n    pool?: Pool,\n) => {\n    const watchAutoSlippage = form.watch('autoSlippage');\n    const allowedSlippageInputDisabled = useMemo(() => (\n        form.getValues('autoSlippage')\n    ), [watchAutoSlippage]);\n\n    useEffect(() => {\n        if (!allowedSlippageInputDisabled) return;\n\n        // TODO: depending on if the LBP repay fee is applied,\n        // increase the lbp default slippage\n        const allowedSlippage = pool\n            ? (\n                pool?.__typename === 'XYKPool'\n                ? defaultAllowedSlippage.xyk\n                : defaultAllowedSlippage.lbp\n            ) : defaultAllowedSlippage.xyk;\n\n        const allowedSlippageWithFee = addFeeToSlippage(\n            allowedSlippage,\n            feeFromPool(pool)\n        )\n\n        log.debug('TradeForm.useCalculateAllowedSlippage', 'allowedSlippageWithFee', allowedSlippageWithFee);\n\n        form.setValue('allowedSlippage', allowedSlippageWithFee);\n    }, [pool, allowedSlippageInputDisabled])\n\n    return { allowedSlippageInputDisabled };\n}","import log from 'loglevel'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useForm, UseFormReturn } from 'react-hook-form'\nimport { usePreviousDistinct } from 'react-use'\nimport { PoolType } from '../../components/Chart/shared'\nimport { TokenInput } from '../../components/Input/TokenInput'\nimport { Pool, TradeType } from '../../generated/graphql'\nimport { useSubmitTradeMutation } from '../../hooks/pools/mutations/useSubmitTradeMutation'\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolXYK } from '../../hooks/pools/xyk/calculateOutGivenIn'\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolLBP } from '../../hooks/pools/lbp/calculateOutGivenIn'\nimport { useMathContext } from '../../hooks/math/useMath'\nimport { fromPrecision12 } from '../../hooks/math/useFromPrecision'\nimport { toPrecision12 } from '../../hooks/math/useToPrecision'\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolLBP } from '../../hooks/pools/lbp/calculateInGivenOut'\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolXYK } from '../../hooks/pools/xyk/calculateInGivenOut'\nimport { SpotPrice } from '../../pages/TradePage/TradePage'\nimport { useTradeForm } from './hooks/useTradeForm'\nimport { useListenForInput } from './hooks/useListenForInput'\nimport { useTradeType } from './hooks/useTradeType'\nimport { useHandleAssetIdsChange } from './hooks/useHandleAssetIdsChange'\nimport { useHandleSubmit } from './hooks/useHandleSubmit';\nimport { poolHasAssets } from '../../hooks/pools/poolHasAssets'\nimport { useCalculateInAndOut } from './hooks/useCalculateInAndOut'\nimport { useSlippage } from './hooks/useSlippage'\nimport { isEqual } from 'lodash'\nimport { useResetAmountInputsOnPoolChange } from './hooks/useResetAmountInputsOnPoolChange'\nimport { useCalculateAllowedSlippage } from './hooks/useCalculateAllowedSlippage'\nimport { usePercentageFee } from './hooks/usePercentageFee'\n\nexport interface TradeFormProps {\n    pool?: Pool,\n    loading: boolean,\n    assetIds: {\n        assetInId: string,\n        assetOutId?: string\n    },\n    spotPrice?: SpotPrice,\n    onAssetIdsChange: (assetInId: string, assetOutId?: string) => void\n}\n\nexport const TradeForm = ({\n    pool,\n    loading,\n    onAssetIdsChange,\n    assetIds,\n    spotPrice\n}: TradeFormProps) => {\n    const form = useTradeForm(assetIds);\n    const fee = usePercentageFee(pool);\n    const tradeType = useTradeType(form);\n    useHandleAssetIdsChange(form, onAssetIdsChange);\n    useCalculateInAndOut(form, tradeType, pool);\n    useResetAmountInputsOnPoolChange(form, pool);\n\n    // TODO: adjust the precision in the hook itself?\n    const slippage = useSlippage(tradeType, spotPrice, \n        toPrecision12(form.getValues('assetInAmount')),\n        toPrecision12(form.getValues('assetOutAmount'))\n    );\n\n    const handleSubmit = useHandleSubmit(\n        tradeType, \n        form.getValues('allowedSlippage'), \n        slippage, \n        pool\n    );\n\n    const { allowedSlippageInputDisabled } = useCalculateAllowedSlippage(form, pool);\n\n    return <div>\n        <form onSubmit={form.handleSubmit(handleSubmit)}>\n            <p>{tradeType}</p>\n            <TokenInput\n                assetIdInputProps={form.register('assetInId')}\n                assetAmountInputProps={form.register('assetInAmount')}\n            />\n\n            <br/>\n\n            <TokenInput\n                assetIdInputProps={form.register('assetOutId')}\n                assetAmountInputProps={form.register('assetOutAmount')}\n            />\n\n            <div>\n                <b>Allowed slippage</b><br/>\n                <input \n                    type=\"text\"\n                    disabled={allowedSlippageInputDisabled}\n                    {...form.register('allowedSlippage')}\n                />\n                <br/>\n                <b>Auto slippage</b> \n                <input type=\"checkbox\" {...form.register('autoSlippage')}/>\n            </div>\n\n            <br/>\n\n            <p>\n                <b>Slippage:</b> {slippage?.percentualSlippage} / {fromPrecision12(slippage?.spotPriceAmount)}\n            </p>\n            <p>\n                <b>Fee:</b> {fee}%\n            </p>\n\n            <button\n                disabled={loading}\n                type='submit'\n            >\n                Trade\n            </button>\n        </form>\n    </div>\n}","import log from 'loglevel';\nimport { useState, useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { TradeType } from '../../../generated/graphql';\nimport { useListenForInput } from './useListenForInput';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Listen to changes to inputs within the trade form, and set the trade type\n * according to which input field has been interacted with last\n * @param form \n * @returns \n */\n export const useTradeType = (form: UseFormReturn<TradeFormFields>) => {\n    const [tradeType, setTradeType] = useState<TradeType>(TradeType.Sell);\n    \n    const watchassetInAmount = useListenForInput(form, 'assetInAmount');\n    const watchAassetInId = useListenForInput(form, 'assetInId');\n\n    const watchAassetOutAmount = useListenForInput(form, 'assetOutAmount');\n    const watchAassetOutId = useListenForInput(form, 'assetOutId');\n\n    useEffect(() => { \n        log.debug('TradeForm.setTradeType', TradeType.Sell)\n        setTradeType(TradeType.Sell) \n    }, [watchassetInAmount, watchAassetInId]);\n\n    useEffect(() => {\n        log.debug('TradeForm.setTradeType', TradeType.Buy)\n        setTradeType(TradeType.Buy) \n    }, [watchAassetOutAmount, watchAassetOutId]);\n\n    return tradeType;\n}","import log from 'loglevel';\nimport { useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { TradeFormProps } from '../TradeForm';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Inform parent components about asset ID changes in the form\n * @param form \n * @param onAssetIdsChange \n */\n export const useHandleAssetIdsChange = (\n    form: UseFormReturn<TradeFormFields>,\n    onAssetIdsChange: TradeFormProps['onAssetIdsChange']\n) => {\n    const [assetInId, assetOutId] = form.watch(['assetInId', 'assetOutId']);\n    useEffect(() => {\n        log.debug('TradeForm.useHandleAssetIdsChange', assetInId, assetOutId);\n        onAssetIdsChange(assetInId, assetOutId);\n    }, [assetInId, assetOutId]);\n}","import { useMemo, useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { Pool, TradeType } from '../../../generated/graphql';\nimport { useMathContext } from '../../../hooks/math/useMath';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolXYK } from '../../../hooks/pools/xyk/calculateOutGivenIn';\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolLBP } from '../../../hooks/pools/lbp/calculateOutGivenIn';\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolXYK } from '../../../hooks/pools/xyk/calculateInGivenOut';\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolLBP } from '../../../hooks/pools/lbp/calculateInGivenOut';\nimport { poolHasAssets } from '../../../hooks/pools/poolHasAssets';\nimport { fromPrecision12 } from '../../../hooks/math/useFromPrecision';\nimport log from 'loglevel';\nimport { TradeFormFields } from './useTradeForm';\n\n// TODO: loading state when calculating the fee\n/**\n * Calculate in/out amounts respectively for both XYK & LBP\n * @param form \n * @param tradeType \n * @param pool \n */\n export const useCalculateInAndOut = (\n    form: UseFormReturn<TradeFormFields>,\n    tradeType: TradeType,\n    pool?: Pool\n) => {\n    const { math } = useMathContext();\n    let [assetInId, assetInAmount] = form.watch(['assetInId', 'assetInAmount']);\n    let [assetOutId, assetOutAmount] = form.watch(['assetOutId', 'assetOutAmount']);\n    \n    // convert the user input to the required precision\n    assetInAmount = toPrecision12(assetInAmount);\n    assetOutAmount = toPrecision12(assetOutAmount);\n\n    const calculateOutGivenIn = useMemo(() => (\n        pool?.__typename === 'XYKPool'\n            ? calculateOutGivenInFromPoolXYK\n            : calculateOutGivenInFromPoolLBP\n    ), [pool])\n\n    const calculateInGivenOut = useMemo(() => (\n        pool?.__typename === 'XYKPool'\n            ? calculateInGivenOutFromPoolXYK\n            : calculateInGivenOutFromPoolLBP\n    ), [pool]);\n    \n    useEffect(() => {\n        if (!pool || !math || !assetOutId || !assetInAmount) return;\n        if (!poolHasAssets(pool, assetInId, assetOutId)) return;\n        if (tradeType !== TradeType.Sell) return;\n\n        const outAmount = calculateOutGivenIn(\n            math, \n            pool as any, \n            assetInId, \n            assetOutId, \n            assetInAmount\n        )\n        \n        /**\n         * if LBP && assetOut == accumulated asset then \n         * apply fee on top of outAmount\n         */\n\n        log.debug('TradeForm.useCalculateInAndOut', 'outAmount', outAmount);\n\n        form.setValue('assetOutAmount', fromPrecision12(outAmount));\n    }, [assetInAmount, assetInId, assetOutId, tradeType, pool])\n\n    useEffect(() => {\n        if (!pool || !math || !assetOutId || !assetOutAmount) return;\n        if (!poolHasAssets(pool, assetInId, assetOutId)) return;\n        if (tradeType !== TradeType.Buy) return;\n\n        // TODO: when LBP & assetOut === accumulated asset\n        // then calculateFee with assetOutAmount\n\n        /**\n         * when the case above happens, your trade happens at a worse spot price\n         * and the pool pays the repayFee on your behalf\n         */\n\n        const inAmount = calculateInGivenOut(\n            math, \n            pool as any, \n            assetInId, \n            assetOutId, \n            // difference between calc (assetOut+fee) and calc(assetOut) is the absolute fee\n            assetOutAmount //TODO: use assetOutAmount + fee\n        );\n        \n        log.debug('TradeForm.useCalculateInAndOut', 'inAmount', fromPrecision12(inAmount));\n\n        form.setValue('assetInAmount', fromPrecision12(inAmount));\n    }, [assetOutAmount, assetInId, assetOutId, tradeType, pool])\n}","import { isEqual } from 'lodash';\nimport { useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { usePreviousDistinct } from 'react-use';\nimport { Pool } from '../../../generated/graphql';\nimport { TradeFormFields } from './useTradeForm';\n\nexport const useResetAmountInputsOnPoolChange = (\n    form: UseFormReturn<TradeFormFields>,\n    pool?: Pool\n) => {\n    const previousPoolId = usePreviousDistinct(pool?.id);\n    useEffect(() => {\n        if (!isEqual(previousPoolId, pool?.id)) {\n            form.resetField('assetInAmount');\n            form.resetField('assetOutAmount');\n        }\n    }, [previousPoolId, pool?.id])\n}","import { fromPrecision12 } from '../hooks/math/useFromPrecision'\nimport { SpotPrice } from '../pages/TradePage/TradePage'\n\nexport interface PoolLiquidity {\n    assetABalance?: string,\n    assetBBalance?: string,\n}\nexport interface TradeChartProps {\n    spotPrice?: SpotPrice,\n    poolLiquidity: PoolLiquidity\n}\nexport const TradeChart = ({ spotPrice, poolLiquidity }: TradeChartProps) => {\n    return <div>\n        <p>TradeChart</p>\n        <div>\n            <b>Spot price</b><br/>\n            <span>1 A = {fromPrecision12(spotPrice?.aToB)}B</span><br/>\n            <span>1 B = {fromPrecision12(spotPrice?.bToA)}A</span>\n            \n            <br/><br/>\n\n            <b>Pool liquidity</b><br/>\n            <span>A = {fromPrecision12(poolLiquidity.assetABalance)}</span><br/>\n            <span>B = {fromPrecision12(poolLiquidity.assetBBalance)}</span>\n\n            <br/><br/>\n        </div>\n    </div>\n}","import { find } from 'lodash';\nimport { useMemo } from 'react';\nimport { LbpPool } from '../../../generated/graphql';\nimport { HydraDxMath, useMathContext } from '../../math/useMath';\n\nexport const oneWithPrecision = '1000000000000'; // 10^12 doesnt work, use 10^9 instead\n\nexport const calculateSpotPrice = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    inWeight: string,\n    outWeight: string,\n    amount: string = oneWithPrecision,\n) => math.lbp.get_spot_price(inReserve, outReserve, inWeight, outWeight, amount);\n\nexport const calculateSpotPriceFromPool = (\n    math: HydraDxMath,\n    pool: LbpPool,\n    assetInId: string,\n    assetOutId: string,\n) => {\n    const assetInBalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetOutBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    const assetInWeight = assetInId === pool.assetInId\n        ? pool.assetAWeights.current\n        : pool.assetBWeights.current\n\n    const assetOutWeight = assetOutId === pool.assetOutId\n        ? pool.assetBWeights.current\n        : pool.assetAWeights.current;\n\n    return calculateSpotPrice(\n        math, \n        assetInBalance, \n        assetOutBalance,\n        assetInWeight,\n        assetOutWeight,\n    );\n}\n","import { find } from 'lodash';\nimport { XykPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\nimport { oneWithPrecision } from '../lbp/calculateSpotPrice';\n\nexport const calculateSpotPrice = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n) => math.xyk.get_spot_price(inReserve, outReserve, oneWithPrecision);\n\nexport const calculateSpotPriceFromPool = (\n    math: HydraDxMath,\n    pool: XykPool,\n    assetInId: string,\n    assetOutId: string,\n) => {\n    const assetInBalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetOutBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    if (!assetInBalance || !assetOutBalance) return;\n\n    return calculateSpotPrice(\n        math,\n        assetInBalance,\n        assetOutBalance\n    )\n}","import { find, isEqual } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useGetPoolByAssetsQuery } from '../../hooks/pools/queries/useGetPoolByAssetsQuery';\nimport { TradeForm, TradeFormProps } from '../../containers/TradeForm/TradeForm';\nimport { PoolLiquidity, TradeChart } from '../../containers/TradeChart';\nimport log from 'loglevel';\nimport { useSpotPrice } from './hooks/useSpotPrice';\nimport { usePreviousDistinct } from 'react-use';\nimport { Pool } from '../../generated/graphql';\n\nexport interface SpotPrice {\n    aToB?: string,\n    bToA?: string\n}\n\n/**\n * Trade page responsible for fetching pool data\n * @returns \n */\nexport const TradePage = () => {\n    // TODO default values here should come from the router where query args are parsed\n    const [assetIds, setAssetIds] = useState<TradeFormProps['assetIds']>({\n        assetInId: '0',\n        assetOutId: '2'\n    })\n\n    // automatically fetch a pool by the given assets\n    const { \n        data: poolData, \n        loading: poolLoading, \n        error: poolError \n    } = useGetPoolByAssetsQuery(assetIds);\n    log.debug('TradePage.useGetPoolByAssetsQuery', assetIds);\n\n    const pool: Pool | undefined = useMemo(() => poolData?.pool, [poolData?.pool]);\n\n    // if there was a problem fetching the pool, log it\n    poolError && log.error(poolError);\n\n    // combined loading state from all the required queries\n    const loading = useMemo(() => {\n        const loading = poolLoading;\n        log.debug('TradePage.loading', loading);\n        return loading;\n    }, [poolLoading]);\n\n    log.debug('TradePage.poolData.pool', poolData?.pool);\n\n    // when the underlying form's assetIds change, update the state\n    const handleAssetIdsChange = (assetInId: string, assetOutId?: string) => {\n        const newIds = { assetInId, assetOutId };\n        log.debug('TradePage.handleAssetIdsChange', isEqual(assetIds, newIds), newIds);\n        if (!isEqual(assetIds, newIds)) setAssetIds(newIds);\n    }\n\n    const spotPrice = useSpotPrice(\n        assetIds,\n        poolData?.pool\n    );\n\n    const poolLiquidity: PoolLiquidity = useMemo(() => {\n        return {\n            assetABalance: find(pool?.balances, { assetId: assetIds.assetInId })?.balance,\n            assetBBalance: find(pool?.balances, { assetId: assetIds.assetOutId })?.balance,\n        }\n    }, [pool]);\n\n    return <div>\n        <h1>Trade</h1>\n\n        <br /><br />\n\n        <TradeChart\n            poolLiquidity={poolLiquidity}\n            spotPrice={spotPrice}\n        />\n        \n        <TradeForm\n            onAssetIdsChange={handleAssetIdsChange}\n            assetIds={assetIds}\n            loading={loading}\n            pool={pool}\n            spotPrice={spotPrice}\n        />\n    </div>\n}","import { useApolloClient } from '@apollo/client';\nimport { useMemo } from 'react';\nimport { TradeFormProps } from '../../../containers/TradeForm/TradeForm';\nimport { Pool } from '../../../generated/graphql';\nimport { readLastBlock } from '../../../hooks/lastBlock/readLastBlock';\nimport { useMathContext } from '../../../hooks/math/useMath';\nimport { SpotPrice } from '../TradePage';\nimport { calculateSpotPriceFromPool as calculateSpotPriceFromPoolLBP } from '../../../hooks/pools/lbp/calculateSpotPrice';\nimport { calculateSpotPriceFromPool as calculateSpotPriceFromPoolXYK } from '../../../hooks/pools/xyk/calculateSpotPrice';\nimport log from 'loglevel';\n\nexport const useSpotPrice = (\n    { assetInId, assetOutId }: TradeFormProps['assetIds'],\n    pool?: Pool,\n): SpotPrice | undefined => {\n    const client = useApolloClient();\n    const relaychainBlockNumber = readLastBlock(client);\n    const { math } = useMathContext();\n   \n    return useMemo(() => {\n        if (!math || !pool || !assetInId || !assetOutId || !relaychainBlockNumber) return;\n\n        // if the pool is an XYKPool, use the XYKPool spot price calculation and vice versa\n        const calculateSpotPriceFromPool = pool?.__typename === 'XYKPool'\n            ? calculateSpotPriceFromPoolXYK\n            : calculateSpotPriceFromPoolLBP\n\n        const spotPrice: SpotPrice = {\n            // TODO: get rid of `as any` since its not type safe *at all*\n            aToB: calculateSpotPriceFromPool(math, pool as any, assetInId, assetOutId),\n            bToA: calculateSpotPriceFromPool(math, pool as any, assetOutId, assetInId)\n        }\n\n        log.debug('TradePage.useSpotPrice', spotPrice);\n\n        return spotPrice;\n    }, [relaychainBlockNumber, assetInId, assetOutId, pool]);\n}","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { GET_ACTIVE_ACCOUNT } from '../queries/useGetActiveAccountQuery';\n\nexport const SET_ACTIVE_ACCOUNT = loader('./../graphql/SetActiveAccount.mutation.graphql');\n\nexport interface SetActiveAccountMutationVariables {\n    id: string | undefined\n}\n\nexport const useSetActiveAccountMutation = (variables: SetActiveAccountMutationVariables) => useMutation<void, SetActiveAccountMutationVariables>(\n    SET_ACTIVE_ACCOUNT,\n    {\n        variables,\n        refetchQueries: [\n            // TODO: figure out why do we need to refetch active account manually,\n            // while all accounts query gets updated automatically\n            GET_ACTIVE_ACCOUNT\n        ]\n    }\n)","import { useQuery } from '@apollo/client'\nimport { Query } from '../../../generated/graphql';\nimport { loader } from 'graphql.macro';\n\nexport const GET_ACCOUNTS = loader('./../graphql/GetAccounts.query.graphql');\nexport interface GetAccountsQueryResponse {\n    accounts: Query['accounts'],\n    lastBlock: Query['lastBlock']\n}\n\nexport const useGetAccountsQuery = () => useQuery<GetAccountsQueryResponse>(GET_ACCOUNTS, {\n    notifyOnNetworkStatusChange: true,\n});","import { useMemo } from 'react';\nimport { Account as AccountModel } from '../generated/graphql';\nimport { useSetActiveAccountMutation } from '../hooks/accounts/mutations/useSetActiveAccountMutation';\nimport { useGetAccountsQuery } from '../hooks/accounts/queries/useGetAccountsQuery';\nimport { usePersistActiveAccount } from '../hooks/accounts/usePersistActiveAccount';\n\nexport const Account = ({ account }: { account?: AccountModel }) => {\n  // TODO: you can get the loading state of the mutation here as well\n  // but it probably needs to be turned into a contextual mutation\n  // in order to share the loading state accross multiple mutation hook calls\n  const [setActiveAccount] = useSetActiveAccountMutation({\n    id: account?.id,\n  });\n\n  const [persistedActiveAccount] = usePersistActiveAccount();\n\n  const [unsetActiveAccount] = useSetActiveAccountMutation({\n    id: undefined,\n  });\n\n  return (\n    <div\n      style={{\n        marginBottom: '24px',\n        padding: '12px',\n        paddingLeft: 0,\n      }}\n    >\n      <h3>\n        {account?.name}\n        {account?.id === persistedActiveAccount?.id ? ' [active]' : <></>}\n      </h3>\n      <p>\n        <b>Address:</b>\n        {account?.id}\n      </p>\n      <div>\n        <b>Balances:</b>\n        {account?.balances.map((balance, i) => (\n          <p key={i}>\n            {balance.assetId}:<i> {balance.balance}</i>\n          </p>\n        ))}\n      </div>\n      <button\n        onClick={(_) =>\n          account?.id === persistedActiveAccount?.id\n            ? unsetActiveAccount()\n            : setActiveAccount()\n        }\n      >\n        {account?.id === persistedActiveAccount?.id\n          ? 'Unset active'\n          : 'Set active'}\n      </button>\n    </div>\n  );\n};\n\nexport const WalletPage = () => {\n  const { data: accountsData, loading: accountsLoading } =\n    useGetAccountsQuery();\n  // const { data: extensionData, loading: extensionLoading } = useGetExtensionQuery();\n\n  const loading = useMemo(() => {\n    return accountsLoading;\n  }, [accountsLoading]);\n\n  return (\n    <div\n      style={{\n        textAlign: 'left',\n      }}\n    >\n      <h1>Accounts</h1>\n\n      {loading ? (\n        <i>[WalletPage] Loading accounts...</i>\n      ) : (\n        <i>[WalletPage] Everything is up to date</i>\n      )}\n\n      <br />\n      <br />\n\n      {true ? (\n        <div>\n          {accountsData?.accounts?.map((account, i) => (\n            <Account key={i} account={account} />\n          ))}\n        </div>\n      ) : (\n        <p>Extension unavailable</p>\n      )}\n    </div>\n  );\n};\n","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { TradePage } from '../pages/TradePage/TradePage';\nimport { WalletPage } from '../pages/WalletPage';\n\nexport const Router = () => {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<WalletPage />} />\n      <Route path=\"wallet\" element={<WalletPage />} />\n      <Route path=\"trade\" element={<TradePage />} />\n      <Route path=\"*\" element={<Navigate to=\"/\" />} />\n    </Routes>\n  );\n};\n","import { SI_PREFIXES } from '@gapit/format-si';\nimport BigNumber from 'bignumber.js';\nimport log from 'loglevel';\nimport { toPrecision12 } from '../../hooks/math/useToPrecision';\n\n// Used to select in what format should the given unit be displayed\nexport enum UnitStyle {\n    LONG = 'LONG',\n    SHORT = 'SHORT'\n}\n\n// TODO: offer only a constrained range of units\nexport enum MetricUnit {\n    // Y = 'Y',\n    // Z = 'Z',\n    // E = 'E',\n    // P = 'P',\n    T = 'T',\n    G = 'G',\n    M = 'M',\n    k = 'k',\n    NONE = '',\n    m = 'm',\n    µ = 'µ',\n    n = 'n',\n    p = 'p',\n    // TODO: we should not allow anything below 'p' = 1e-12\n    // f = 'f',\n    // a = 'a',\n    // z = 'z',\n    // y = 'y'\n}\n\n// Mapping between short/long metric unit names\nexport type MetricUnitMap = Record<MetricUnit, string>;\nexport const unitMap: MetricUnitMap = {\n    'T': 'tera',\n    'G': 'giga',\n    'M': 'mega',\n    'k': 'kilo',\n    '': 'unit',\n    'm': 'mili',\n    'µ': 'micro',\n    'n': 'nano',\n    'p': 'pico'\n}\n\n// Mapping used to retrieve the base10 multiplier by the short metric unit name\nexport const prefixMap: { [key in MetricUnit]?: number } = SI_PREFIXES.reduce((prefixes, prefix) => {\n    const key = prefix.metricPrefix;\n    return {\n        ...prefixes,\n        [key]: prefix.base10\n    };\n}, {});\n\n// convert a number to a baseline value given its metric unit\nexport const formatFromSIWithPrecision12 = (number: string, metricPrefix: MetricUnit) => {\n    const base10 = prefixMap[metricPrefix];\n    log.debug('formatFromSIWithPrecision12', 'base10', base10, metricPrefix);\n    if (!base10) return;\n\n    const formattedResult = new BigNumber(number)\n        .multipliedBy(base10)\n\n    if (!formattedResult.isNaN()) return toPrecision12(formattedResult);\n}","import { Balance } from '../../../generated/graphql';\nimport { fromPrecision12 } from '../../../hooks/math/useFromPrecision';\nimport { formatPrecisionSI, formatFixedSI, SI_PREFIXES } from '@gapit/format-si';\nimport { useMemo } from 'react';\nimport log from 'loglevel';\nimport './FormattedBalance.scss';\nimport BigNumber from 'bignumber.js';\nimport { prefix } from '@fortawesome/free-solid-svg-icons';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\nimport { MetricUnit, unitMap, UnitStyle } from '../metricUnit';\nimport { useFormatSI } from './hooks/useFormatSI';\n\n// TODO: extract\nexport const assetIdNameMap: Record<string, { symbol: string, fullName: string }> = {\n    '0': {\n        symbol: 'BSX',\n        fullName: 'Basilisk'\n    }\n}\n\nexport interface FormattedBalanceProps {\n    balance: Balance,\n    precision?: number,\n    unitStyle: UnitStyle\n}\n\nexport const FormattedBalance = ({ \n    balance,\n    precision = 3,\n    unitStyle = UnitStyle.LONG\n}: FormattedBalanceProps) => {\n    const assetSymbol = useMemo(() => \n        assetIdNameMap[balance.assetId]?.symbol, \n        [balance.assetId]\n    );\n    const formattedBalance = useFormatSI(\n        precision, \n        unitStyle,\n        balance.balance,\n    );\n    \n    log.debug('FormattedBalance', formattedBalance?.value, formattedBalance?.unit, formattedBalance?.numberOfDecimalPlaces);\n\n    // We don't need to use the currency input here\n    // because when there is more than 3 significant digits, the formatter\n    // moves one notch up/down and keeps a fixed precision\n    return <div className='formatted-balance flex-container'>\n        <div className='formatted-balance__value'>{formattedBalance.value}</div>\n        <div className={`formatted-balance__suffix ${unitStyle.toLowerCase()}`}>{formattedBalance.suffix}</div>\n        <div className='formatted-balance__symbol'>{assetSymbol}</div>\n    </div>\n};","import { formatFixedSI } from '@gapit/format-si';\nimport { useMemo } from 'react';\nimport { fromPrecision12 } from '../../../../hooks/math/useFromPrecision';\nimport { MetricUnit, unitMap, UnitStyle } from '../../metricUnit';\n\nexport const useFormatSI = (\n    precision: number, \n    unitStyle: UnitStyle,\n    number?: string,\n) => {\n    const formattedBalance = useMemo(() => {\n        const balanceWithPrecision12 = fromPrecision12(number);\n        if (!balanceWithPrecision12) return;\n\n        // alternatively use formatPrecisionSI\n        let siFormat = formatFixedSI(\n            balanceWithPrecision12,\n            '',\n            precision\n        );\n\n        // TODO: get rid of the 'as' call\n        const unitName: string | undefined = unitMap[siFormat.unit as MetricUnit];\n\n        return {\n            ...siFormat,\n            unitName\n        }\n    }, [number, precision])\n\n    const numberOfDecimalPlaces = useMemo(() => (\n        formattedBalance?.value?.split('.')[1]?.length\n    ), [formattedBalance]);\n\n    const suffix = useMemo(() => {\n        if (!formattedBalance) return;\n\n        const unit = formattedBalance.unit;\n        const unitName = unit === '' ? '' : formattedBalance.unitName;\n        const displayUnit = unitStyle === UnitStyle.LONG\n            ? unitName || unit\n            : unit\n\n        return ` ${displayUnit}`;\n    }, [formattedBalance, unitStyle])\n\n    return { ...formattedBalance, numberOfDecimalPlaces, suffix };\n}","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgHelpIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 28,\n    height: 28,\n    viewBox: \"0 0 28 28\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M14 0.4375C6.51016 0.4375 0.4375 6.51235 0.4375 14C0.4375 21.492 6.51016 27.5625 14 27.5625C21.4898 27.5625 27.5625 21.492 27.5625 14C27.5625 6.51235 21.4898 0.4375 14 0.4375ZM14 24.9375C7.95528 24.9375 3.0625 20.0467 3.0625 14C3.0625 7.9573 7.9555 3.0625 14 3.0625C20.0425 3.0625 24.9375 7.95545 24.9375 14C24.9375 20.0446 20.0467 24.9375 14 24.9375ZM19.8649 10.9812C19.8649 14.6482 15.9044 14.7046 15.9044 16.0597V16.4062C15.9044 16.7687 15.6105 17.0625 15.2481 17.0625H12.7518C12.3894 17.0625 12.0956 16.7687 12.0956 16.4062V15.9327C12.0956 13.9779 13.5776 13.1965 14.6975 12.5686C15.6579 12.0302 16.2465 11.664 16.2465 10.951C16.2465 10.0078 15.0434 9.3818 14.0708 9.3818C12.8027 9.3818 12.2172 9.98211 11.3943 11.0207C11.1724 11.3007 10.7676 11.3527 10.4829 11.1369L8.96126 9.98309C8.68197 9.77134 8.61941 9.37792 8.81666 9.08824C10.1088 7.19091 11.7545 6.125 14.3169 6.125C17.0004 6.125 19.8649 8.21975 19.8649 10.9812ZM16.2969 20.125C16.2969 21.3915 15.2665 22.4219 14 22.4219C12.7335 22.4219 11.7031 21.3915 11.7031 20.125C11.7031 18.8585 12.7335 17.8281 14 17.8281C15.2665 17.8281 16.2969 18.8585 16.2969 20.125Z\",\n    fill: \"#BDCCD4\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgHelpIcon);\nexport default __webpack_public_path__ + \"static/media/HelpIcon.e78a43b1.svg\";\nexport { ForwardRef as ReactComponent };","var _path, _circle;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgNotificationActiveIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 32,\n    height: 32,\n    viewBox: \"0 0 32 32\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M20.427 26C20.427 27.8937 18.8922 29.4286 17 29.4286C15.1079 29.4286 13.5731 27.8937 13.5731 26H20.427ZM28.3362 21.1939C28.4067 21.2681 28.4745 21.3393 28.5388 21.4084C28.8602 21.7534 29.0027 22.167 29 22.5714C28.9947 23.45 28.3047 24.2857 27.2804 24.2857H6.71968C5.69539 24.2857 5.00593 23.45 5.00004 22.5714C4.99736 22.167 5.13986 21.7539 5.46129 21.4084C5.52557 21.3393 5.59334 21.2681 5.6639 21.1939C6.72939 20.0737 8.43289 18.2828 8.43289 13.1429C8.43289 8.98036 11.3515 5.64821 15.2868 4.83071V3.71429C15.2868 2.76768 16.054 2 17 2C17.9461 2 18.7133 2.76768 18.7133 3.71429V4.83071C19.9854 5.09499 21.1513 5.62204 22.1468 6.35498C20.3032 7.09144 19.0007 8.89361 19.0007 11C19.0007 13.7614 21.2393 16 24.0007 16C24.6088 16 25.1915 15.8914 25.7306 15.6927C26.182 18.9292 27.4699 20.2832 28.3362 21.1939Z\",\n    fill: \"#BDCCD4\"\n  })), _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 24,\n    cy: 11,\n    r: 3,\n    fill: \"#4FFFB0\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNotificationActiveIcon);\nexport default __webpack_public_path__ + \"static/media/NotificationActiveIcon.c184ef16.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgNotificationInactiveIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 24,\n    height: 28,\n    viewBox: \"0 0 24 28\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M12 27.4286C13.8922 27.4286 15.427 25.8937 15.427 24H8.57307C8.57307 25.8937 10.1079 27.4286 12 27.4286ZM23.5388 19.4084C22.5038 18.2963 20.5672 16.6232 20.5672 11.1429C20.5672 6.98036 17.6486 3.64821 13.7133 2.83071V1.71429C13.7133 0.767679 12.9461 0 12 0C11.054 0 10.2868 0.767679 10.2868 1.71429V2.83071C6.35147 3.64821 3.43289 6.98036 3.43289 11.1429C3.43289 16.6232 1.49629 18.2963 0.461287 19.4084C0.139858 19.7539 -0.00264153 20.167 3.70387e-05 20.5714C0.0059299 21.45 0.695394 22.2857 1.71968 22.2857H22.2804C23.3047 22.2857 23.9947 21.45 24 20.5714C24.0027 20.167 23.8602 19.7534 23.5388 19.4084Z\",\n    fill: \"#BDCCD4\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgNotificationInactiveIcon);\nexport default __webpack_public_path__ + \"static/media/NotificationInactiveIcon.71a03dbb.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\n\nfunction SvgDropdownArrowIcon(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 10,\n    height: 8,\n    viewBox: \"0 0 10 8\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4.46879 7.00939L0.218787 2.75938C-0.0749634 2.46563 -0.0749634 1.99063 0.218787 1.7L0.925036 0.99375C1.21879 0.7 1.69379 0.7 1.98441 0.99375L4.99691 4.00626L8.00941 0.99375C8.30316 0.7 8.77816 0.7 9.06879 0.99375L9.77503 1.7C10.0688 1.99375 10.0688 2.46875 9.77503 2.75938L5.52504 7.00939C5.23754 7.30314 4.76254 7.30314 4.46879 7.00939Z\",\n    fill: \"#BDCCD4\"\n  })));\n}\n\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgDropdownArrowIcon);\nexport default __webpack_public_path__ + \"static/media/DropdownArrowIcon.288e1cd4.svg\";\nexport { ForwardRef as ReactComponent };","import { ReactComponent as HelpIcon } from './svg/HelpIcon.svg';\nimport { ReactComponent as NotificationActiveIcon } from './svg/NotificationActiveIcon.svg';\nimport { ReactComponent as NotificationInactiveIcon } from './svg/NotificationInactiveIcon.svg';\nimport { ReactComponent as DropdownArrowIcon } from './svg/DropdownArrowIcon.svg';\n\nexport enum IconType {\n  HELP = 'HELP',\n  NOTIFICATION_ACTIVE = 'NOTIFICATION_ACTIVE',\n  NOTIFICATION_INACTIVE = 'NOTIFICATION_INACTIVE',\n  DROPDOWN_ARROW = 'DROPDOWN_ARROW',\n}\n\nexport interface IconsProps {\n  type: IconType;\n}\n\nexport const Icon = ({ type }: IconsProps) => {\n  switch (type) {\n    case IconType.HELP:\n      return <HelpIcon />;\n    case IconType.NOTIFICATION_ACTIVE:\n      return <NotificationActiveIcon />;\n    case IconType.NOTIFICATION_INACTIVE:\n      return <NotificationInactiveIcon />;\n    case IconType.DROPDOWN_ARROW:\n      return <DropdownArrowIcon />;\n  }\n};\n","import { Account } from '../../../../generated/graphql';\nimport classNames from 'classnames';\nimport { FormattedBalance } from '../../../Balance/FormattedBalance/FormattedBalance';\nimport { UnitStyle } from '../../../Balance/metricUnit';\nimport './AccountItem.scss';\n\nimport Identicon from '@polkadot/react-identicon';\nimport { useSetActiveAccountMutation } from '../../../../hooks/accounts/mutations/useSetActiveAccountMutation';\nexport interface AccountItemProps {\n  account: Account;\n  onClick: () => void;\n  active: boolean;\n}\n\nexport const AccountItem = ({ account, onClick, active }: AccountItemProps) => {\n  const [setActiveAccount] = useSetActiveAccountMutation({\n    id: account?.id,\n  });\n\n  return (\n    <div\n      className={\n        'account-item ' +\n        classNames({\n          'account-item--active': active,\n        })\n      }\n      onClick={() => {\n        setActiveAccount().then(onClick);\n      }}\n    >\n      <div className=\"d-flex flex-align-space\">\n        <div className=\"account-item__heading\">{account.name}</div>\n        <div>\n          {account?.balances.map((balance, i) => (\n            <FormattedBalance\n              balance={balance}\n              unitStyle={UnitStyle.SHORT}\n              precision={1}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"d-flex flex-column\">\n        <div className=\"d-flex gap-2 my-1\">\n          <Identicon value={account?.id} size={32} />\n          <div className=\"d-flex flex-column\">\n            <div className=\"account-item__chain-name\">Basilisk</div>\n            <div className=\"account-item__chain-address\">{account?.id}</div>\n          </div>\n        </div>\n        <div className=\"d-flex gap-2 my-1\">\n          <Identicon value={account?.id} size={32} theme=\"polkadot\" />\n          <div className=\"d-flex flex-column\">\n            <div className=\"account-item__chain-name\">Kusama</div>\n            <div className=\"account-item__chain-address\">{account?.id}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport './Button.scss';\n\nexport enum ButtonKind {\n  Primary = 'Primary',\n  Secondary = 'Secondary',\n}\n\nexport interface ButtonProps {\n  children: string;\n  kind?: ButtonKind;\n  onClick?: () => void;\n}\n\nexport const Button = ({\n  // TODO: default should not be primary\n  kind = ButtonKind.Primary,\n  children,\n}: ButtonProps) => {\n  return (\n    <button\n      className={\n        'button ' +\n        classNames({\n          'button--primary': kind === ButtonKind.Primary,\n        }) +\n        classNames({\n          'button--secondary': kind === ButtonKind.Secondary,\n        })\n      }\n    >\n      {children}\n    </button>\n  );\n};\n","import { MutableRefObject, useMemo } from 'react';\nimport { Account } from '../../../generated/graphql';\nimport { AccountItem } from './AccountItem/AccountItem';\nimport { Button, ButtonKind } from '../../Button/Button';\nimport './AccountSelector.scss';\nimport { useSetActiveAccountMutation } from '../../../hooks/accounts/mutations/useSetActiveAccountMutation';\n\nexport interface AccountSelectorProps {\n  accounts?: Account[];\n  account?: Account;\n  onAccountSelected: (asset: Account) => void;\n  innerRef: MutableRefObject<HTMLDivElement | null>;\n  closeModal: () => void;\n}\n\n/**\n * Renders a list of accounts that the user can select an account from\n */\nexport const AccountSelector = ({\n  accounts,\n  onAccountSelected,\n  account,\n  innerRef,\n  closeModal,\n}: AccountSelectorProps) => {\n  const activeAccount = useMemo(() => account, [account]);\n\n  const [unsetActiveAccount] = useSetActiveAccountMutation({\n    id: undefined,\n  });\n\n  return (\n    <div className=\"account-selector\" ref={innerRef}>\n      <div className=\"account-selector__content-wrapper\">\n        <div className=\"d-flex flex-align-space mx-3 my-3 account-selector__heading\">\n          <div>Select an account</div>\n          <div\n            className=\"account-selector__close-modal-btn\"\n            onClick={() => closeModal()}\n          >\n            x\n          </div>\n        </div>\n        {accounts?.length ? (\n          <div className=\"account-selector__accounts-list\">\n            {accounts?.map((account, i) => (\n              <AccountItem\n                key={i}\n                onClick={() => onAccountSelected(account)}\n                active={account.id === activeAccount?.id}\n                account={account}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"mx-3 my-5 text-center\">\n            <h4>No accounts available</h4>\n            <a href=\"/#\" className=\"account-selector__create-account-link\">\n              Need help creating an account? <br />\n              Click here\n            </a>\n          </div>\n        )}\n        {account && (\n          <div className=\"d-flex mx-3\">\n            <Button\n              kind={ButtonKind.Secondary}\n              onClick={() => unsetActiveAccount()}\n            >\n              Clear account\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { MutableRefObject, useCallback } from 'react';\nimport { FormattedBalance } from '../Balance/FormattedBalance/FormattedBalance';\nimport { Account } from '../../generated/graphql';\nimport { UnitStyle } from '../Balance/metricUnit';\nimport { Icon, IconType } from '../Icon/Icon';\nimport Identicon from '@polkadot/react-identicon';\nimport './Wallet.scss';\nimport { useModalPortal } from '../Balance/AssetBalanceInput/hooks/useModalPortal';\nimport { useModalPortalElement } from './AccountSelector/hooks/useModalPortalElement';\n\nconst horizontalBar = '―';\n\nexport interface WalletProps {\n  modalContainerRef: MutableRefObject<HTMLDivElement | null>;\n  accounts?: Account[];\n  account?: Account;\n  onAccountSelected: (account: Account) => void;\n  extensionLoading: boolean;\n  isExtensionAvailable: boolean;\n}\n\nexport const Wallet = ({\n  modalContainerRef,\n  accounts,\n  account,\n  onAccountSelected,\n  extensionLoading,\n  isExtensionAvailable,\n}: WalletProps) => {\n  const modalPortalElement = useModalPortalElement({\n    accounts,\n    onAccountSelected,\n    account,\n  });\n  const { toggleModal, modalPortal, toggleId } = useModalPortal(\n    modalPortalElement,\n    modalContainerRef,\n    false // don't auto close when clicking outside the modalPortalElement\n  );\n  const handleAccountSelectorClick = useCallback(\n    () => toggleModal(),\n    [toggleModal]\n  );\n\n  return (\n    <div className=\"wallet d-flex justify-content-between\">\n      {/* This portal will be rendered at it's container ref as defined above */}\n      {modalPortal}\n\n      <div className=\"wallet__icons-wrapper\">\n        <span className=\"wallet__icon\">\n          <Icon type={IconType.HELP} />\n        </span>\n        <span className=\"wallet__icon\">\n          <Icon type={IconType.NOTIFICATION_INACTIVE} />\n        </span>\n      </div>\n      <div\n        className=\"d-flex wallet__info-wrapper\"\n        onClick={(_) => handleAccountSelectorClick()}\n        data-modal-portal-toggle={toggleId}\n      >\n        {extensionLoading ? (\n          <div className=\"wallet__info\">Loading...</div>\n        ) : isExtensionAvailable ? (\n          <>\n            {account ? (\n              <>\n                <div className=\"d-flex flex-column align-items-end\">\n                  {account?.balances[0] ? (\n                    <FormattedBalance\n                      balance={account?.balances[0]}\n                      unitStyle={UnitStyle.SHORT}\n                      precision={1}\n                    />\n                  ) : (\n                    <div>{horizontalBar}</div>\n                  )}\n                  <div className=\"wallet__fiat-balance\">~$ {horizontalBar}</div>\n                </div>\n                <Identicon value={account?.id} size={32} />\n                <div className=\"wallet__account-name\">{account?.name}</div>\n              </>\n            ) : (\n              <>\n                <div className=\"wallet__select-account-icon\" />\n                <div className=\"wallet__info\">Connect account</div>\n              </>\n            )}\n          </>\n        ) : (\n          <div className=\"wallet__info\">Extension unavailable</div>\n        )}\n        <div>\n          <Icon type={IconType.DROPDOWN_ARROW} />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\nimport { Account } from '../../../../generated/graphql';\nimport { AccountSelector } from './../AccountSelector';\nimport {\n  ModalPortalElementFactory,\n  ModalPortalElementFactoryArgs,\n} from './../../../Balance/AssetBalanceInput/hooks/useModalPortal';\nimport { WalletProps } from '../../Wallet';\n\nexport type ModalPortalElement = ({\n  accounts,\n  onAccountSelected,\n  account,\n}: Pick<\n  WalletProps,\n  'accounts' | 'onAccountSelected' | 'account'\n>) => ModalPortalElementFactory;\nexport type CloseModal = ModalPortalElementFactoryArgs['closeModal'];\n\nexport const useModalPortalElement: ModalPortalElement = ({\n  accounts,\n  onAccountSelected,\n  account,\n}) => {\n  const handleAccountSelected = useCallback(\n    (closeModal: CloseModal) => (account: Account) => {\n      closeModal();\n      onAccountSelected(account);\n    },\n    [onAccountSelected]\n  );\n\n  return useCallback(\n    ({ closeModal, elementRef, isModalOpen }) => {\n      return isModalOpen ? (\n        <AccountSelector\n          innerRef={elementRef}\n          accounts={accounts}\n          account={account}\n          onAccountSelected={handleAccountSelected(closeModal)}\n          closeModal={closeModal}\n        />\n      ) : (\n        <></>\n      );\n    },\n    [accounts, account, handleAccountSelected]\n  );\n};\n","import { MutableRefObject, ReactNode, ReactPortal, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useOnClickOutside } from 'use-hooks';\nimport { v4 as uuidv4 } from 'uuid';\nexport interface ModalPortalElementFactoryArgs {\n    openModal: () => void,\n    closeModal: () => void,\n    toggleModal: () => void,\n    elementRef: MutableRefObject<HTMLDivElement | null>,\n    isModalOpen: boolean,\n}\n\nexport type ModalPortalElementFactory = (args: ModalPortalElementFactoryArgs) => ReactNode;\n\nexport const useModalPortal = (\n    elementFactory: ModalPortalElementFactory,\n    container: MutableRefObject<HTMLDivElement | null>,\n    closeOnClickOutside: boolean = true,\n) => {\n    const [modalPortal, setModalPortal] = useState<ReactPortal | undefined>();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    \n    const toggleModal = useCallback(() => setIsModalOpen(isModalOpen => !isModalOpen), [setIsModalOpen]);\n    const openModal = useCallback(() => setIsModalOpen(true), [setIsModalOpen]);\n    const closeModal = useCallback(() => setIsModalOpen(false), [setIsModalOpen]);\n\n    const elementRef = useRef<HTMLDivElement | null>(null);\n\n    const toggleId = useMemo(() => uuidv4(), []);\n\n    const element = useMemo(() => {\n        return elementFactory({ toggleModal, openModal, closeModal, elementRef, isModalOpen })\n    }, [elementFactory, toggleModal, openModal, closeModal, isModalOpen, elementRef]);\n\n    useEffect(() => {\n        if (!container.current || !element) return;\n        setModalPortal(\n            createPortal(element, container.current)\n        );\n    }, [container.current, element]);\n    \n    useOnClickOutside(elementRef as MutableRefObject<Node>, (event) => {\n        const didClickOutsideToggle = !(event.target as HTMLElement).closest(`[data-modal-portal-toggle=\"${toggleId}\"]`);\n        closeOnClickOutside && didClickOutsideToggle && closeModal()\n    });\n\n    return { \n        toggleModal,\n        openModal,\n        closeModal,\n        isModalOpen,\n        toggleId,\n        modalPortal: modalPortal\n    };\n}","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { Extension } from '../../../generated/graphql';\n\n// graphql query\nexport const GET_EXTENSION = loader('./../graphql/GetExtension.query.graphql');\n\n// data shape returned from the query\nexport interface GetExtensionQueryResponse {\n  extension: Pick<Extension, 'isAvailable'>;\n}\n\n// hook wrapping the built-in apollo useQuery hook with proper types & configuration\nexport const useGetExtensionQuery = () =>\n  useQuery<GetExtensionQueryResponse>(GET_EXTENSION, {\n    notifyOnNetworkStatusChange: true,\n  });\n","import { Wallet as WalletComponent } from '../components/Wallet/Wallet';\nimport { useRef } from 'react';\nimport { useGetAccountsQuery } from '../hooks/accounts/queries/useGetAccountsQuery';\nimport { useGetExtensionQuery } from '../hooks/extension/queries/useGetExtensionQuery';\n\nexport const Wallet = () => {\n  const { data: extensionData, loading: extensionLoading } =\n    useGetExtensionQuery();\n  const { data: accountsData, loading: accountsLoading } =\n    useGetAccountsQuery();\n\n  const modalContainerRef = useRef<HTMLDivElement | null>(null);\n\n  console.log(accountsLoading);\n\n  // request data from the data layer\n  // render the component with the provided data\n  return (\n    <>\n      <div ref={modalContainerRef} />\n      <WalletComponent\n        isExtensionAvailable={!!extensionData?.extension.isAvailable}\n        extensionLoading={extensionLoading}\n        accounts={accountsData?.accounts}\n        onAccountSelected={(account) => console.log(account)}\n        modalContainerRef={modalContainerRef}\n      />\n    </>\n  );\n};\n","import React from 'react';\nimport { Wallet } from './Wallet';\n\nexport const PageContainer = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div className=\"container\">\n      <div className=\"row my-5\">\n        <div className=\"col-8\">\n          <h1>Basilisk</h1>\n        </div>\n        <div className=\"col\">\n          <Wallet />\n        </div>\n      </div>\n      <div className=\"row\">{children}</div>\n    </div>\n  );\n};\n","import './App.scss';\nimport { MultiProvider } from './containers/MultiProvider';\nimport log from 'loglevel';\nimport { HashRouter } from 'react-router-dom';\nimport { Router } from './containers/Router';\nimport { PageContainer } from './containers/PageContainer';\n\nlog.setLevel('debug');\n\nexport const branch = process.env.REACT_APP_GIT_BRANCH;\nexport const baseName = branch?.length ? `/basilisk-ui/${branch}/app` : '/';\n\nexport const App = () => {\n  return (\n    <MultiProvider>\n      <HashRouter>\n        <PageContainer>\n          <Router />\n        </PageContainer>\n      </HashRouter>\n    </MultiProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  // TODO: figure out a way to enable react strict mode\n  // without triggering duplicate graphql queries\n  // https://github.com/apollographql/react-apollo/issues/3906#issuecomment-636604835\n  // <React.StrictMode>\n    <App/>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}