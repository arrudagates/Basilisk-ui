(this["webpackJsonpbasilisk-ui"]=this["webpackJsonpbasilisk-ui"]||[]).push([[0],{148:function(e,n,i){},162:function(e,n){},166:function(e,n){},170:function(e,n,i){},171:function(e,n,i){},172:function(e,n,i){},173:function(e,n,i){},174:function(e,n,i){"use strict";i.r(n);var t=i(1),a=i(102),d=i.n(a),s=(i(148),i(203)),l=i(206),o=i(176),r=i(9),c=i.n(r),u=i(10),m=i(103);const v={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetAccounts"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"accounts"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"isActive"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:260,source:{body:"\nquery GetAccounts {\n    lastBlock @client {\n        parachainBlockNumber,\n        relaychainBlockNumber\n    }\n    \n    accounts @client {\n        id,\n        name,\n        isActive,\n        balances {\n            assetId,\n            balance\n        }\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}};var k=i(67);const p={id:void 0},y=Object(k.a)("basilisk-active-account"),g=()=>y(p),b=()=>{const e=(()=>{const[e,n]=g();return Object(t.useCallback)((async(e,i)=>{var t;const a=null===(t=e.cache)||void 0===t?void 0:t.readQuery({query:v});if(!(null===a||void 0===a?void 0:a.accounts))return;const d=a.accounts.map((e=>({...e,isActive:e.id===i}))),s=Object(u.find)(d,{isActive:!0});return n({id:null===s||void 0===s?void 0:s.id}),d.forEach((n=>{e.cache.modify({id:e.cache.identify({__typename:n.__typename,id:n.id}),fields:{isActive:e=>n.isActive}})})),await new Promise((e=>setTimeout(e,0))),d}),[n])})();return N(Object(t.useCallback)((async(n,i,t)=>{let{client:a}=t;return e(a,i.id)}),[e]),"setActiveAccount")},N=(e,n)=>{const i=Object(t.useRef)(e);return Object(t.useEffect)((()=>{i.current=e}),[e]),function(){return c.a.debug("Running resolver",n),i.current.apply(void 0,arguments)}};var f=i(207),h=i(205),O=i(34),j={tokens:{AccountData:"OrmlAccountData"}},S=[{AssetPair:{asset_in:"AssetId",asset_out:"AssetId"},Amount:"i128",AmountOf:"Amount",Address:"AccountId",OrmlAccountData:{free:"Balance",frozen:"Balance",reserved:"Balance"},Fee:{numerator:"u32",denominator:"u32"},BalanceInfo:{amount:"Balance",assetId:"AssetId"},Chain:{genesisHash:"Vec<u8>",lastBlockHash:"Vec<u8>"},Currency:"AssetId",CurrencyId:"AssetId",CurrencyIdOf:"AssetId",Intention:{who:"AccountId",asset_sell:"AssetId",asset_buy:"AssetId",amount:"Balance",discount:"bool",sell_or_buy:"IntentionType"},IntentionId:"Hash",IntentionType:{_enum:["SELL","BUY"]},LookupSource:"AccountId",Price:"Balance",ClassId:"u64",TokenId:"u64",ClassData:{is_pool:"bool"},TokenData:{locked:"bool"},ClassInfo:{metadata:"Vec<u8>",total_issuance:"TokenId",owner:"AccountId",data:"ClassData"},TokenInfo:{metadata:"Vec<u8>",owner:"AccountId",data:"TokenData"},ClassInfoOf:"ClassInfo",TokenInfoOf:"TokenInfo",ClassIdOf:"ClassId",TokenIdOf:"TokenId",OrderedSet:"Vec<AssetId>",VestingSchedule:{start:"BlockNumber",period:"BlockNumber",period_count:"u32",per_period:"Compact<Balance>"},VestingScheduleOf:"VestingSchedule",LBPWeight:"u32",WeightCurveType:{_enum:["Linear"]},PoolId:"AccountId",BalanceOf:"Balance",AssetType:{_enum:{Token:"Null",PoolShare:"(AssetId,AssetId)"}},Pool:{owner:"AccountId",start:"BlockNumber",end:"BlockNumber",assets:"AssetPair",initial_weight:"LBPWeight",final_weight:"LBPWeight",weight_curve:"WeightCurveType",fee:"Fee",fee_collector:"AccountId"},AssetDetails:{name:"Vec<u8>",asset_type:"AssetType",existential_deposit:"Balance",locked:"bool"},AssetDetailsT:"AssetDetails",AssetMetadata:{symbol:"Vec<u8>",decimals:"u8"},AssetInstance:"AssetInstanceV1",MultiLocation:"MultiLocationV1",AssetNativeLocation:"MultiLocation",MultiAsset:"MultiAssetV1",Xcm:"XcmV1",XcmOrder:"XcmOrderV1"}];const T={nodeUrl:"ws://localhost:9988",processorUrl:"http://localhost:4000/graphql",appName:"Basilisk UI"},A=Object(k.a)("basilisk-config"),I=()=>A(T);var D=i(85);const B={description:"Get pool account id by asset IDs",params:[{name:"assetInId",type:"u32"},{name:"assetOutId",type:"u32"}],type:"AccountId"},x={xyk:{getPoolAccount:B},lbp:{getPoolAccount:B}},[F,w]=Object(O.a)((()=>{const[{nodeUrl:e}]=I(),[n,i]=Object(t.useState)(void 0),a=Object(t.useMemo)((()=>!n),[n]),d=Object(t.useMemo)((()=>new f.a(e)),[e]),s=Object(t.useMemo)((()=>({...S[0],...D.types})),[]),l=Object(t.useMemo)((()=>({...j,...D.typesAlias})),[]);return Object(t.useEffect)((()=>((async()=>{i(void 0);const e=await h.a.create({provider:d,types:s,typesAlias:l,rpc:x});await e.isReady,i(e)})(),()=>{null===n||void 0===n||n.disconnect()})),[d]),{apiInstance:n,loading:a}})),P="0",E=()=>{const{apiInstance:e,loading:n}=w();return Object(t.useCallback)((async(n,i)=>{if(e&&n)return await(async(e,n,i)=>{var t;const a=[];if(!i||Object(u.includes)(i,P)){const i=await e.query.system.account(n);a.push({assetId:P,balance:null===i||void 0===i?void 0:i.data.free.toString()})}const d=(i=i?i.filter((e=>e!==P)):i)?(await e.query.tokens.accounts.multi(null===(t=i)||void 0===t?void 0:t.map((e=>[n,e])))).map(((e,n)=>({assetId:i[n],balance:e}))):(await e.query.tokens.accounts.entries(n)).map((e=>{let[n,i]=e;return{assetId:n.toHuman()[1],balance:i}}));return null===d||void 0===d||d.forEach((n=>{const i=null===e||void 0===e?void 0:e.createType("AccountData",n.balance).free.toString();a.push({assetId:n.assetId,balance:i})})),a})(e,n,i)}),[e,n])},L=()=>{const e=E();return{balances:N(Object(t.useCallback)((async(n,i)=>{var t;let a;return"LBPPool"!==n.__typename&&"XYKPool"!==n.__typename||(a=[(n=n).assetInId,n.assetOutId]),null===(t=await e(n.id,a))||void 0===t?void 0:t.map((e=>({...e,__typename:"Balance",id:"".concat(n.id,"-").concat(e.assetId)})))}),[e]),"balances")}},C="Vec<BalanceLock>",_=async(e,n,i)=>{const t=Object(u.find)(e.createType(C,await e.query.balances.locks(n)),(e=>e.id.eq(i))),a=(await e.query.tokens.locks.entries(n)).map((e=>{var n;let[i,t]=e;const a=t.toJSON()[0];return{id:null===a||void 0===a?void 0:a.id,amount:null===a||void 0===a||null===(n=a.amount)||void 0===n?void 0:n.toString()}})),d=Object(u.find)(a,(e=>(null===e||void 0===e?void 0:e.id)===i));return t||d},q=()=>{const e=(()=>{const{apiInstance:e,loading:n}=w();return Object(t.useCallback)((async n=>{var i;if(!e||!n)return;const t=Object(u.first)(e.createType("Vec<VestingScheduleOf>",await e.query.vesting.vestingSchedules(n))),a=await _(e,n,"ormlvest");return{remainingVestingAmount:null===a||void 0===a||null===(i=a.amount)||void 0===i?void 0:i.toString(),start:null===t||void 0===t?void 0:t.start.toString(),period:null===t||void 0===t?void 0:t.period.toString(),periodCount:null===t||void 0===t?void 0:t.periodCount.toString(),perPeriod:null===t||void 0===t?void 0:t.perPeriod.toString()}}),[e,n])})();return{vestingSchedule:N(Object(t.useCallback)((async n=>await e(n.id)),[e]),"vestingSchedule")}};var V=i(19),U=i(196),W=i(120);const Q="Account",M=()=>{const[e]=g(),n=Object(t.useCallback)((async(e,n)=>{await Object(V.b)("basilisk-ui");const i=(await Object(V.a)()).map((e=>({id:Object(U.a)(Object(W.a)(e.address),10041),name:e.meta.name,isActive:!1}))).map((n=>({...n,isActive:e==n.id})));return n?Object(u.find)(i,{isActive:n}):i}),[]);return N(Object(t.useCallback)((async(i,t)=>{const a=await n(null===e||void 0===e?void 0:e.id,null===t||void 0===t?void 0:t.isActive);return a?Object(u.isArray)(a)?a.map((e=>({...e,__typename:Q}))):{...a,__typename:Q}:null}),[e,n]),"accounts")};var H=i(89);const G={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetLastBlock"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:112,source:{body:"query GetLastBlock {\n    lastBlock @client {\n        parachainBlockNumber,\n        relaychainBlockNumber\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},[X,R]=Object(O.a)((()=>{const{apiInstance:e,loading:n}=w(),[i,a]=Object(t.useState)(void 0),d=Object(t.useCallback)((()=>{e&&e.derive.chain.subscribeNewBlocks((async n=>{const i=await e.query.parachainSystem.validationData(),t=e.createType("Option<PolkadotPrimitivesV1PersistedValidationData>",i);if(t.isSome){t.toJSON();a({parachainBlockNumber:n.block.header.number.toString(),relaychainBlockNumber:"821"})}}))}),[e]);return Object(t.useEffect)((()=>{n||d()}),[n,d]),i})),Y="LastBlock",K=Y,$=(e,n)=>e.writeQuery({query:G,data:{lastBlock:n}});var z=i(66);const J={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetActiveAccount"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"account"},name:{kind:"Name",value:"accounts"},arguments:[{kind:"Argument",name:{kind:"Name",value:"isActive"},value:{kind:"BooleanValue",value:!0}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"name"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"isActive"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"vestingSchedule"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"remainingVestingAmount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"start"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"period"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"periodCount"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"perPeriod"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:607,source:{body:"# TODO: fetch only balances for the active fee payment asset\nquery GetActiveAccount {\n    lastBlock @client { \n        parachainBlockNumber,\n        relaychainBlockNumber,\n    }\n    \n    account: accounts(isActive: true) @client {\n        id,\n        name,\n        isActive,\n        balances {\n            assetId,\n            balance\n        },\n        vestingSchedule {\n            # figure out why this fragment doesnt work\n            # ...VestingScheduleFields,\n            remainingVestingAmount,\n            start,\n            period,\n            periodCount,\n            perPeriod\n        }\n    } \n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Z=()=>{var e,n;const i=Object(z.a)(),a=Object(m.a)(J,{notifyOnNetworkStatusChange:!0});return Object(t.useEffect)((()=>{i.refetchQueries({})}),[null===(e=a.data)||void 0===e||null===(n=e.account)||void 0===n?void 0:n.id]),a},[ee,ne]=Object(O.a)(Z),ie=async(e,n)=>new Promise((async(i,t)=>{try{i(await e(i,t))}catch(a){console.log("graceful error",a),(a=n.reduce(((e,n)=>n(e)),a))?t(a):i(null)}})),te=e=>{if("Cancelled"!==(null===e||void 0===e?void 0:e.message))return e;c.a.error("Operation presumably cancelled by the user in the Polkadot.js extension")},ae=(e,n,i)=>t=>{let{status:a,events:d=[],dispatchError:s}=t;var l;return a.isFinalized&&c.a.info("operation finalized"),d.forEach((e=>{let{event:{data:n,method:i,section:t},phase:a}=e;console.log("event handler",a.toString(),": ".concat(t,".").concat(i),n.toString())})),a.isInBlock?(console.log("is in block",null===(l=a.createdAtHash)||void 0===l?void 0:l.toString()),(null===s||void 0===s?void 0:s.isModule)?c.a.info("operation unsuccessful",i?i.registry.findMetaError(s.asModule):s):c.a.info("operation successful")):a.isBroadcast?(c.a.info("transaction has been broadcast",a.hash.toHuman()),e()):s?(c.a.error("There was a dispatch error",s),n("Dispatch error")):void 0},de="Polkadot.js is not ready yet",se=()=>{const{apiInstance:e,loading:n}=w();return{claimVestedAmount:N(Object(t.useCallback)((async(i,t,a)=>{var d,s;let{cache:l}=a;const o=(null===t||void 0===t?void 0:t.address)?t.address:null===(d=l.readQuery({query:J}))||void 0===d||null===(s=d.account)||void 0===s?void 0:s.id;if(!o)throw new Error("No Account selected");if(n||!e)throw new Error(de);return await ie((async(n,i)=>{const{signer:t}=await Object(V.c)(o);await e.tx.vesting.claim().signAndSend(o,{signer:t},ae(n,i))}),[te])}),[n,e]),"claimVestedAmount")}},le=e=>e.tx.currencies.transfer,oe=()=>{const{apiInstance:e,loading:n}=w(),i=N(Object(t.useCallback)((async(i,t)=>{let{from:a,to:d,currencyId:s,amount:l}=t;if(!a||!d||!s||!l)throw new Error("Invalid transfer parameters provided");if(n||!e)throw new Error(de);return ie((async(n,i)=>{const{signer:t}=await Object(V.c)(a);await le(e).apply(e,[d,s,l]).signAndSend(a,{signer:t},((e,n,i)=>t=>{let{status:a,dispatchError:d}=t;return a.isFinalized&&c.a.info("operation finalized"),a.isInBlock?(null===d||void 0===d?void 0:d.isModule)?c.a.error("transfer unsuccessful",e.registry.findMetaError(d.asModule)):c.a.info("transfer successful"):a.isBroadcast?(c.a.info("transaction has been broadcast"),n()):d?(c.a.error("There was a dispatch error",e.registry.findMetaError(d.asModule)),i()):void 0})(e,n,i))}),[te])}),[e,n]));return{transferBalance:i}},re="Extension",ce="Config",ue=()=>{const[e]=I(),{apiInstance:n,loading:i}=w();return{config:N(Object(t.useCallback)((async(t,a,d)=>{var s,l,o;let{cache:r}=d;if(!n||i)return;const c=null===(s=r.readQuery({query:J}))||void 0===s||null===(l=s.account)||void 0===l?void 0:l.id;let u=c?null===(o=n.createType("Option<u32>",await n.query.multiTransactionPayment.accountCurrencyMap(c)))||void 0===o?void 0:o.toHuman():null;return u=u||"0",{__typename:ce,id:"Config",...e,feePaymentAsset:u}}),[n,i]))}},me=()=>{const{apiInstance:e,loading:n}=w(),[i,a]=I();return{setConfig:N(Object(t.useCallback)((async(i,t,d)=>{let{cache:s}=d;if(!e||n)return;await ie((async(n,i)=>{var a,d,l;const o=null===(a=s.readQuery({query:J}))||void 0===a||null===(d=a.account)||void 0===d?void 0:d.id;if(!o)return n();const{signer:r}=await Object(V.c)(o);await e.tx.multiTransactionPayment.setCurrency((null===(l=t.config)||void 0===l?void 0:l.feePaymentAsset)||"0").signAndSend(o,{signer:r},((e,n)=>ae(e,n))(n,i))}),[te]);const l=t.config;null===l||void 0===l||delete l.feePaymentAsset,a((()=>l||T))}),[e,n]))}},ve=()=>{const{apiInstance:e,loading:n}=w();return{feePaymentAssets:N(Object(t.useCallback)((async()=>{if(!e||n)return;return(await e.query.multiTransactionPayment.acceptedCurrencies.entries()).map((e=>{const n=e[0].toHuman()[0];return{__typename:"FeePaymentAsset",id:n,assetId:n,fallbackPrice:e[1].toString()}}))}),[e,n]))}},ke=async()=>({xyk:await i.e(4).then(i.bind(null,214)),lbp:await i.e(3).then(i.bind(null,215))}),[pe,ye]=Object(O.a)((()=>{const[e,n]=Object(t.useState)({instance:void 0,loading:!0});return Object(t.useEffect)((()=>{(async()=>{n({instance:await ke(),loading:!1})})()}),[n]),{math:null===e||void 0===e?void 0:e.instance,loading:null===e||void 0===e?void 0:e.loading}})),ge=e=>{let[n,i]=e;return[n.toHuman()[0],i]};var be=i(12),Ne=i.n(be);const fe=new Ne.a("100").multipliedBy(new Ne.a("10").pow("6")),he=e=>new Ne.a(fe).minus(new Ne.a(e)).toFixed(0),Oe=(e,n,i,t)=>e.lbp.calculate_linear_weights(n.startBlock,n.endBlock,i.initial,i.final,t),je=e=>e.readQuery({query:G}),Se={numerator:"2",denominator:"10"},Te=(e,n,i)=>async t=>{var a,d,s;let[l,o]=t;const r=o.toJSON(),c=je(n.cache),u=null===c||void 0===c||null===(a=c.lastBlock)||void 0===a?void 0:a.relaychainBlockNumber;if(!r||!u)return;const m=r.feeCollector.toString(),v=i.createType("BalanceOf",r.repayTarget.toString()).toString(),k={id:l,assetInId:r.assets[0].toString(),assetOutId:r.assets[1].toString(),startBlock:r.start.toString(),endBlock:r.end.toString()},p={initial:r.initialWeight.toString(),final:r.finalWeight.toString()},y={...p,current:Oe(e,k,p,u)},g={initial:he(y.initial),final:he(y.final),current:he(y.current)},b=null===(d=await _(i,m,"0x6c6270636c6c6374"))||void 0===d||null===(s=d.amount)||void 0===s?void 0:s.toString(),N=!(!v||!b)&&new Ne.a(b).gt(new Ne.a(v)),f={numerator:r.fee.numerator.toString(),denominator:r.fee.denominator.toString()};return{...k,assetAWeights:y,assetBWeights:g,repayTargetReached:N,fee:N?f:Se}},Ae=()=>{const{apiInstance:e,loading:n}=w(),{math:i}=ye();return Object(t.useCallback)((async t=>e&&!n&&i?(async(e,n,i)=>await Promise.all((await e.query.lbp.poolData.entries()).map(ge).map(Te(n,i,e)))||[])(e,i,t):[]),[e,n,i])},Ie=()=>{const{apiInstance:e}=w(),{math:n}=ye();return Object(t.useCallback)((async(i,t)=>{if(c.a.debug("useGetLbpPool",e,t,n),e&&t&&n)return(async(e,n,i,t)=>await Te(e,n,i)([t,await i.query.lbp.poolData(t)]))(n,i,e,t)}),[e,n])},De=()=>{const{apiInstance:e,loading:n}=w(),i=Ae(),a=(()=>{const{apiInstance:e,loading:n}=w();return Object(t.useCallback)((async(i,t)=>!e||n?[]:i?[await e.query.xyk.poolAssets(i)].map((e=>[i,e])).map((e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}})):(await e.query.xyk.poolAssets.entries()).map(ge).map((e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}}))||[]),[e,n])})(),d=(()=>{const{apiInstance:e,loading:n}=w();return Object(t.useCallback)((async i=>{if(e&&!n&&i)return(e=>{let[n,i]=e;const t=i.toHuman();if(t)return{id:n,assetInId:t[0],assetOutId:t[1]}})([i,await e.query.xyk.poolAssets(i)])}),[e,n])})(),s=Ie();return N(Object(t.useCallback)((async(t,l,o)=>{if(!e||n||!(null===o||void 0===o?void 0:o.client))return;c.a.debug("useGetPoolsQueryResolver","fetching pools",l);let r=null===l||void 0===l?void 0:l.poolId,u={lbpPoolId:r,xykPoolId:r};if((null===l||void 0===l?void 0:l.assetIds)&&(u=await(async(e,n)=>({lbpPoolId:(await e.rpc.lbp.getPoolAccount(n[0],n[1])).toHuman(),xykPoolId:(await e.rpc.xyk.getPoolAccount(n[0],n[1])).toHuman()}))(e,l.assetIds),c.a.debug("useGetPoolsQueryResolver","found poolIDs",u,e)),u.xykPoolId||u.lbpPoolId){var m,v,k,p;let e=await s(o.client,u.lbpPoolId),n=await d(u.xykPoolId);c.a.debug("useGetPoolsQueryResolver","found pools by poolIDs",e,n),(null===(m=n)||void 0===m?void 0:m.assetInId)===(null===(v=n)||void 0===v?void 0:v.assetOutId)&&(n=void 0),(null===(k=e)||void 0===k?void 0:k.assetInId)===(null===(p=e)||void 0===p?void 0:p.assetOutId)&&(e=void 0),c.a.debug("useGetPoolsQueryResolver","eliminated default value pools",e,n);const i=n||e;return c.a.debug("useGetPoolsQueryResolver","returning a single pool",i),i&&{...i,__typename:n?"XYKPool":e?"LBPPool":void 0}}const[y,g]=await Promise.all([i(o.client),a()]);return c.a.debug("useGetPoolsQueryResolver","returning multiple pools",[y,g]),[].concat(null===y||void 0===y?void 0:y.map((e=>({...e,__typename:"LBPPool"})))).concat(null===g||void 0===g?void 0:g.map((e=>({...e,__typename:"XYKPool"}))))}),[i]),"pools")},Be=()=>{const{apiInstance:e,loading:n}=w(),i=(()=>{const{apiInstance:e,loading:n}=w();return Object(t.useCallback)((async()=>{if(e&&!n)return(await(null===e||void 0===e?void 0:e.query.assetRegistry.assetIds.entries())).map((e=>n=>{let[i,t]=n;return{id:e.createType("Option<u32>",t).toHuman()}})(e))||[]}),[e,n])})();return N(Object(t.useCallback)((async()=>{var e;return null===(e=await i())||void 0===e?void 0:e.map((e=>({...e,__typename:"Asset"})))}),[e,n]))};let xe,Fe,we,Pe,Ee,Le;!function(e){e.D30="D30",e.D7="D7",e.H24="H24",e.H1="H1"}(xe||(xe={})),function(e){e.PRICE="PRICE",e.VOLUME="VOLUME",e.WEIGHTS="WEIGHTS"}(Fe||(Fe={})),function(e){e.LBP="LBP",e.XYK="XYK"}(we||(we={})),function(e){e.IsError="IsError",e.IsReady="IsReady",e.Unapproved="Unapproved",e.IsBroadcast="isBroadcast",e.IsFinalized="isFinalized",e.IsInBlock="isInBlock"}(Pe||(Pe={})),function(e){e.Buy="Buy",e.Sell="Sell"}(Ee||(Ee={})),function(e){e.AddLiquidity="AddLiquidity",e.Buy="Buy",e.RemoveLiquidity="RemoveLiquidity",e.Sell="Sell",e.SetFeeAsset="SetFeeAsset",e.Transfer="Transfer",e.Xcm="XCM"}(Le||(Le={}));const Ce=e=>{var n;return null===(n=e.readQuery({query:J,returnPartialData:!0}))||void 0===n?void 0:n.account},_e=async(e,n,i,t,a,d)=>{await ie((async(s,l)=>{const o=Ce(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found"));const{signer:c}=await Object(V.c)(r);await n.tx.lbp.buy(i,t,a,d).signAndSend(r,{signer:c},((e,n,i)=>ae(e,n,i))(s,l,n))}),[te])},qe=async(e,n,i,t,a,d)=>{await ie((async(s,l)=>{const o=Ce(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found"));const{signer:c}=await Object(V.c)(r);await n.tx.lbp.sell(i,t,a,d).signAndSend(r,{signer:c},((e,n,i)=>ae(e,n,i))(s,l,n))}),[te])},Ve={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetActionLog"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"actionLog"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"status"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"account"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"action"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"detail"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"clientDetails"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:119,source:{body:"query GetActionLog {\n  actionLog @client {\n    id\n    status\n    account\n    action\n    detail\n    clientDetails\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Ue=e=>{var n;return null===(n=e.readQuery({query:Ve,returnPartialData:!0}))||void 0===n?void 0:n.actionLog},We=(e,n)=>{const i=Ue(n)||[];return Object(u.find)(i,{id:e})},Qe="ClientUserAction",Me=(e,n)=>{const i=Ue(e)||[];return c.a.debug("UserAction: add user action ".concat(n.action," (").concat(n.id," - ").concat(n.status,")")),e.writeQuery({query:Ve,data:{actionLog:[...i,{...n,__typename:Qe}]}})},He=(e,n,i,t)=>{e.modify({id:e.identify({id:n,__typename:Qe}),fields:{status:e=>i?(c.a.debug("UserAction: updating action status ".concat(i," (").concat(n,")")),i):e,clientDetails:e=>t?(c.a.debug("UserAction: updating action in block hash ".concat(t," (").concat(n,")")),{...e,inBlockHash:t}):e}})},Ge=(e,n)=>{const i=Object(u.find)(n,(n=>e.events.system.ExtrinsicFailed.is(n.event)));if(i){const[e]=i.event.data,n=e.toString();return c.a.error("UserAction: ".concat(i.event.section,".").concat(i.event.method,":: ExtrinsicFailed:: ").concat(n)),{result:!1,reason:n}}return{result:void 0!==Object(u.find)(n,(n=>e.events.system.ExtrinsicSuccess.is(n.event))),reason:void 0}},Xe=async(e,n)=>new Promise((async(i,t)=>{try{i(await e(i,t))}catch(a){c.a.error("graceful error",a);let e=n.reduce(((e,n)=>n(e)),a);a?t(e):i(null)}})),Re=e=>{if("Cancelled"!==(null===e||void 0===e?void 0:e.message))return e;c.a.error("Operation presumably cancelled by the user in the Polkadot.js extension")},Ye=(e,n,i,t,a)=>async e=>{let{status:n,events:d=[],dispatchError:s}=e;if(n.isReady){var l;const e=je(t);Me(t,{...a(),status:Pe.IsReady,clientDetails:{blockHeight:null===e||void 0===e||null===(l=e.lastBlock)||void 0===l?void 0:l.parachainBlockNumber,inBlockHash:void 0}})}if(n.isBroadcast&&He(t,a().id,Pe.IsBroadcast),n.isInBlock){const{result:e,reason:s}=Ge(i,d);e?He(t,a().id,Pe.IsInBlock,n.asInBlock.hash.toHex()):(c.a.error(s),He(t,a().id,Pe.IsError))}if(n.isFinalized){var o;He(t,a().id,Pe.IsFinalized);const e=We(a().id,t);let s=!0;if((null===e||void 0===e||null===(o=e.clientDetails)||void 0===o?void 0:o.inBlockHash)!==n.asFinalized.hash.toHex()){c.a.debug("UserAction: checking ExtrinsicSuccess after IsFinalized due to InBlock Hash mismatch");const{result:e,reason:n}=Ge(i,d);s=e,e?c.a.error(n):He(t,a().id,Pe.IsError)}if(s){const e=n.asFinalized.toHex(),d=await i.rpc.chain.getBlock(e),s=d.block.header.number.toString(),l=a().id;let o=Object(u.findIndex)(d.block.extrinsics,(e=>e.hash.toHex()===l));if(-1===o)return void c.a.warn("UserAction: Transaction index not found in block ",l);const r=((e,n,i)=>{const t="".concat(String(e).padStart(10,"0")),a=void 0!==n?"-".concat(String(n).padStart(6,"0")):"",d=i.startsWith("0x")?i.substring(2):i,s=d.length<5?d.padEnd(5,"0"):d.slice(0,5);return"".concat(t).concat(a,"-").concat(s)})(s,o,e);((e,n,i)=>{let t=We(n,e);t&&(c.a.debug("UserAction: setting final user action id ".concat(i," (").concat(n,")")),e.evict({id:e.identify({id:n,__typename:Qe})}),Me(e,{...t,id:i,__typename:Qe}))})(t,a().id,r)}}},Ke=async(e,n,i,t,a,d)=>{await Xe((async(s,l)=>{const o=Ce(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found!"));const{signer:c}=await Object(V.c)(r),u=n.tx.xyk.buy(i,t,a,d,false);await u.signAndSend(r,{signer:c},Ye(0,0,n,e,(()=>({id:u.hash.toHex(),account:r,action:Le.Buy,status:Pe.Unapproved}))))}),[Re])},$e=async(e,n,i,t,a,d)=>{await Xe((async(s,l)=>{const o=Ce(e),r=null===o||void 0===o?void 0:o.id;if(!r)return l(new Error("No active account found!"));const{signer:c}=await Object(V.c)(r),u=n.tx.xyk.sell(i,t,a,d,false);await u.signAndSend(r,{signer:c},Ye(0,0,n,e,(()=>({id:u.hash.toString(),account:r,action:Le.Sell,status:Pe.Unapproved}))))}),[Re])},ze=()=>({submitTrade:(()=>{const{apiInstance:e}=w();return N(Object(t.useCallback)((async(n,i,t)=>{let{cache:a}=t;if(i&&e){if((null===i||void 0===i?void 0:i.poolType)===we.XYK&&(null===i||void 0===i?void 0:i.tradeType)===Ee.Buy)return await Ke(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===we.XYK&&(null===i||void 0===i?void 0:i.tradeType)===Ee.Sell)return await $e(a,e,i.assetInId,i.assetOutId,i.assetInAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===we.LBP&&(null===i||void 0===i?void 0:i.tradeType)===Ee.Buy)return await _e(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);if((null===i||void 0===i?void 0:i.poolType)===we.LBP&&(null===i||void 0===i?void 0:i.tradeType)===Ee.Sell)return await qe(a,e,i.assetOutId,i.assetInId,i.assetOutAmount,i.amountWithSlippage);throw new Error("We dont support this trade type yet")}}),[Ke,$e,e]))})()}),Je=()=>({actionLog:N(Object(t.useCallback)((async(e,n)=>{let{cache:i}=e;return n?We(n.id,i):Ue(i)}),[]),"actionLog")}),Ze=()=>{const{Query:e,Account:n}={Query:{accounts:M()},Account:{...L(),...q()}},{Query:i,XYKPool:a,LBPPool:d}=(()=>{const e=De(),n={...L()};return{Query:{pools:e},XYKPool:n,LBPPool:n}})();return{Query:{...e,extension:N(Object(t.useCallback)((async()=>{const e=await Object(V.b)("basilisk-ui");return{__typename:re,id:"Extension",isAvailable:!!e.length}}),[])),...ue(),...ve(),...L(),...i,assets:Be(),...Je()},Mutation:{setActiveAccount:b(),...se(),...oe(),...me(),...ze()},Account:n,XYKPool:a,LBPPool:d}},en={kind:"Document",definitions:[{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Balance"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assetId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balance"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"VestingSchedule"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"remainingVestingAmount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"start"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"period"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"periodCount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"perPeriod"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Account"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"name"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"isActive"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"vestingSchedule"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"VestingSchedule"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"accounts"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Account"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"account"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Account"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Mutation"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"setActiveAccount"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Account"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LastBlock"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"relaychainBlockNumber"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"lastBlock"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"LastBlock"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Config"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"nodeUrl"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"processorUrl"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"appName"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feePaymentAsset"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"config"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Config"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Extension"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"isAvailable"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"extension"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Extension"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"FeePaymentAsset"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assetId"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"fallbackPrice"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"feePaymentAssets"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"FeePaymentAsset"}}}},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"PoolType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"LBP"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"XYK"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"TradeType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"Buy"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"Sell"},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LBPAssetWeights"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"initial"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"final"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"current"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Fee"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"numerator"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"denominator"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"LBPPool"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"fee"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Fee"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"repayTargetReached"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Boolean"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetAWeights"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"LBPAssetWeights"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetBWeights"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"LBPAssetWeights"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"startBlock"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"endBlock"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"XYKPool"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"balances"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Balance"}}}},directives:[]}]},{kind:"UnionTypeDefinition",name:{kind:"Name",value:"Pool"},directives:[],types:[{kind:"NamedType",name:{kind:"Name",value:"LBPPool"}},{kind:"NamedType",name:{kind:"Name",value:"XYKPool"}}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"pools"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Pool"}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"_tradeType"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"TradeType"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"Asset"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"assets"},arguments:[],type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Asset"}}}},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"UserActionType"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"Buy"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"Sell"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"AddLiquidity"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"RemoveLiquidity"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"SetFeeAsset"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"Transfer"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"XCM"},directives:[]}]},{kind:"EnumTypeDefinition",name:{kind:"Name",value:"Status"},directives:[],values:[{kind:"EnumValueDefinition",name:{kind:"Name",value:"Unapproved"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"IsReady"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"isBroadcast"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"isInBlock"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"isFinalized"},directives:[]},{kind:"EnumValueDefinition",name:{kind:"Name",value:"IsError"},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"SellActionDetail"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"poolId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetIn"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOut"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInAmount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutAmount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"sellPrice"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feeAsset"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feeAmount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"BuyActionDetail"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"poolId"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOut"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetIn"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetOutAmount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"assetInAmount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"buyPrice"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feeAsset"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"feeAmount"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}]},{kind:"UnionTypeDefinition",name:{kind:"Name",value:"UserActionDetail"},directives:[],types:[{kind:"NamedType",name:{kind:"Name",value:"SellActionDetail"}},{kind:"NamedType",name:{kind:"Name",value:"BuyActionDetail"}}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"ClientUserActionDetail"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"blockHeight"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"inBlockHash"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"ClientUserAction"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"status"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Status"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"account"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"action"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UserActionType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"detail"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"UserActionDetail"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"clientDetails"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"ClientUserActionDetail"}},directives:[]}]},{kind:"ObjectTypeDefinition",name:{kind:"Name",value:"UserAction"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"id"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"status"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"Status"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"account"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"action"},arguments:[],type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UserActionType"}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"detail"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"UserActionDetail"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"parachainBlockHeight"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"actionLog"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"ClientUserAction"}}}}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"action"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"ClientUserAction"}},directives:[]},{kind:"FieldDefinition",name:{kind:"Name",value:"userActions"},arguments:[],type:{kind:"NonNullType",type:{kind:"ListType",type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"UserAction"}}}}},directives:[]}]},{kind:"ObjectTypeExtension",name:{kind:"Name",value:"Query"},interfaces:[],directives:[],fields:[{kind:"FieldDefinition",name:{kind:"Name",value:"_empty"},arguments:[],type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}]}],loc:{start:0,end:4672,source:{body:"type Balance {\n    assetId: String!,\n    balance: String!\n}# https://github.com/open-web3-stack/open-runtime-module-library/blob/master/vesting/src/lib.rs#L11\ntype VestingSchedule {\n    # total locked amoount left to eventually be claimed\n    remainingVestingAmount: String,\n    # since this block\n    start: String,\n    # every `period` blocks\n    period: String,\n    # for number of periods\n    periodCount: String,\n    # claimable amount per period\n    perPeriod: String\n}#import \"./../../balances/graphql/Balance.graphql\"\n#import './../../vesting/graphql/VestingSchedule.graphql'\n\ntype Account {\n    id: String!,\n    name: String,\n    isActive: Boolean!,\n    balances: [Balance!]!,\n    vestingSchedule: VestingSchedule!\n}\n\nextend type Query {\n    accounts: [Account!]!\n    account: Account\n}\n\nextend type Mutation {\n    setActiveAccount: Account\n}type LastBlock {\n    id: String!\n    # yes, this is correct\n    parachainBlockNumber: String,\n    relaychainBlockNumber: String,\n}\n\nextend type Query {\n    lastBlock: LastBlock\n}type Config {\n    nodeUrl: String!,\n    processorUrl: String!,\n    appName: String!,\n    feePaymentAsset: String\n}\n\nextend type Query {\n    config: Config!\n}type Extension {\n    isAvailable: Boolean\n}\n\nextend type Query {\n    extension: Extension!\n}type FeePaymentAsset {\n    assetId: String,\n    # This price has 18 digit precision, instead of the usual 12\n    fallbackPrice: String\n}\n\n\nextend type Query {\n    feePaymentAssets: [FeePaymentAsset!]\n}#import './../../balances/graphql/Balance.graphql'\n\nenum PoolType {\n    LBP\n    XYK\n}\n\nenum TradeType {\n    Buy,\n    Sell\n}\n\n# figure out how to create a union between two types\n# that extend an interface, apparently this isnt possible as of now\n# \n# interface Pool {\n#     poolType: PoolType!,\n#     assetInId: String!,\n#     assetOutId: String!,\n#     assetABalance: String!,\n#     assetBBalance: String!,\n# }\n\ntype LBPAssetWeights {\n    initial: String!,\n    final: String!,\n    current: String!,\n}\n\ntype Fee {\n    numerator: String!,\n    denominator: String!,\n}\n\n# TODO: figure out which fields are populated at creation and at update\ntype LBPPool {\n    id: String!,\n    assetInId: String!,\n    assetOutId: String!,\n    balances: [Balance!]\n    fee: Fee!,\n    repayTargetReached: Boolean!,\n    assetAWeights: LBPAssetWeights!,\n    assetBWeights: LBPAssetWeights!,\n    startBlock: String!,\n    endBlock: String!\n}\n\ntype XYKPool {\n    id: String!,\n    assetInId: String!,\n    assetOutId: String!,\n    balances: [Balance!]\n}\n\nunion Pool = LBPPool | XYKPool\n\nextend type Query {\n    pools: [Pool!]\n    # Just to make sure TradeType makes it through the codegen\n    # otherwise it'd be ignored\n    _tradeType: TradeType\n}type Asset {\n    id: String!\n}\n\nextend type Query {\n    assets: [Asset!]\n}enum UserActionType {\n  Buy # LBP & XYK\n  Sell # LBP & XYK\n  AddLiquidity # XYK\n  RemoveLiquidity # XYK\n  SetFeeAsset\n  Transfer\n  XCM # cross chain transfer\n}\n\nenum Status {\n  Unapproved\n  IsReady\n  isBroadcast\n  isInBlock\n  isFinalized\n  IsError\n}\n\ntype SellActionDetail {\n  poolId: String!\n  assetIn: String!\n  assetOut: String!\n  assetInAmount: String!\n  assetOutAmount: String!\n  sellPrice: String!\n  feeAsset: String!\n  feeAmount: String!\n}\n\ntype BuyActionDetail {\n  poolId: String!\n  assetOut: String!\n  assetIn: String!\n  assetOutAmount: String!\n  assetInAmount: String!\n  buyPrice: String!\n  feeAsset: String!\n  feeAmount: String!\n}\n\nunion UserActionDetail = SellActionDetail | BuyActionDetail # | LiquidityAddedActionDetail | LiquidityRemovedActionDetail;\ntype ClientUserActionDetail {\n  blockHeight: String\n  inBlockHash: String\n}\n\ntype ClientUserAction {\n  id: String!\n  status: Status!\n  account: String!\n  action: UserActionType!\n  detail: UserActionDetail\n  clientDetails: ClientUserActionDetail\n}\ntype UserAction {\n  id: String!\n  status: Status!\n  account: String!\n  action: UserActionType!\n  detail: UserActionDetail\n  parachainBlockHeight: String\n}\n\nextend type Query {\n  actionLog: [ClientUserAction!]!\n  action: ClientUserAction\n  userActions: [UserAction!]!\n}\n#import './hooks/accounts/graphql/Accounts.graphql'\n#import './hooks/lastBlock/graphql/LastBlock.graphql'\n#import './hooks/config/graphql/Config.graphql'\n#import './hooks/vesting/graphql/VestingSchedule.graphql'\n#import './hooks/polkadotJs/graphql/Extension.graphql'\n#import './hooks/feePaymentAssets/graphql/FeePaymentAssets.graphql'\n#import './hooks/pools/graphql/Pool.graphql'\n#import './hooks/assets/graphql/Asset.graphql'\n#import './hooks/actionLog/graphql/UserAction.graphql'\n\nextend type Query {\n  # just a placeholder to make the codegen not complain about\n  # root query not being defined\n  _empty: String\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}}}},nn=()=>{const e=Ze(),[{processorUrl:n}]=I(),i=Object(t.useMemo)((()=>{const e=new l.a;return Object(H.b)({cache:e,storage:new H.a(window.localStorage)}).then((()=>{})),e}),[]),a=Object(t.useMemo)((()=>new o.a({uri:n,cache:i,connectToDevTools:!0,queryDeduplication:!0,resolvers:e,typeDefs:en})),[e,n,i]);return(e=>{const n=R();Object(t.useEffect)((()=>{$(e.cache,{__typename:Y,id:K,...n})}),[]),Object(t.useEffect)((()=>{var i;if(!n)return;const t=e.cache.readQuery({query:G});(null===t||void 0===t||null===(i=t.lastBlock)||void 0===i?void 0:i.parachainBlockNumber)?e.refetchQueries({updateCache(e){$(e,{__typename:Y,id:K,...n})}}):$(e.cache,{__typename:Y,id:K,...n})}),[n])})(a),a};var tn=i(202);const an={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetExtension"},variableDefinitions:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"extension"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"isAvailable"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:72,source:{body:"query GetExtension {\n    extension @client {\n        isAvailable\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},dn=()=>Object(m.a)(an,{notifyOnNetworkStatusChange:!0}),[sn,ln]=Object(O.a)((()=>Object(tn.a)(an,{notifyOnNetworkStatusChange:!0})));var on=i(4);const rn=e=>{let{children:n}=e;const i=nn();return Object(on.jsx)(s.a,{client:i,children:n})},cn=e=>{let{children:n}=e;return Object(on.jsx)(sn,{children:n})},un=e=>{let{children:n}=e;return Object(on.jsx)(F,{children:Object(on.jsx)(pe,{children:Object(on.jsx)(X,{children:Object(on.jsx)(rn,{children:Object(on.jsx)(cn,{children:n})})})})})};var mn=i(33),vn=i(11);const kn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetPoolByAssets"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"lastBlock"},arguments:[],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"parachainBlockNumber"},arguments:[],directives:[]}]}},{kind:"Field",alias:{kind:"Name",value:"pool"},name:{kind:"Name",value:"pools"},arguments:[{kind:"Argument",name:{kind:"Name",value:"assetIds"},value:{kind:"ListValue",values:[{kind:"Variable",name:{kind:"Name",value:"assetInId"}},{kind:"Variable",name:{kind:"Name",value:"assetOutId"}}]}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetInId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetOutId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balances"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"assetId"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"balance"},arguments:[],directives:[]}]}},{kind:"Field",name:{kind:"Name",value:"repayTarget"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetAWeights"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"assetBWeights"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"startBlock"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"endBlock"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"fee"},arguments:[],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"numerator"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"denominator"},arguments:[],directives:[]}]}}]}}]}}],loc:{start:0,end:612,source:{body:"query GetPoolByAssets($assetInId: String!, $assetOutId: String!) {\n    lastBlock @client {\n        parachainBlockNumber\n    }\n    \n    pool: pools(assetIds: [$assetInId, $assetOutId]) @client {\n        id,\n        assetInId,\n        assetOutId,\n        balances {\n            assetId,\n            balance\n        },\n\n        # TODO: investigate how caching works when these fields are missing for XYK pools\n        # lbp fields,\n        repayTarget,\n        assetAWeights,\n        assetBWeights,\n        startBlock,\n        endBlock,\n        fee {\n            numerator,\n            denominator\n        }\n    }\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},pn=e=>{let{assetIdInputProps:n,assetAmountInputProps:i,disabled:t}=e;return Object(on.jsxs)("div",{children:[Object(on.jsxs)("div",{children:[Object(on.jsx)("b",{children:"AssetId:"})," ",Object(on.jsx)("br",{}),Object(on.jsx)("input",{disabled:t,type:"text",...n})]}),Object(on.jsxs)("div",{children:[Object(on.jsx)("b",{children:"Asset amount:"})," ",Object(on.jsx)("br",{}),Object(on.jsx)("input",{disabled:t,type:"text",...i})]})]})},yn=new Ne.a(10).pow(12),gn=(new Ne.a(10).pow(18),e=>e&&new Ne.a(e).dividedBy(yn).toFixed(12)),bn=new Ne.a(10).pow(12),Nn=(new Ne.a(10).pow(18),e=>e&&new Ne.a(e).multipliedBy(bn).toFixed(0));var fn=i(115);const hn=(e,n)=>{var i,a;const[d,s]=Object(t.useState)(!1),l=null===(i=e.control._fields[n])||void 0===i||null===(a=i._f)||void 0===a?void 0:a.ref;return Object(t.useEffect)((()=>{if(!l)return;const e=null===l||void 0===l?void 0:l.addEventListener("input",(()=>s((e=>!e))));return()=>null===l||void 0===l?void 0:l.removeEventListener("input",e)}),[l]),d};var On=i(204);const jn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"SubmitTrade"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetInAmount"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"assetOutAmount"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"amountWithSlippage"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"poolType"}},type:{kind:"NamedType",name:{kind:"Name",value:"PoolType"}},directives:[]},{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"tradeType"}},type:{kind:"NamedType",name:{kind:"Name",value:"TradeType"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"submitTrade"},arguments:[{kind:"Argument",name:{kind:"Name",value:"assetInId"},value:{kind:"Variable",name:{kind:"Name",value:"assetInId"}}},{kind:"Argument",name:{kind:"Name",value:"assetOutId"},value:{kind:"Variable",name:{kind:"Name",value:"assetOutId"}}},{kind:"Argument",name:{kind:"Name",value:"tradeType"},value:{kind:"Variable",name:{kind:"Name",value:"tradeType"}}},{kind:"Argument",name:{kind:"Name",value:"poolType"},value:{kind:"Variable",name:{kind:"Name",value:"poolType"}}},{kind:"Argument",name:{kind:"Name",value:"assetInAmount"},value:{kind:"Variable",name:{kind:"Name",value:"assetInAmount"}}},{kind:"Argument",name:{kind:"Name",value:"assetOutAmount"},value:{kind:"Variable",name:{kind:"Name",value:"assetOutAmount"}}},{kind:"Argument",name:{kind:"Name",value:"amountWithSlippage"},value:{kind:"Variable",name:{kind:"Name",value:"amountWithSlippage"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}]}]}}],loc:{start:0,end:505,source:{body:"mutation SubmitTrade(\n    $assetInId: String!, \n    $assetOutId: String!,\n    $assetInAmount: String!,\n    $assetOutAmount: String!,\n    $amountWithSlippage: String!,\n    $poolType: PoolType,\n    $tradeType: TradeType\n) {\n    submitTrade(\n        assetInId: $assetInId\n        assetOutId: $assetOutId,\n        tradeType: $tradeType,\n        poolType: $poolType,\n        assetInAmount: $assetInAmount,\n        assetOutAmount: $assetOutAmount,\n        amountWithSlippage: $amountWithSlippage\n    ) @client\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Sn=(e,n,i,a)=>{const[d]=Object(On.a)(jn,{notifyOnNetworkStatusChange:!0});return Object(t.useCallback)((t=>{let{assetInId:s,assetOutId:l,assetInAmount:o,assetOutAmount:r}=t;if(!a)throw new Error("Can't submit a trade mutation without a pool");if(o=Nn(o),r=Nn(r),!s||!l||!o||!r||!(null===i||void 0===i?void 0:i.spotPriceAmount))throw new Error("Can't submit a trade mutation without all the required arguments");const u=((e,n,i)=>{let t=new Ne.a(e).multipliedBy(new Ne.a(n).dividedBy(100));const a=new Ne.a(e);return(i===Ee.Buy?a.plus(t):a.minus(t)).toFixed(0)})(null===i||void 0===i?void 0:i.spotPriceAmount,n,e);c.a.debug("TradeForm.useHandleSubmit","amountWithSlippage",{spotPriceAmount:i.spotPriceAmount,amountWithSlippage:u,tradeType:e});const m="LBPPool"===a.__typename?we.LBP:we.XYK;d({variables:{tradeType:e,assetInId:s,assetInAmount:o,assetOutId:l,assetOutAmount:r,amountWithSlippage:u,poolType:m}})}),[d,a,e,i])},Tn=(e,n,i,t,a)=>{var d,s;const l=null===(d=Object(u.find)(n.balances,{assetId:i}))||void 0===d?void 0:d.balance,o=null===(s=Object(u.find)(n.balances,{assetId:t}))||void 0===s?void 0:s.balance;if(!l||!o)throw new Error("Can't find the required balances in the pool");return((e,n,i,t)=>e.xyk.calculate_out_given_in(n,i,t))(e,l,o,a)},An=(e,n,i)=>{var t,a;return{assetABalance:null===(t=Object(u.find)(e.balances,{assetId:n}))||void 0===t?void 0:t.balance,assetBBalance:null===(a=Object(u.find)(e.balances,{assetId:i}))||void 0===a?void 0:a.balance}},In=(e,n,i)=>({assetInWeight:n===e.assetInId?e.assetAWeights.current:e.assetBWeights.current,assetOutWeight:i===e.assetOutId?e.assetBWeights.current:e.assetAWeights.current}),Dn=(e,n,i,t,a)=>{const{assetABalance:d,assetBBalance:s}=An(n,i,t);if(!d||!s)throw new Error("Can't find the required balances in the pool");const{assetInWeight:l,assetOutWeight:o}=In(n,i,t);return((e,n,i,t,a,d)=>e.lbp.calculate_in_given_out(n,i,t,a,d))(e,d,s,l,o,a)},Bn=(e,n,i,t,a)=>{const{assetABalance:d,assetBBalance:s}=An(n,i,t);if(!d||!s)throw new Error("Can't find the required balances in the pool");const{assetInWeight:l,assetOutWeight:o}=In(n,i,t);return((e,n,i,t,a,d)=>e.lbp.calculate_out_given_in(n,i,t,a,d))(e,d,s,l,o,a)},xn=(e,n,i,t,a)=>{const{assetABalance:d,assetBBalance:s}=An(n,i,t);if(!d||!s)throw new Error("Can't find the required balances in the pool");return((e,n,i,t)=>e.xyk.calculate_in_given_out(n,i,t))(e,d,s,a)},Fn=(e,n,i)=>{const t=[e.assetInId,e.assetOutId];return t.includes(n)&&t.includes(i)},wn=(e,n)=>{if(!e||!n)return;const i=new Ne.a(e);return new Ne.a(n).minus(i).dividedBy(i)},Pn=(e,n,i)=>{const t=new Ne.a(e).multipliedBy(gn(i)).toFixed(0),a=wn(t,n);if(!a||a.isNaN())return;Ne.a.config({ROUNDING_MODE:Ne.a.ROUND_UP});return{percentualSlippage:new Ne.a(a).multipliedBy(100).abs().toFixed(10),spotPriceAmount:t}},En=(e,n,i,t)=>{if((null===n||void 0===n?void 0:n.aToB)&&(null===n||void 0===n?void 0:n.bToA)&&i&&t)return Pn.apply(null,e===Ee.Buy?[n.bToA,i,t]:[n.aToB,t,i])};var Ln=i(209);var Cn={appName:"basilisk-ui",xykFee:{numerator:"2",denominator:"1000"}};const _n=e=>new Ne.a(e.numerator).dividedBy(e.denominator).multipliedBy("100").toFixed(2),qn=e=>e?"XYKPool"===e.__typename?Cn.xykFee:e.fee:void 0,Vn="5",Un="5",Wn=(e,n)=>{const i=e.watch("autoSlippage"),a=Object(t.useMemo)((()=>e.getValues("autoSlippage")),[i]);return Object(t.useEffect)((()=>{if(!a)return;const i=n?"XYKPool"===(null===n||void 0===n?void 0:n.__typename)?Vn:Un:Vn,t=(d=i,(s=qn(n))?new Ne.a(d).plus(_n(s)).toFixed(2):d);var d,s;c.a.debug("TradeForm.useCalculateAllowedSlippage","allowedSlippageWithFee",t),e.setValue("allowedSlippage",t)}),[n,a]),{allowedSlippageInputDisabled:a}},Qn=e=>{let{pool:n,loading:i,onAssetIdsChange:a,assetIds:d,spotPrice:s}=e;const l=(e=>{let{assetInId:n,assetOutId:i}=e;return Object(fn.a)({defaultValues:{assetInId:n,assetOutId:i,assetInAmount:"0",assetOutAmount:"0",allowedSlippage:"5",autoSlippage:!0}})})(d),o=(e=>{const n=qn(e);if(n)return _n(n)})(n),r=(e=>{const[n,i]=Object(t.useState)(Ee.Sell),a=hn(e,"assetInAmount"),d=hn(e,"assetInId"),s=hn(e,"assetOutAmount"),l=hn(e,"assetOutId");return Object(t.useEffect)((()=>{c.a.debug("TradeForm.setTradeType",Ee.Sell),i(Ee.Sell)}),[a,d]),Object(t.useEffect)((()=>{c.a.debug("TradeForm.setTradeType",Ee.Buy),i(Ee.Buy)}),[s,l]),n})(l);((e,n)=>{const[i,a]=e.watch(["assetInId","assetOutId"]);Object(t.useEffect)((()=>{c.a.debug("TradeForm.useHandleAssetIdsChange",i,a),n(i,a)}),[i,a])})(l,a),((e,n,i)=>{const{math:a}=ye();let[d,s]=e.watch(["assetInId","assetInAmount"]),[l,o]=e.watch(["assetOutId","assetOutAmount"]);s=Nn(s),o=Nn(o);const r=Object(t.useMemo)((()=>"XYKPool"===(null===i||void 0===i?void 0:i.__typename)?Tn:Bn),[i]),u=Object(t.useMemo)((()=>"XYKPool"===(null===i||void 0===i?void 0:i.__typename)?xn:Dn),[i]);Object(t.useEffect)((()=>{if(!i||!a||!l||!s)return;if(!Fn(i,d,l))return;if(n!==Ee.Sell)return;const t=r(a,i,d,l,s);c.a.debug("TradeForm.useCalculateInAndOut","outAmount",t),e.setValue("assetOutAmount",gn(t))}),[s,d,l,n,i]),Object(t.useEffect)((()=>{if(!i||!a||!l||!o)return;if(!Fn(i,d,l))return;if(n!==Ee.Buy)return;const t=u(a,i,d,l,o);c.a.debug("TradeForm.useCalculateInAndOut","inAmount",gn(t)),e.setValue("assetInAmount",gn(t))}),[o,d,l,n,i])})(l,r,n),((e,n)=>{const i=Object(Ln.a)(null===n||void 0===n?void 0:n.id);Object(t.useEffect)((()=>{Object(u.isEqual)(i,null===n||void 0===n?void 0:n.id)||(e.resetField("assetInAmount"),e.resetField("assetOutAmount"))}),[i,null===n||void 0===n?void 0:n.id])})(l,n);const m=En(r,s,Nn(l.getValues("assetInAmount")),Nn(l.getValues("assetOutAmount"))),v=Sn(r,l.getValues("allowedSlippage"),m,n),{allowedSlippageInputDisabled:k}=Wn(l,n);return Object(on.jsx)("div",{children:Object(on.jsxs)("form",{onSubmit:l.handleSubmit(v),children:[Object(on.jsx)("p",{children:r}),Object(on.jsx)(pn,{assetIdInputProps:l.register("assetInId"),assetAmountInputProps:l.register("assetInAmount")}),Object(on.jsx)("br",{}),Object(on.jsx)(pn,{assetIdInputProps:l.register("assetOutId"),assetAmountInputProps:l.register("assetOutAmount")}),Object(on.jsxs)("div",{children:[Object(on.jsx)("b",{children:"Allowed slippage"}),Object(on.jsx)("br",{}),Object(on.jsx)("input",{type:"text",disabled:k,...l.register("allowedSlippage")}),Object(on.jsx)("br",{}),Object(on.jsx)("b",{children:"Auto slippage"}),Object(on.jsx)("input",{type:"checkbox",...l.register("autoSlippage")})]}),Object(on.jsx)("br",{}),Object(on.jsxs)("p",{children:[Object(on.jsx)("b",{children:"Slippage:"})," ",null===m||void 0===m?void 0:m.percentualSlippage," / ",gn(null===m||void 0===m?void 0:m.spotPriceAmount)]}),Object(on.jsxs)("p",{children:[Object(on.jsx)("b",{children:"Fee:"})," ",o,"%"]}),Object(on.jsx)("button",{disabled:i,type:"submit",children:"Trade"})]})})},Mn=e=>{let{spotPrice:n,poolLiquidity:i}=e;return Object(on.jsxs)("div",{children:[Object(on.jsx)("p",{children:"TradeChart"}),Object(on.jsxs)("div",{children:[Object(on.jsx)("b",{children:"Spot price"}),Object(on.jsx)("br",{}),Object(on.jsxs)("span",{children:["1 A = ",gn(null===n||void 0===n?void 0:n.aToB),"B"]}),Object(on.jsx)("br",{}),Object(on.jsxs)("span",{children:["1 B = ",gn(null===n||void 0===n?void 0:n.bToA),"A"]}),Object(on.jsx)("br",{}),Object(on.jsx)("br",{}),Object(on.jsx)("b",{children:"Pool liquidity"}),Object(on.jsx)("br",{}),Object(on.jsxs)("span",{children:["A = ",gn(i.assetABalance)]}),Object(on.jsx)("br",{}),Object(on.jsxs)("span",{children:["B = ",gn(i.assetBBalance)]}),Object(on.jsx)("br",{}),Object(on.jsx)("br",{})]})]})},Hn="1000000000000",Gn=(e,n,i,t)=>{var a,d;const s=null===(a=Object(u.find)(n.balances,{assetId:i}))||void 0===a?void 0:a.balance,l=null===(d=Object(u.find)(n.balances,{assetId:t}))||void 0===d?void 0:d.balance;if(!s||!l)throw new Error("Can't find the required balances in the pool");return function(e,n,i,t,a){let d=arguments.length>5&&void 0!==arguments[5]?arguments[5]:Hn;return e.lbp.get_spot_price(n,i,t,a,d)}(e,s,l,i===n.assetInId?n.assetAWeights.current:n.assetBWeights.current,t===n.assetOutId?n.assetBWeights.current:n.assetAWeights.current)},Xn=(e,n,i,t)=>{var a,d;const s=null===(a=Object(u.find)(n.balances,{assetId:i}))||void 0===a?void 0:a.balance,l=null===(d=Object(u.find)(n.balances,{assetId:t}))||void 0===d?void 0:d.balance;if(s&&l)return((e,n,i)=>e.xyk.get_spot_price(n,i,Hn))(e,s,l)},Rn=()=>{const[e,n]=Object(t.useState)({assetInId:"0",assetOutId:"2"}),{data:i,loading:a,error:d}=(s=e,Object(m.a)(kn,{variables:s,notifyOnNetworkStatusChange:!0}));var s;c.a.debug("TradePage.useGetPoolByAssetsQuery",e);const l=Object(t.useMemo)((()=>null===i||void 0===i?void 0:i.pool),[null===i||void 0===i?void 0:i.pool]);d&&c.a.error(d);const o=Object(t.useMemo)((()=>{const e=a;return c.a.debug("TradePage.loading",e),e}),[a]);c.a.debug("TradePage.poolData.pool",null===i||void 0===i?void 0:i.pool);const r=((e,n)=>{let{assetInId:i,assetOutId:a}=e;const d=Object(z.a)(),s=je(d.cache),{math:l}=ye();return Object(t.useMemo)((()=>{if(!l||!n||!i||!a||!s)return;const e="XYKPool"===(null===n||void 0===n?void 0:n.__typename)?Xn:Gn,t={aToB:e(l,n,i,a),bToA:e(l,n,a,i)};return c.a.debug("TradePage.useSpotPrice",t),t}),[s,i,a,n,l])})(e,null===i||void 0===i?void 0:i.pool),v=Object(t.useMemo)((()=>{var n,i;return{assetABalance:null===(n=Object(u.find)(null===l||void 0===l?void 0:l.balances,{assetId:e.assetInId}))||void 0===n?void 0:n.balance,assetBBalance:null===(i=Object(u.find)(null===l||void 0===l?void 0:l.balances,{assetId:e.assetOutId}))||void 0===i?void 0:i.balance}}),[l]);return Object(on.jsxs)("div",{children:[Object(on.jsx)("h1",{children:"Trade"}),Object(on.jsx)("br",{}),Object(on.jsx)("br",{}),Object(on.jsx)(Mn,{poolLiquidity:v,spotPrice:r}),Object(on.jsx)(Qn,{onAssetIdsChange:(i,t)=>{const a={assetInId:i,assetOutId:t};c.a.debug("TradePage.handleAssetIdsChange",Object(u.isEqual)(e,a),a),Object(u.isEqual)(e,a)||n(a)},assetIds:e,loading:o,pool:l,spotPrice:r})]})},Yn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"mutation",name:{kind:"Name",value:"SetActiveAccount"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"id"}},type:{kind:"NamedType",name:{kind:"Name",value:"String"}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"setActiveAccount"},arguments:[{kind:"Argument",name:{kind:"Name",value:"id"},value:{kind:"Variable",name:{kind:"Name",value:"id"}}}],directives:[{kind:"Directive",name:{kind:"Name",value:"client"},arguments:[]}]}]}}],loc:{start:0,end:80,source:{body:"mutation SetActiveAccount($id: String) {\n    setActiveAccount(id: $id) @client\n}",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Kn=e=>Object(On.a)(Yn,{variables:e,refetchQueries:[J]}),$n=e=>{let{account:n}=e;const[i]=Kn({id:null===n||void 0===n?void 0:n.id}),[t]=Kn({id:void 0});return Object(on.jsxs)("div",{style:{marginBottom:"24px",padding:"12px",paddingLeft:0},children:[Object(on.jsxs)("h3",{children:[null===n||void 0===n?void 0:n.name,(null===n||void 0===n?void 0:n.isActive)?" [active]":Object(on.jsx)(on.Fragment,{})]}),Object(on.jsxs)("p",{children:[Object(on.jsx)("b",{children:"Address:"}),null===n||void 0===n?void 0:n.id]}),Object(on.jsxs)("div",{children:[Object(on.jsx)("b",{children:"Balances:"}),null===n||void 0===n?void 0:n.balances.map(((e,n)=>Object(on.jsxs)("p",{children:[e.assetId,":",Object(on.jsxs)("i",{children:[" ",e.balance]})]},n)))]}),Object(on.jsx)("button",{onClick:e=>(null===n||void 0===n?void 0:n.isActive)?t():i(),children:(null===n||void 0===n?void 0:n.isActive)?"Unset active":"Set active"})]})},zn=()=>{var e;const{data:n,loading:i}=Object(m.a)(v,{notifyOnNetworkStatusChange:!0}),{data:a,loading:d}=dn(),s=Object(t.useMemo)((()=>i||d),[i,d]);return Object(on.jsxs)("div",{style:{textAlign:"left"},children:[Object(on.jsx)("h1",{children:"Accounts"}),s?Object(on.jsx)("i",{children:"[WalletPage] Loading accounts..."}):Object(on.jsx)("i",{children:"[WalletPage] Everything is up to date"}),Object(on.jsx)("br",{}),Object(on.jsx)("br",{}),(null===a||void 0===a?void 0:a.extension.isAvailable)?Object(on.jsx)("div",{children:null===n||void 0===n||null===(e=n.accounts)||void 0===e?void 0:e.map(((e,n)=>Object(on.jsx)($n,{account:e},n)))}):Object(on.jsx)("p",{children:"Extension unavailable"})]})},Jn={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GetUserActions"},variableDefinitions:[{kind:"VariableDefinition",variable:{kind:"Variable",name:{kind:"Name",value:"account"}},type:{kind:"NonNullType",type:{kind:"NamedType",name:{kind:"Name",value:"String"}}},directives:[]}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"userActions"},arguments:[{kind:"Argument",name:{kind:"Name",value:"orderBy"},value:{kind:"EnumValue",value:"id_DESC"}},{kind:"Argument",name:{kind:"Name",value:"where"},value:{kind:"ObjectValue",fields:[{kind:"ObjectField",name:{kind:"Name",value:"account_eq"},value:{kind:"Variable",name:{kind:"Name",value:"account"}}}]}},{kind:"Argument",name:{kind:"Name",value:"limit"},value:{kind:"IntValue",value:"50"}}],directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",name:{kind:"Name",value:"id"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"status"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"account"},arguments:[],directives:[]},{kind:"Field",name:{kind:"Name",value:"action"},arguments:[],directives:[]}]}}]}}],loc:{start:0,end:167,source:{body:"query GetUserActions($account: String!) {\n  userActions(orderBy: id_DESC, where: { account_eq: $account }, limit: 50) {\n    id\n    status\n    account\n    action\n  }\n}\n",name:"GraphQL request",locationOffset:{line:1,column:1}}}},Zn=()=>{var e;const n=Object(z.a)(),i=Ce(n.cache),a=null===i||void 0===i?void 0:i.id,d=Object(m.a)(Jn,{notifyOnNetworkStatusChange:!0,returnPartialData:!0,pollInterval:5e3,variables:{account:a}});return Object(t.useEffect)((()=>{var e,i;null===(e=d.data)||void 0===e||null===(i=e.userActions)||void 0===i||i.forEach((e=>{var i,t;i=n.cache,t=e.id,i.evict({id:i.identify({id:t,__typename:Qe})})}))}),[n.cache,null===(e=d.data)||void 0===e?void 0:e.userActions]),d},ei=()=>{const{data:e,loading:n}=Object(m.a)(Ve,{notifyOnNetworkStatusChange:!0,returnPartialData:!0}),{data:i,loading:a}=Zn(),d=Object(t.useMemo)((()=>null===e||void 0===e?void 0:e.actionLog),[null===e||void 0===e?void 0:e.actionLog]),s=Object(t.useMemo)((()=>null===i||void 0===i?void 0:i.userActions),[null===i||void 0===i?void 0:i.userActions]),l=Object(t.useMemo)((()=>{if(d&&d.length>0){let e=Object(u.cloneDeep)(s)||[];return d.forEach((n=>{e.unshift({...n,__typename:"UserAction"})})),e}return s||[]}),[d,s]);return Object(on.jsxs)("div",{style:{textAlign:"left"},children:[Object(on.jsx)("h1",{children:"ActionLog"}),a||n?Object(on.jsx)("i",{children:"[WalletPage] Loading action log..."}):Object(on.jsx)("i",{children:"[WalletPage] Everything is up to date"}),Object(on.jsx)("br",{}),Object(on.jsx)("br",{}),l.map(((e,n)=>Object(on.jsxs)("p",{children:[n," : ",e.action," - ",e.status," - ",e.id]})))]})},ni=()=>Object(on.jsxs)(vn.d,{children:[Object(on.jsx)(vn.b,{path:"/",element:Object(on.jsx)(Rn,{})}),Object(on.jsx)(vn.b,{path:"wallet",element:Object(on.jsx)(zn,{})}),Object(on.jsx)(vn.b,{path:"log",element:Object(on.jsx)(ei,{})}),Object(on.jsx)(vn.b,{path:"*",element:Object(on.jsx)(vn.a,{to:"/"})})]});i(170);const ii=e=>{let{extensionLoading:n,activeAccountLoading:i,accountData:t,isExtensionAvailable:a}=e;return Object(on.jsxs)("div",{className:"action-bar",children:[Object(on.jsxs)("div",{className:"action-bar-icons action-bar-item",children:[Object(on.jsx)("div",{className:"action-bar-help action-bar-icon ",children:"?"}),Object(on.jsx)("div",{className:"action-bar-notifications action-bar-icon ",children:"!"})]}),Object(on.jsx)("div",{children:n||i?Object(on.jsx)("div",{className:"action-bar-error action-bar-item",children:"loading..."}):a?Object(on.jsx)(on.Fragment,{children:(null===t||void 0===t?void 0:t.name)?Object(on.jsxs)("div",{className:"action-bar-account-info action-bar-item",children:[Object(on.jsxs)("div",{className:"action-bar-account-balance action-bar-account-item",children:[null===t||void 0===t?void 0:t.nativeAssetBalance," BSX"]}),Object(on.jsx)("div",{className:"action-bar-account-name action-bar-account-item",children:null===t||void 0===t?void 0:t.name})]}):Object(on.jsx)(mn.b,{className:"action-bar-select-account action-bar-item",to:"/wallet",children:"select an account"})}):Object(on.jsx)("div",{className:"action-bar-error action-bar-item",children:"Extension unavailable"})}),Object(on.jsx)("div",{className:"action-bar-settings action-bar-item",children:"v"})]})};i(171);const ti=()=>Object(on.jsxs)("div",{children:[Object(on.jsx)(mn.b,{className:"basilisk-logo",to:"https://bsx.fi",children:"()"}),Object(on.jsx)(mn.b,{to:"/",children:"Trade"})," | ",Object(on.jsx)(mn.b,{to:"/",children:"Pools"})," | ",Object(on.jsx)(mn.b,{to:"/wallet",children:"Wallet"})," | ",Object(on.jsx)(mn.b,{to:"/log",children:"Action Log"})]});i(172);const ai=()=>{var e,n,i,a;const{data:d}=Object(m.a)(G),{data:s,loading:l,error:o}=Z(),{data:r,loading:c}=dn();o&&console.error(o);const v=Object(t.useMemo)((()=>{var e,n,i;return null===(e=Object(u.first)(null===s||void 0===s||null===(n=s.account)||void 0===n||null===(i=n.balances)||void 0===i?void 0:i.filter((e=>e.assetId===P))))||void 0===e?void 0:e.balance}),[s]);return Object(on.jsxs)("div",{className:"top-bar",children:[Object(on.jsx)(ti,{}),Object(on.jsxs)("div",{children:[Object(on.jsx)("b",{children:"Last block: "}),(null===d||void 0===d||null===(e=d.lastBlock)||void 0===e?void 0:e.parachainBlockNumber)?"#".concat(null===d||void 0===d||null===(n=d.lastBlock)||void 0===n?void 0:n.parachainBlockNumber," / #").concat(null===d||void 0===d||null===(i=d.lastBlock)||void 0===i?void 0:i.relaychainBlockNumber):"loading..."]}),Object(on.jsx)(ii,{isExtensionAvailable:!!r&&!!(null===(a=r.extension)||void 0===a?void 0:a.isAvailable),extensionLoading:c,activeAccountLoading:l,accountData:s?{name:s.account&&s.account.name?s.account.name:void 0,nativeAssetBalance:v,address:"placeholder fill me"}:void 0})]})},di=e=>{let{children:n}=e;const i=(()=>{const{apiInstance:e}=w(),{math:n}=ye();return!e||!n})();return Object(on.jsxs)("div",{style:{padding:"24px",width:"650px",margin:"0 auto"},children:[Object(on.jsx)(ai,{}),i?Object(on.jsx)("div",{style:{width:"100%",textAlign:"center"},children:Object(on.jsx)("i",{children:"Connecting to the node..."})}):n]})};c.a.setLevel("debug");const si="feat/action-log",li=si.length?"basilisk-ui/".concat(si,"/app"):void 0;var oi=()=>Object(on.jsx)(un,{children:Object(on.jsx)(mn.a,{basename:li,children:Object(on.jsx)(di,{children:Object(on.jsx)(ni,{})})})});var ri=e=>{e&&e instanceof Function&&i.e(5).then(i.bind(null,216)).then((n=>{let{getCLS:i,getFID:t,getFCP:a,getLCP:d,getTTFB:s}=n;i(e),t(e),a(e),d(e),s(e)}))};i(173);d.a.render(Object(on.jsx)(oi,{}),document.getElementById("root")),ri()},64:function(e,n){}},[[174,1,2]]]);
//# sourceMappingURL=main.e06a415c.chunk.js.map