{"version":3,"sources":["components/Chart/shared.tsx","generated/graphql.tsx","hooks/accounts/queries/useGetAccountsQuery.tsx","hooks/accounts/usePersistActiveAccount.tsx","hooks/accounts/resolvers/useSetActiveAccountMutationResolver.tsx","hooks/accounts/useSetActiveAccount.tsx","hooks/accounts/resolvers/useAccountsMutationResolvers.tsx","hooks/polkadotJs/typesConfig.tsx","hooks/config/usePersistentConfig.tsx","hooks/polkadotJs/usePolkadotJs.tsx","hooks/balances/useGetBalancesByAddress.tsx","hooks/balances/useBalanceQueryResolvers.tsx","hooks/vesting/useGetVestingScheduleByAddress.tsx","hooks/vesting/useVestingScheduleQueryResolvers.tsx","hooks/accounts/resolvers/useGetAccountsQueryResolver.tsx","hooks/accounts/useGetAccounts.tsx","hooks/lastBlock/useLastBlockQuery.tsx","hooks/lastBlock/useSubscribeNewBlockNumber.tsx","hooks/lastBlock/useRefetchWithNewBlock.tsx","hooks/accounts/queries/useGetActiveAccountQuery.tsx","hooks/vesting/useVestingMutationResolvers.tsx","hooks/balances/useBalanceMutationResolvers.tsx","hooks/polkadotJs/useExtensionQueryResolvers.tsx","hooks/config/useConfigQueryResolvers.tsx","hooks/config/useConfigMutationResolver.tsx","hooks/feePaymentAssets/useFeePaymentAssetsQueryResolvers.tsx","hooks/math/useMath.tsx","hooks/pools/useGetXykPools.tsx","hooks/pools/lbp/calculateOppositeAssetWeight.tsx","hooks/pools/lbp/calculateCurrentAssetWeight.tsx","hooks/lastBlock/readLastBlock.tsx","hooks/pools/useGetLbpPools.tsx","hooks/pools/useGetLbpPool.tsx","hooks/pools/resolvers/useGetPoolsQueryResolver.tsx","hooks/pools/useGetXykPool.tsx","hooks/assets/useGetAssets.tsx","hooks/assets/resolvers/useGetAssetsQueryResolver.tsx","hooks/accounts/readActiveAccount.tsx","hooks/pools/lbp/buy.tsx","hooks/pools/lbp/sell.tsx","hooks/pools/xyk/buy.tsx","hooks/pools/xyk/sell.tsx","hooks/pools/resolvers/usePoolsMutationResolvers.tsx","hooks/pools/resolvers/useSubmitTradeMutationResolvers.tsx","hooks/apollo/useApollo.tsx","hooks/accounts/resolvers/useAccountsQueryResolvers.tsx","hooks/pools/resolvers/usePoolsQueryResolver.tsx","hooks/assets/resolvers/useAssetsQueryResolvers.tsx","hooks/polkadotJs/useGetExtensionQuery.tsx","containers/MultiProvider.tsx","hooks/pools/queries/useGetPoolByAssetsQuery.tsx","components/Input/TokenInput.tsx","hooks/math/useFromPrecision.tsx","hooks/math/useToPrecision.tsx","containers/TradeForm/hooks/useListenForInput.tsx","hooks/pools/mutations/useSubmitTradeMutation.tsx","containers/TradeForm/hooks/useHandleSubmit.tsx","hooks/pools/xyk/calculateOutGivenIn.tsx","hooks/pools/lbp/calculateInGivenOut.tsx","hooks/pools/lbp/calculateOutGivenIn.tsx","hooks/pools/xyk/calculateInGivenOut.tsx","hooks/pools/poolHasAssets.tsx","hooks/math/usePercentageChange.tsx","containers/TradeForm/hooks/useSlippage.tsx","constants.tsx","containers/TradeForm/hooks/usePercentageFee.tsx","containers/TradeForm/hooks/useCalculateAllowedSlippage.tsx","containers/TradeForm/TradeForm.tsx","containers/TradeForm/hooks/useTradeForm.tsx","containers/TradeForm/hooks/useTradeType.tsx","containers/TradeForm/hooks/useHandleAssetIdsChange.tsx","containers/TradeForm/hooks/useCalculateInAndOut.tsx","containers/TradeForm/hooks/useResetAmountInputsOnPoolChange.tsx","containers/TradeChart.tsx","hooks/pools/lbp/calculateSpotPrice.tsx","hooks/pools/xyk/calculateSpotPrice.tsx","pages/TradePage/TradePage.tsx","pages/TradePage/hooks/useSpotPrice.tsx","hooks/accounts/mutations/useSetActiveAccountMutation.tsx","pages/WalletPage.tsx","containers/Router.tsx","components/Navigation/ActionBar.tsx","components/Navigation/Navigation.tsx","containers/TopBar.tsx","containers/PageContainer.tsx","hooks/misc/useLoading.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ChartGranularity","ChartType","PoolType","TradeType","GET_ACCOUNTS","defaultValue","id","undefined","usePersistedActiveAccount","createPersistedState","usePersistActiveAccount","useSetActiveAccountMutationResolver","setActiveAccount","setPersistedActiveAccount","useCallback","client","address","a","accountsData","cache","readQuery","query","accounts","map","account","isActive","activeAccount","find","forEach","modify","identify","__typename","fields","_","Promise","resolve","setTimeout","useSetActiveAccount","useResolverToRef","_obj","args","resolver","name","resolverRef","useRef","useEffect","current","log","debug","apply","arguments","defaultConfigValue","nodeUrl","process","processorUrl","appName","usePersistedConfig","usePersistentConfig","getPoolAccount","description","params","type","rpc","xyk","lbp","constate","useState","apiInstance","setApiInstance","loading","useMemo","provider","WsProvider","types","typesConfig","ormlTypes","typesAlias","ormlTypesAlias","ApiPromise","create","api","isReady","disconnect","PolkadotJsProvider","usePolkadotJsContext","nativeAssetId","getBalancesByAddress","assetIds","balances","includes","system","nativeAssetBalance","push","assetId","balance","data","free","toString","filter","e","tokens","multi","codec","i","entries","storageKey","toHuman","assetBalances","assetBalance","createType","useBalanceQueryResolvers","useGetBalancesByAddress","entity","assetInId","assetOutId","balanceLockDataType","getLockedBalanceByAddressAndLockId","lockId","locks","lockedAmount","eq","lockedNativeBalance","tokenBalanceLocks","tokenBalanceLock","toJSON","amount","lockedTokensBalance","useVestingScheduleQueryResolvers","getVestingScheduleByAddress","first","vesting","vestingSchedules","vestingSchedule","lockedVestingAmount","remainingVestingAmount","start","period","periodCount","perPeriod","useGetVestingScheduleByAddress","useGetAccountsQueryResolver","persistedActiveAccount","getAccounts","persistedActiveAccountId","web3Enable","web3Accounts","encodeAddress","decodeAddress","meta","isArray","GET_LAST_BLOCK","lastBlock","setLastBlock","subscribeNewBlocks","derive","chain","block","parachainSystem","validationData","validationDataOption","isSome","parachainBlockNumber","header","number","relaychainBlockNumber","LastBlockProvider","useLastBlockContext","writeLastBlock","writeQuery","GET_ACTIVE_ACCOUNT","useGetActiveAccountQuery","useApolloClient","result","useQuery","notifyOnNetworkStatusChange","refetchQueries","withGracefulErrors","fn","errorHandlers","reject","console","reduce","errorHandler","gracefulExtensionCancelationErrorHandler","message","error","vestingClaimHandler","status","events","dispatchError","isFinalized","info","event","method","section","phase","isInBlock","createdAtHash","isModule","registry","findMetaError","asModule","isBroadcast","hash","polkadotJsNotReadyYetError","useVestingMutationResolvers","claimVestedAmount","variables","Error","web3FromAddress","signer","tx","claim","signAndSend","transferBalanceHandler","transferBalanceExtrinsic","currencies","transfer","useBalanceMutationResolvers","transferBalance","from","to","currencyId","useConfigQueryResolvers","persistedConfig","config","_variables","multiTransactionPayment","accountCurrencyMap","feePaymentAsset","setCurrencyHandler","useConfigMutationResolvers","setPersistedConfig","setConfig","setCurrency","persistableConfig","useFeePaymentAssetsQueryResolvers","feePaymentAssets","acceptedCurrencies","acceptedCurrency","fallbackPrice","loadMath","instance","wasm","setWasm","math","MathProvider","useMathContext","mapToPoolId","mapToPool","poolAssets","hundredWithPrecision6","BigNumber","multipliedBy","pow","calculateOppositeAssetWeight","weight","minus","toFixed","calculateCurrentAssetWeight","pool","weights","calculate_linear_weights","startBlock","endBlock","initial","readLastBlock","repayFee","numerator","denominator","poolData","lastBlockData","feeCollector","repayTarget","partialPool","assets","end","partialAssetAWeights","initialWeight","final","finalWeight","assetAWeights","assetBWeights","feeCollectorBalanceLockAmount","repayTargetReached","gt","poolFee","fee","getLbpPools","all","getLbpPool","poolId","getPoolIdsByAssetIds","lbpPoolId","xykPoolId","useGetPoolsQueryResolver","useGetLbpPools","getXykPools","useGetXykPools","getXykPool","useGetXykPool","useGetLbpPool","context","poolIds","lbpPool","xykPool","lbpPools","xykPools","concat","mapToAsset","useGetAssetsQueryResolver","getAssets","assetRegistry","useGetAssets","asset","readActiveAccount","returnPartialData","buyHandler","buy","assetBuy","assetSell","amountBuy","maxSold","sellHandler","sell","amountSell","minBought","xykBuyHandler","usePoolsMutationResolvers","submitTrade","poolType","XYK","tradeType","Buy","buyXyk","assetOutAmount","amountWithSlippage","Sell","sellXyk","assetInAmount","LBP","buyLbp","sellLbp","useSubmitTradeMutationResolver","useResolvers","Query","Account","AccountsQueryResolver","getPoolsQueryResolver","poolFieldsQueryResolvers","pools","XYKPool","LBPPool","usePoolsQueryResolver","PoolsQueryResolver","extension","extensions","isAvailable","length","Mutation","typeDefs","useConfigureApolloClient","resolvers","InMemoryCache","ApolloClient","uri","connectToDevTools","queryDeduplication","updateCache","useRefetchWithNewBlock","GET_EXTENSION","useGetExtensionQuery","useLazyQuery","GetExtensionQueryProvider","ConfiguredApolloProvider","children","ApolloProvider","QueryProvider","MultiProvider","GET_POOL_BY_ASSETS","TokenInput","assetIdInputProps","assetAmountInputProps","disabled","precision12","fromPrecision12","dividedBy","toPrecision12","useListenForInput","form","field","state","setState","inputRef","control","_fields","_f","ref","listener","addEventListener","removeEventListener","SUBMIT_TRADE","useHandleSubmit","allowedSlippage","slippage","useMutation","spotPriceAmount","slippageAmount","amountBN","plus","applyAllowedSlippage","calculateOutGivenInFromPool","amountIn","assetInBalance","assetOutBalance","inReserve","outReserve","calculate_out_given_in","calculateOutGivenIn","getPoolBalances","assetABalance","assetBBalance","getInAndOutWeights","assetInWeight","assetOutWeight","calculateInGivenOutFromPool","amountOut","inWeight","outWeight","calculate_in_given_out","calculateInGivenOut","poolHasAssets","percentageChange","b","aBN","calculateSlippage","spotPrice","resultPercentageChange","isNaN","ROUNDING_MODE","ROUND_UP","percentualSlippage","abs","useSlippage","aToB","bToA","xykFee","feeToPercentage","feeFromPool","constants","defaultAllowedSlippage","useCalculateAllowedSlippage","watchAutoSlippage","watch","allowedSlippageInputDisabled","getValues","allowedSlippageWithFee","setValue","TradeForm","onAssetIdsChange","useForm","defaultValues","autoSlippage","useTradeForm","usePercentageFee","setTradeType","watchassetInAmount","watchAassetInId","watchAassetOutAmount","watchAassetOutId","useTradeType","useHandleAssetIdsChange","calculateOutGivenInFromPoolXYK","calculateOutGivenInFromPoolLBP","calculateInGivenOutFromPoolXYK","calculateInGivenOutFromPoolLBP","outAmount","inAmount","useCalculateInAndOut","previousPoolId","usePreviousDistinct","isEqual","resetField","useResetAmountInputsOnPoolChange","handleSubmit","onSubmit","register","TradeChart","poolLiquidity","oneWithPrecision","calculateSpotPriceFromPool","get_spot_price","calculateSpotPrice","TradePage","setAssetIds","poolLoading","poolError","calculateSpotPriceFromPoolXYK","calculateSpotPriceFromPoolLBP","useSpotPrice","newIds","SET_ACTIVE_ACCOUNT","useSetActiveAccountMutation","unsetActiveAccount","style","marginBottom","padding","paddingLeft","onClick","WalletPage","accountsLoading","extensionData","extensionLoading","textAlign","Router","path","element","ActionBar","activeAccountLoading","accountData","isExtensionAvailable","className","Navigation","TopBar","activeAccountData","PageContainer","useLoading","width","margin","setLevel","branch","baseName","App","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e70ff86.chunk.js","sourcesContent":["export enum ChartGranularity {\n    // ALL = 'ALL',\n    D30 = 'D30',\n    D7 = 'D7',\n    H24 = 'H24',\n    H1 = 'H1'\n}\n\nexport enum ChartType {\n    PRICE = 'PRICE',\n    VOLUME = 'VOLUME',\n    WEIGHTS = 'WEIGHTS'\n}\n\n\nexport interface Asset {\n    symbol: string | undefined,\n    fullName: string | undefined\n    icon?: string | undefined\n}\n\nexport interface AssetPair {\n    assetA: Asset,\n    assetB: Asset | undefined\n}\n\nexport enum PoolType {\n    LBP = 'LBP',\n    XYK = 'XYK'\n}\n\n// Display data is not in the {x,y} format, since it solely represents\n// an amount in a given asset\nexport interface DisplayData {\n    balance: number | undefined,\n    usdBalance: number | undefined,\n    asset: Asset\n}","import { gql } from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Account = {\n  __typename?: 'Account';\n  balances: Array<Balance>;\n  id: Scalars['String'];\n  isActive: Scalars['Boolean'];\n  name?: Maybe<Scalars['String']>;\n  vestingSchedule: VestingSchedule;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  id: Scalars['String'];\n};\n\nexport type Balance = {\n  __typename?: 'Balance';\n  assetId: Scalars['String'];\n  balance: Scalars['String'];\n};\n\nexport type Config = {\n  __typename?: 'Config';\n  appName: Scalars['String'];\n  feePaymentAsset?: Maybe<Scalars['String']>;\n  nodeUrl: Scalars['String'];\n  processorUrl: Scalars['String'];\n};\n\nexport type Extension = {\n  __typename?: 'Extension';\n  isAvailable?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Fee = {\n  __typename?: 'Fee';\n  denominator: Scalars['String'];\n  numerator: Scalars['String'];\n};\n\nexport type FeePaymentAsset = {\n  __typename?: 'FeePaymentAsset';\n  assetId?: Maybe<Scalars['String']>;\n  fallbackPrice?: Maybe<Scalars['String']>;\n};\n\nexport type LbpAssetWeights = {\n  __typename?: 'LBPAssetWeights';\n  current: Scalars['String'];\n  final: Scalars['String'];\n  initial: Scalars['String'];\n};\n\nexport type LbpPool = {\n  __typename?: 'LBPPool';\n  assetAWeights: LbpAssetWeights;\n  assetBWeights: LbpAssetWeights;\n  assetInId: Scalars['String'];\n  assetOutId: Scalars['String'];\n  balances?: Maybe<Array<Balance>>;\n  endBlock: Scalars['String'];\n  fee: Fee;\n  id: Scalars['String'];\n  repayTargetReached: Scalars['Boolean'];\n  startBlock: Scalars['String'];\n};\n\nexport type LastBlock = {\n  __typename?: 'LastBlock';\n  id: Scalars['String'];\n  parachainBlockNumber?: Maybe<Scalars['String']>;\n  relaychainBlockNumber?: Maybe<Scalars['String']>;\n};\n\nexport type Pool = LbpPool | XykPool;\n\nexport type Query = {\n  __typename?: 'Query';\n  _empty?: Maybe<Scalars['String']>;\n  _tradeType?: Maybe<TradeType>;\n  account?: Maybe<Account>;\n  accounts: Array<Account>;\n  assets?: Maybe<Array<Asset>>;\n  config: Config;\n  extension: Extension;\n  feePaymentAssets?: Maybe<Array<FeePaymentAsset>>;\n  lastBlock?: Maybe<LastBlock>;\n  pools?: Maybe<Array<Pool>>;\n};\n\nexport enum TradeType {\n  Buy = 'Buy',\n  Sell = 'Sell'\n}\n\nexport type VestingSchedule = {\n  __typename?: 'VestingSchedule';\n  perPeriod?: Maybe<Scalars['String']>;\n  period?: Maybe<Scalars['String']>;\n  periodCount?: Maybe<Scalars['String']>;\n  remainingVestingAmount?: Maybe<Scalars['String']>;\n  start?: Maybe<Scalars['String']>;\n};\n\nexport type XykPool = {\n  __typename?: 'XYKPool';\n  assetInId: Scalars['String'];\n  assetOutId: Scalars['String'];\n  balances?: Maybe<Array<Balance>>;\n  id: Scalars['String'];\n};\n","import { useQuery } from '@apollo/client'\nimport { Query } from '../../../generated/graphql';\nimport { loader } from 'graphql.macro';\n\nexport const GET_ACCOUNTS = loader('./../graphql/GetAccounts.query.graphql');\nexport interface GetAccountsQueryResponse {\n    accounts: Query['accounts'],\n    lastBlock: Query['lastBlock']\n}\n\nexport const useGetAccountsQuery = () => useQuery<GetAccountsQueryResponse>(GET_ACCOUNTS, {\n    notifyOnNetworkStatusChange: true,\n});","import { useLocalStorage } from 'react-use';\nimport { Account } from '../../generated/graphql';\nimport createPersistedState from 'use-persisted-state';\n\nexport const key = 'basilisk-active-account';\nexport const defaultValue = {\n    id: undefined\n};\nexport interface PersistedAccount {\n    id: string | undefined\n}\n\n// we're not using react-use/useLocalStorage since i couldn't figure out\n// why it would not trigger effects when the local storage updates\nconst usePersistedActiveAccount = createPersistedState(key);\nexport const usePersistActiveAccount = () => usePersistedActiveAccount<PersistedAccount | undefined>(defaultValue);","import { ApolloCache, ApolloClient, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { useSetActiveAccount } from '../useSetActiveAccount'\nimport { SetActiveAccountMutationVariables } from '../mutations/useSetActiveAccountMutation';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\n\nexport const useSetActiveAccountMutationResolver = () => {\n    const setActiveAccount = useSetActiveAccount();\n    \n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: SetActiveAccountMutationVariables,\n            { client }: { client: ApolloClient<NormalizedCacheObject> }\n        ) => setActiveAccount(client, args.id), [setActiveAccount]),\n        'setActiveAccount'\n    )\n}","import { ApolloCache, ApolloClient, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { gql } from 'graphql.macro';\nimport { find } from 'lodash';\nimport { useCallback } from 'react';\nimport { GetAccountsQueryResponse, GET_ACCOUNTS } from './queries/useGetAccountsQuery';\nimport { usePersistActiveAccount } from './usePersistActiveAccount';\n\nexport const useSetActiveAccount = () => {\n    const [_persistedActiveAccount, setPersistedActiveAccount] = usePersistActiveAccount();\n\n    return useCallback(async (\n        client: ApolloClient<NormalizedCacheObject>,\n        address: string | undefined\n    ) => {\n        const accountsData = client.cache?.readQuery<GetAccountsQueryResponse>({\n            query: GET_ACCOUNTS,\n        });\n\n        if (!accountsData?.accounts) return;\n\n        const accounts = accountsData.accounts\n            .map(account => ({\n                ...account,\n                isActive: account.id === address ? true : false\n            }))\n        \n        const activeAccount = find(accounts, { isActive: true });\n        setPersistedActiveAccount({\n            id: activeAccount?.id\n        })\n        \n        // TODO: return the data to be mutated from the mutation instead\n        // client.cache?.writeQuery<GetAccountsQueryResponse>({\n        //     query: GET_ACCOUNTS,\n        //     data: { accounts, lastBlock: accountsData.lastBlock }\n        // });\n\n        accounts.forEach(account => {\n            client.cache.modify({\n                id: client.cache.identify({\n                    __typename: account.__typename,\n                    id: account.id\n                }),\n                fields: {\n                    isActive: _ => account.isActive\n                }\n            })\n        });\n\n        // wait for the local storage changes before finishing the mutation\n        // TODO: find a better way to wait until the local storage changes are\n        // propagated to the resolverRef\n        await (new Promise(resolve => setTimeout(resolve, 0)));\n\n        return accounts;\n    }, [ \n        setPersistedActiveAccount\n    ])\n}","import { ApolloCache, ApolloClient, NormalizedCacheObject, Resolver } from '@apollo/client'\nimport { find } from 'lodash';\nimport { useCallback, useEffect, useRef } from 'react';\nimport { SetActiveAccountMutationVariables } from '../mutations/useSetActiveAccountMutation'\nimport log from 'loglevel';\nimport { useSetActiveAccount } from '../useSetActiveAccount';\nimport { useSetActiveAccountMutationResolver } from './useSetActiveAccountMutationResolver';\n\n/**\n * Updates the resolver fn ref each time the given resolver fn changes.\n * \n * This is necessary to reflect changes made to functions within hooks\n * within the Apollo resolvers configuration. \n */\nexport const useResolverToRef = (resolver: Resolver, name?: string) => {\n    const resolverRef = useRef(resolver);\n    // when the resolver changes, update the ref\n    useEffect(() => { resolverRef.current = resolver }, [resolver]);\n\n    return function resolverFromRef() {\n        // TODO is there a better way to debug resolvers? Since the function name\n        // is not visible in the apollo error\n        log.debug('Running resolver', name);\n        // execute the wrapper resolver ref, with the given arguments from Apollo\n        return resolverRef.current.apply(undefined, arguments as any);\n    }\n}\n\n/**\n * Used to resolve mutations regarding the Account entity\n * @returns \n */\nexport const useAccountsMutationResolvers = () => {\n    const setActiveAccountMutationResolver = useSetActiveAccountMutationResolver();\n\n    return {\n        setActiveAccount: setActiveAccountMutationResolver\n    }\n}","export default {\n    \"alias\": {\n      \"tokens\": {\n        \"AccountData\": \"OrmlAccountData\"\n      }\n    },\n    \"types\": [\n      {\n        \"AssetPair\": {\n          \"asset_in\": \"AssetId\",\n          \"asset_out\": \"AssetId\"\n        },\n        \"Amount\": \"i128\",\n        \"AmountOf\": \"Amount\",\n        \"Address\": \"AccountId\",\n        \"OrmlAccountData\": {\n          \"free\": \"Balance\",\n          \"frozen\": \"Balance\",\n          \"reserved\": \"Balance\"\n        },\n        \"Fee\": {\n          \"numerator\": \"u32\",\n          \"denominator\": \"u32\"\n        },\n        \"BalanceInfo\": {\n          \"amount\": \"Balance\",\n          \"assetId\": \"AssetId\"\n        },\n        \"Chain\": {\n          \"genesisHash\": \"Vec<u8>\",\n          \"lastBlockHash\": \"Vec<u8>\"\n        },\n        \"Currency\": \"AssetId\",\n        \"CurrencyId\": \"AssetId\",\n        \"CurrencyIdOf\": \"AssetId\",\n        \"Intention\": {\n          \"who\": \"AccountId\",\n          \"asset_sell\": \"AssetId\",\n          \"asset_buy\": \"AssetId\",\n          \"amount\": \"Balance\",\n          \"discount\": \"bool\",\n          \"sell_or_buy\": \"IntentionType\"\n        },\n        \"IntentionId\": \"Hash\",\n        \"IntentionType\": {\n          \"_enum\": [\n            \"SELL\",\n            \"BUY\"\n          ]\n        },\n        \"LookupSource\": \"AccountId\",\n        \"Price\": \"Balance\",\n        \"ClassId\": \"u64\",\n        \"TokenId\": \"u64\",\n        \"ClassData\": {\n          \"is_pool\": \"bool\"\n        },\n        \"TokenData\": {\n          \"locked\": \"bool\"\n        },\n        \"ClassInfo\": {\n          \"metadata\": \"Vec<u8>\",\n          \"total_issuance\": \"TokenId\",\n          \"owner\": \"AccountId\",\n          \"data\": \"ClassData\"\n        },\n        \"TokenInfo\": {\n          \"metadata\": \"Vec<u8>\",\n          \"owner\": \"AccountId\",\n          \"data\": \"TokenData\"\n        },\n        \"ClassInfoOf\": \"ClassInfo\",\n        \"TokenInfoOf\": \"TokenInfo\",\n        \"ClassIdOf\": \"ClassId\",\n        \"TokenIdOf\": \"TokenId\",\n        \"OrderedSet\": \"Vec<AssetId>\",\n        \"VestingSchedule\": {\n          \"start\": \"BlockNumber\",\n          \"period\": \"BlockNumber\",\n          \"period_count\": \"u32\",\n          \"per_period\": \"Compact<Balance>\"\n        },\n        \"VestingScheduleOf\": \"VestingSchedule\",\n        \"LBPWeight\": \"u32\",\n        \"WeightCurveType\": {\n          \"_enum\": [\n            \"Linear\"\n          ]\n        },\n        \"PoolId\": \"AccountId\",\n        \"BalanceOf\": \"Balance\",\n        \"AssetType\": {\n          \"_enum\": {\n            \"Token\": \"Null\",\n            \"PoolShare\": \"(AssetId,AssetId)\"\n          }\n        },\n        \"Pool\": {\n          \"owner\": \"AccountId\",\n          \"start\": \"BlockNumber\",\n          \"end\": \"BlockNumber\",\n          \"assets\": \"AssetPair\",\n          \"initial_weight\": \"LBPWeight\",\n          \"final_weight\": \"LBPWeight\",\n          \"weight_curve\": \"WeightCurveType\",\n          \"fee\": \"Fee\",\n          \"fee_collector\": \"AccountId\"\n        },\n        \"AssetDetails\": {\n          \"name\": \"Vec<u8>\",\n          \"asset_type\": \"AssetType\",\n          \"existential_deposit\": \"Balance\",\n          \"locked\": \"bool\"\n        },\n        \"AssetDetailsT\": \"AssetDetails\",\n        \"AssetMetadata\": {\n          \"symbol\": \"Vec<u8>\",\n          \"decimals\": \"u8\"\n        },\n        \"AssetInstance\": \"AssetInstanceV1\",\n        \"MultiLocation\": \"MultiLocationV1\",\n        \"AssetNativeLocation\": \"MultiLocation\",\n        \"MultiAsset\": \"MultiAssetV1\",\n        \"Xcm\": \"XcmV1\",\n        \"XcmOrder\": \"XcmOrderV1\"\n      }\n    ]\n  };","import createPersistedState from 'use-persisted-state';\nimport { Config } from '../../generated/graphql';\n\nconst key = 'basilisk-config';\nexport const defaultConfigValue = {\n    nodeUrl: process.env.REACT_APP_NODE_URL!,\n    processorUrl: process.env.REACT_APP_PROCESSOR_URL!,\n    appName: process.env.REACT_APP_APP_NAME!\n};\n\n// TODO: write apollo integration for querying and mutating the config\nconst usePersistedConfig = createPersistedState(key)\nexport const usePersistentConfig = () => usePersistedConfig<Config>(defaultConfigValue);","import { ApiPromise, WsProvider, HttpProvider } from '@polkadot/api';\nimport { ProviderInterface } from '@polkadot/rpc-provider/types'\nimport { useMemo, useState, useEffect } from 'react';\nimport constate from 'constate';\nimport typesConfig from './typesConfig';\nimport { usePersistentConfig } from '../config/usePersistentConfig';\nimport { types as ormlTypes, typesAlias as ormlTypesAlias } from '@open-web3/orml-type-definitions'\n\nconst getPoolAccount = {\n  description: 'Get pool account id by asset IDs',\n  params: [\n    {\n      name: 'assetInId',\n      type: 'u32'\n    },\n    {\n      name: 'assetOutId',\n      type: 'u32'\n    }\n  ],\n  type: 'AccountId'\n};\nconst rpc = {\n  xyk: {\n    getPoolAccount  \n  },\n  lbp: {\n    getPoolAccount\n  }\n}\n\n/**\n * Setup an instance of PolkadotJs, and watch\n * for config updates. In case the nodeUrl changes,\n * then re-create the PolkadotJs instance\n */\nexport const useConfigurePolkadotJs = () => {\n  const [{ nodeUrl }] = usePersistentConfig();\n  const [apiInstance, setApiInstance] = useState<ApiPromise | undefined>(undefined);\n  const loading = useMemo(() => apiInstance ? false : true, [apiInstance]);\n  const provider = useMemo(() => new WsProvider(nodeUrl), [nodeUrl]);\n\n  const types = useMemo(() => ({\n    ...typesConfig.types[0],\n    ...ormlTypes,\n  }), []);\n\n  const typesAlias = useMemo(() => ({\n    ...typesConfig.alias,\n    ...ormlTypesAlias\n  }), []);\n\n  // (re-)Create the PolkadotJS instance, when the provider updates.\n  useEffect(() => {\n    (async () => {\n      setApiInstance(undefined);\n      const api = await ApiPromise.create({\n        provider,\n        types,\n        typesAlias,\n        rpc\n      });\n      await api.isReady;\n      setApiInstance(api);\n    })();\n\n    // when the component using the usePolkadot hook unmounts, disconnect the websocket\n    return () => {\n      apiInstance?.disconnect();\n    };\n  }, [provider]);\n\n  return { apiInstance, loading };\n};\n\n// TODO: lift to context using constate\n// export const usePolkadotJs = () => useConfigurePolkadotJs();\nexport const [PolkadotJsProvider, usePolkadotJsContext] = constate(useConfigurePolkadotJs);","import { ApiPromise } from '@polkadot/api';\nimport { includes } from 'lodash';\nimport { useCallback } from 'react';\nimport { Balance } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\n\nexport const nativeAssetId = '0';\nexport const assetBalanceDataType = 'AccountData';\n\nexport const getBalancesByAddress = async (\n    apiInstance: ApiPromise, \n    address: string, \n    assetIds?: string[]\n) => {\n    const balances: Balance[] = [];\n        \n    // fetch the native balance, only if no assetIds were specified, or if it was explicitly requested\n    if (!assetIds || includes(assetIds, nativeAssetId)) {\n        const nativeAssetBalance = await apiInstance.query.system.account(address);    \n\n        balances.push({\n            assetId: nativeAssetId,\n            balance: nativeAssetBalance?.data.free.toString()\n        });\n    }\n\n    // we've already fetched the native balance above, ignore it down the line\n    assetIds = assetIds ? assetIds.filter(e => e !== nativeAssetId) : assetIds;\n\n    // TODO: write type definitions for `query.tokens`\n    const assetBalances = assetIds\n        // if there are specific assetIds to fetch, query only those\n        ? (await apiInstance.query.tokens.accounts.multi(\n            // query for [address, assetId]\n            assetIds\n                ?.map((assetId) => [address, assetId])\n        ))\n            .map((codec, i) => ({\n                // pair the assetId in the same order as asked for in the multi query above\n                assetId: assetIds![i],\n                balance: codec\n            }))\n        // if no assetIds were specified, fetch all balances\n        : (await apiInstance.query.tokens.accounts.entries(address))\n            .map(([storageKey, codec]) => ({\n                assetId: (storageKey.toHuman() as string[])[1],\n                balance: codec\n            }))\n\n    assetBalances?.forEach(assetBalance => {\n        // only extracting the free balance as of now\n        const balance = apiInstance?.createType(\n            assetBalanceDataType,\n            assetBalance.balance\n        ).free.toString();\n\n        balances.push({ assetId: assetBalance.assetId, balance });\n    });\n\n    // TODO: treat Balance as a top level entity for caching purposes\n    return balances;\n}\n\nexport const useGetBalancesByAddress = () => {\n    const { apiInstance, loading } = usePolkadotJsContext()\n\n    return useCallback(async (address?: string, assetIds?: string[]) => {\n        if (!apiInstance || !address) return;\n        return await getBalancesByAddress(apiInstance, address, assetIds)\n    }, [apiInstance, loading]);\n}","import { useCallback } from 'react'\nimport { Account, LbpPool, XykPool } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { useGetBalancesByAddress } from './useGetBalancesByAddress';\n\nexport const __typename = 'Balance';\nexport const useBalanceQueryResolvers = () => {\n    const getBalancesByAddress = useGetBalancesByAddress();\n    const balances = useResolverToRef(\n        useCallback(\n            /**\n             * TODO: figure out how to use @export to fetch balances only for certain assetIds\n             * then we don't have to pass in so many different entities as possible arugments here.\n             * \n             * This should also allow caching of balances if they are not fetched as a nested field,\n             * but rather a top level field per address.\n             */ \n            async (entity: Account | LbpPool | XykPool, args) => {\n                let assetIds;\n                \n                // TODO: how to extract the typename from the LbpPool[__typename] directly?\n                if (entity.__typename === 'LBPPool' || entity.__typename === 'XYKPool') {\n                    entity = (entity as LbpPool | XykPool);\n                    assetIds = [entity.assetInId, entity.assetOutId];\n                }\n\n                return (await getBalancesByAddress(entity.id, assetIds))\n                    ?.map(balance => ({\n                        ...balance,\n                        __typename,\n                        id: `${entity.id}-${balance.assetId}`,\n                    }))\n            }, \n            [getBalancesByAddress]\n        ),\n        'balances'\n    );\n\n    return {\n        balances\n    }\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { Vec } from '@polkadot/types';\nimport { VestingScheduleOf, BalanceOf } from '@open-web3/orml-types/interfaces'\nimport { find, first } from 'lodash';\nimport { ApiPromise } from '@polkadot/api';\nimport { Codec } from '@polkadot/types/types';\n\nexport const balanceLockDataType = 'Vec<BalanceLock>';\nexport const tokensLockDataType = balanceLockDataType;\n\nexport const vestingBalanceLockId = 'ormlvest';\n\nexport const vestingScheduleDataType = 'Vec<VestingScheduleOf>';\n\nexport interface OrmlTokensBalanceLock {\n    id?: string,\n    amount?: number,\n}\n\nexport const getLockedBalanceByAddressAndLockId = async (\n    apiInstance: ApiPromise,\n    address: string,\n    lockId: string\n) => {\n    const lockedNativeBalance = find(\n        apiInstance.createType(\n            balanceLockDataType,\n            await apiInstance.query.balances.locks(address)\n        ),\n        lockedAmount => (\n            lockedAmount.id.eq(lockId)\n        )\n    );\n\n    const tokenBalanceLocks = (await apiInstance.query.tokens.locks.entries(address))\n        .map(([_storageKey, codec]: [any, Codec]) => {\n            const tokenBalanceLock = (codec.toJSON() as any)[0] as unknown as OrmlTokensBalanceLock;\n            return {\n                id: tokenBalanceLock?.id,\n                amount: tokenBalanceLock?.amount?.toString()\n            }\n        });\n    \n    const lockedTokensBalance = find(\n        tokenBalanceLocks,\n        lockedAmount => (\n            lockedAmount?.id === lockId \n        )\n    );\n    \n    return lockedNativeBalance || lockedTokensBalance;\n}\n\nexport const useGetVestingScheduleByAddress = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const getVestingScheduleByAddress = useCallback(async (address?: string) => {\n        if (!apiInstance || !address) return;\n\n        // TODO: instead of multiple .createType calls, use the following\n        // https://github.com/AcalaNetwork/acala.js/blob/9634e2291f1723a84980b3087c55573763c8e82e/packages/sdk-core/src/functions/getSubscribeOrAtQuery.ts#L4\n        const vestingSchedule = first(\n            apiInstance.createType(\n                vestingScheduleDataType,\n                await apiInstance.query.vesting.vestingSchedules(address)\n            ) as Vec<VestingScheduleOf>\n        );\n\n        const lockedVestingAmount = await getLockedBalanceByAddressAndLockId(\n            apiInstance,\n            address,\n            vestingBalanceLockId\n        );\n\n        // TODO: are we sure this really conforms with the graphql VestingSchedule type\n        // in all conditions?\n        return {\n            // TODO: add a claimableAmount (https://gist.github.com/maht0rz/53466af0aefba004d5a4baad23f8ce26)\n            remainingVestingAmount: lockedVestingAmount?.amount?.toString(),\n            start: vestingSchedule?.start.toString(),\n            period: vestingSchedule?.period.toString(),\n            periodCount: vestingSchedule?.periodCount.toString(),\n            perPeriod: vestingSchedule?.perPeriod.toString()\n        }\n\n    }, [apiInstance, loading]);\n\n    return getVestingScheduleByAddress;\n}","import { useCallback } from 'react'\nimport { Account } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { useGetVestingScheduleByAddress } from './useGetVestingScheduleByAddress';\n\nexport const useVestingScheduleQueryResolvers = () => {\n    const getVestingScheduleByAddress = useGetVestingScheduleByAddress();\n    const vestingSchedule = useResolverToRef(\n        useCallback(\n            async (account: Account) => await getVestingScheduleByAddress(account.id), \n            [getVestingScheduleByAddress]\n        ),\n        'vestingSchedule'\n    );\n\n    return {\n        vestingSchedule\n    }\n}","import { isArray } from 'lodash';\nimport { useCallback } from 'react';\nimport { useGetAccounts } from '../useGetAccounts';\nimport { usePersistActiveAccount } from '../usePersistActiveAccount';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\n\nexport interface AccountsQueryResolverArgs {\n    isActive?: boolean\n}\n\nexport const __typename = 'Account';\n\nexport const useGetAccountsQueryResolver = () => {\n    const [persistedActiveAccount] = usePersistActiveAccount();\n    const getAccounts = useGetAccounts();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: AccountsQueryResolverArgs \n        ) => {\n            const accounts = await getAccounts(\n                persistedActiveAccount?.id,\n                args?.isActive,\n            );\n\n            // if no results were found, return undefined/null\n            // this is useful when un-setting the active account\n            if (!accounts) {\n                return null;\n            };\n    \n            return isArray(accounts)\n                ? accounts.map(account => ({\n                    ...account,\n                    __typename\n                }))\n                : ({\n                    // just a single account\n                    ...accounts,\n                    __typename\n                })\n        }, [\n            persistedActiveAccount,\n            getAccounts\n        ]),\n        'accounts'\n    )\n}","import { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\nimport { encodeAddress, decodeAddress } from '@polkadot/util-crypto';\nimport { find } from 'lodash';\nimport { useCallback } from 'react';\nimport { PersistedAccount } from './usePersistActiveAccount';\n\n// prefix for the ss58 address formatting of substrate addresses\nexport const basiliskAddressPrefix = 10041;\n\n/**\n * Used to fetch either all accounts, or accounts matching the given\n * set of parameters e.g. 'isActive'.\n */\nexport const useGetAccounts = () => useCallback(async (\n    persistedActiveAccountId: string | undefined,\n    isActive: boolean | undefined\n) => {\n    // TODO: use `config.appName`\n    // ensure we're connected to the polkadot.js extension\n    await web3Enable('basilisk-ui');\n\n    // get all the accounts from the polkadot.js extension\n    const accounts = (await web3Accounts())\n        // transform the returned accounts into the required entity format\n        .map(account => {\n            const address = encodeAddress(decodeAddress(account.address), basiliskAddressPrefix)\n            return {\n                id: address,\n                name: account.meta.name,\n                isActive: false,\n            };\n        })\n        // mark the active account based on the current persisted account\n        .map(account => ({\n            ...account,\n            isActive: persistedActiveAccountId == account.id,\n        }))\n\n    // if we're filtering for an active account, return just the single active account\n    if (isActive) {\n        const account = find(accounts, { isActive: isActive })\n        return account;\n    }   \n\n    // return all retrieved accounts\n    return accounts;\n}, []);","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { LastBlock, Query } from '../../generated/graphql';\n\n\nexport const GET_LAST_BLOCK = loader('./graphql/GetLastBlock.query.graphql');\nexport interface GetLastBlockQueryResponse {\n    lastBlock: Query['lastBlock']\n}\n\nexport const useLastBlockQuery = () => useQuery<GetLastBlockQueryResponse>(GET_LAST_BLOCK);","import constate from 'constate';\nimport { useCallback, useEffect, useState } from 'react';\nimport { LastBlock } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { Option } from '@polkadot/types'\nimport BN from 'bn.js';\nimport { Codec } from '@polkadot/types/types';\n\nexport const validationDataDataType = 'Option<PolkadotPrimitivesV1PersistedValidationData>';\nexport interface PolkadotPrimitivesV1PersistedValidationData {\n    relayParentNumber: number\n}\nexport type ValidationData = PolkadotPrimitivesV1PersistedValidationData\n\n// TODO: lift up using constate\nexport const useSubscribeNewBlock = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const [lastBlock, setLastBlock] = useState<Partial<LastBlock> | undefined>(undefined);\n\n    const subscribeNewBlocks = useCallback(() => {\n        if (!apiInstance) return;\n        // TODO: how to unsubscribe?\n        apiInstance.derive.chain\n            .subscribeNewBlocks(async (block) => {\n                const validationData = await apiInstance.query.parachainSystem.validationData();\n\n                const validationDataOption = apiInstance.createType(\n                    validationDataDataType,\n                    validationData\n                );\n                \n                // TODO: this will only update the block if the relay chain block number is known\n                if (validationDataOption.isSome) {\n                    const validationData = validationDataOption.toJSON() as unknown as PolkadotPrimitivesV1PersistedValidationData;\n                    setLastBlock({\n                        parachainBlockNumber: block.block.header.number.toString(),\n                        relaychainBlockNumber: '821' || validationData.relayParentNumber.toString()\n                    })\n                }                \n            })\n\n    }, [apiInstance]);\n\n    useEffect(() => {\n        if (loading) return;\n        subscribeNewBlocks();\n    }, [loading, subscribeNewBlocks])\n\n    return lastBlock;\n}\n\nexport const [LastBlockProvider, useLastBlockContext] = constate(useSubscribeNewBlock);","import { ApolloCache, ApolloClient, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { relativeTimeRounding } from 'moment';\nimport { useEffect } from 'react';\nimport { LastBlock } from '../../generated/graphql';\nimport { GetLastBlockQueryResponse, GET_LAST_BLOCK } from './useLastBlockQuery';\nimport { useLastBlockContext } from './useSubscribeNewBlockNumber'\n\nexport const __typename = 'LastBlock';\nexport const id = __typename;\n\nexport const writeLastBlock = (cache: ApolloCache<NormalizedCacheObject>, lastBlock: LastBlock) => {\n    return cache.writeQuery<GetLastBlockQueryResponse>({\n        query: GET_LAST_BLOCK,\n        data: {\n            lastBlock\n        }\n    })\n}\nexport const useRefetchWithNewBlock = (client: ApolloClient<NormalizedCacheObject>) => {\n    const lastBlock = useLastBlockContext();\n\n    useEffect(() => {\n        writeLastBlock(client.cache, {\n            __typename,\n            id,\n            ...lastBlock\n        });\n    }, []);\n\n    useEffect(() => {\n        if (!lastBlock) return;\n\n        const lastBlockData = client.cache.readQuery<GetLastBlockQueryResponse>({\n            query: GET_LAST_BLOCK\n        });\n\n        if (!lastBlockData?.lastBlock?.parachainBlockNumber) {\n            // received the first real lastBlockNumber, don't refetch just yet\n            writeLastBlock(client.cache, {\n                __typename,\n                id,\n               ...lastBlock\n            })\n        } else {\n            // lastBlockNumber has been updated, and it's not the first time\n            // refetch queries that depend on the lastBlockNumber\n            client.refetchQueries({\n                updateCache(cache) {\n                    writeLastBlock(cache, {\n                        __typename,\n                        id,\n                        ...lastBlock\n                    })\n                }\n            })\n        }\n    }, [lastBlock]);\n}","import { useApolloClient, useQuery } from '@apollo/client';\nimport constate from 'constate';\nimport { loader } from 'graphql.macro'\nimport { useEffect } from 'react';\nimport { Account, LastBlock, Query } from '../../../generated/graphql';\nimport { GET_CONFIG } from '../../config/useGetConfigQuery';\n\nexport const GET_ACTIVE_ACCOUNT = loader('./../graphql/GetActiveAccount.query.graphql');\n\nexport interface GetActiveAccountQueryResponse {\n    account: Query['account'],\n    lastBlock: Query['lastBlock'],\n}\n\n// TODO: turn this into a lazy query instead, so it does not get fetched right away\nexport const useGetActiveAccountQuery = () => {\n    const client = useApolloClient();\n    const result = useQuery<GetActiveAccountQueryResponse>(GET_ACTIVE_ACCOUNT, {\n        notifyOnNetworkStatusChange: true,\n    });\n\n    // when the active account updates, refetch the config\n    // since the config for `feePaymentAsset` depends on the active account\n    useEffect(() => {\n        client.refetchQueries({\n            // include: [GET_CONFIG]\n        });\n    }, [result.data?.account?.id])\n\n    return result;\n}\nexport const [GetActiveAccountQueryProvider, useGetActiveAccountQueryContext] = constate(useGetActiveAccountQuery);","import { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { ClaimVestedAmountMutationVariables } from './useClaimVestedAmountMutation';\nimport { ExtrinsicStatus } from '@polkadot/types/interfaces/author';\nimport { DispatchError, EventRecord } from '@polkadot/types/interfaces/system';\nimport log from 'loglevel';\nimport { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { ApiPromise } from '@polkadot/api';\n\n/**\n * Run an async function and handle the thrown errors\n * with an array of error handlers, which may handle the errors gracefully\n * \n * @param fn \n * @param errorHandlers \n * @returns \n */\nexport type resolve = (result?: any) => void;\nexport type reject = (error?: any) => void;\nexport const withGracefulErrors = async (\n    fn: (resolve: resolve, reject: reject) => Promise<any>,\n    errorHandlers: ((error: any) => void)[]\n) => {\n    return new Promise<any>(async (resolve, reject) => {\n        try {\n            resolve(await fn(resolve, reject));\n        } catch (e: any) {\n            console.log('graceful error', e);\n            e = errorHandlers.reduce((e, errorHandler) => errorHandler(e), e);\n            // rejecting this promise with an error instead of throwing an error\n            // is necessary to reflect the apollo resolver loading state correctly\n            e ? reject(e) : resolve(null)\n        }\n    })\n}\n\nexport const cancelledErrorMessage = 'Cancelled';\n\n/**\n * This is an example graceful error handler,\n * if this would return `e` instead of `void`,\n * then the following graceful error handler would be triggered,\n * or by default the error would be thrown.\n * \n * @param e\n * @returns \n */\nexport const gracefulExtensionCancelationErrorHandler = (e: any) => {\n    if ((e as Error)?.message === cancelledErrorMessage) {\n        log.error('Operation presumably cancelled by the user in the Polkadot.js extension')\n        return;\n    }\n    return e;\n}\n\nexport const vestingClaimHandler = (resolve: resolve, reject: reject, apiInstance?: ApiPromise) => ({\n    status,\n    events = [],\n    dispatchError\n}: {\n    status: ExtrinsicStatus,\n    events: EventRecord[],\n    dispatchError?: DispatchError\n}) => {\n    if (status.isFinalized) log.info('operation finalized')\n\n    // TODO: extract intention registred for exchange buy/sell\n    events.forEach(({ event: { data, method, section }, phase }) => {\n        console.log('event handler', phase.toString(), `: ${section}.${method}`, data.toString());\n    });\n\n    // TODO: handle status via the action log / notification stack\n    if (status.isInBlock) {\n        console.log('is in block', status.createdAtHash?.toString());\n        if (dispatchError?.isModule) {\n            return log.info('operation unsuccessful',\n                !apiInstance\n                    ? dispatchError\n                    : apiInstance.registry.findMetaError(dispatchError.asModule)\n            );\n        }\n\n        return log.info('operation successful');\n    }\n\n    // if the operation has been broadcast, finish the mutation\n    if (status.isBroadcast) {\n        log.info('transaction has been broadcast', status.hash.toHuman());\n        return resolve();\n    }\n    if (dispatchError) {\n        log.error('There was a dispatch error', dispatchError);\n        return reject('Dispatch error');\n    }\n};\n\nexport const noAccountSelectedError = 'No Account selected';\nexport const polkadotJsNotReadyYetError = 'Polkadot.js is not ready yet';\n\nexport const useVestingMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const claimVestedAmount = useResolverToRef(\n        useCallback(async (\n            _obj,\n            variables: ClaimVestedAmountMutationVariables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            const address = variables?.address\n                ? variables.address\n                : cache.readQuery<GetActiveAccountQueryResponse>({\n                    query: GET_ACTIVE_ACCOUNT\n                })?.account?.id;\n\n            // TODO: error handling?\n            if (!address) throw new Error(noAccountSelectedError);\n            if (loading || !apiInstance) throw new Error(polkadotJsNotReadyYetError);\n\n            // // TODO: why does this not return a tx hash?\n            return await withGracefulErrors(async (resolve, reject) => {\n                const { signer } = await web3FromAddress(address);\n                await apiInstance.tx.vesting.claim()\n                    .signAndSend(\n                        address,\n                        { signer },\n                        vestingClaimHandler(resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ])\n\n        }, [loading, apiInstance]),\n        'claimVestedAmount'\n    )\n\n    return {\n        claimVestedAmount\n    }\n}","import { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, polkadotJsNotReadyYetError, reject, resolve, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\nimport { TransferBalanceMutationVariables } from './useTransferBalanceMutation';\nimport { ExtrinsicStatus } from '@polkadot/types/interfaces/author';\nimport { DispatchError } from '@polkadot/types/interfaces/system';\nimport log from 'loglevel';\nimport { ApiPromise } from '@polkadot/api';\nimport { RuntimeDispatchInfo } from '@polkadot/types/interfaces/payment';\n\n// TODO: use validate JSON schema module of some sort\nexport const invalidTransferVariablesError = 'Invalid transfer parameters provided';\n\nexport const transferBalanceHandler = (\n    apiInstance: ApiPromise,\n    resolve: resolve, \n    reject: reject\n) => ({\n    status,\n    dispatchError\n}: {\n    status: ExtrinsicStatus,\n    dispatchError?: DispatchError\n}) => {\n    if (status.isFinalized) log.info('operation finalized')\n\n    // TODO: handle status via the action log / notification stack\n    if (status.isInBlock) {\n        if (dispatchError?.isModule) {\n            return log.error('transfer unsuccessful', \n                apiInstance.registry.findMetaError(dispatchError.asModule)\n            );\n        }\n\n        return log.info('transfer successful');\n    }\n\n    // if the operation has been broadcast, finish the mutation\n    if (status.isBroadcast) {\n        log.info('transaction has been broadcast');\n        return resolve();\n    }\n    if (dispatchError) {\n        log.error('There was a dispatch error', \n            apiInstance.registry.findMetaError(dispatchError.asModule)\n        );\n        return reject();\n    }\n}\n\nexport const transferBalanceExtrinsic = (apiInstance: ApiPromise) => apiInstance.tx.currencies.transfer;\n\nexport const useEstimateTransferBalance = ({ from, to, currencyId, amount }: TransferBalanceMutationVariables) => {\n    const { apiInstance } = usePolkadotJsContext();\n    const [paymentInfo, setPaymentInfo] = useState<RuntimeDispatchInfo | undefined>(undefined);\n\n    const estimatePaymentInfo = useCallback(async () => {\n        if (!apiInstance || !from || !to || !currencyId || !amount) return setPaymentInfo(undefined);\n        \n        const paymentInfo = await transferBalanceExtrinsic(apiInstance)\n                .apply(apiInstance, [to, currencyId, amount])\n                .paymentInfo(from);\n        \n        setPaymentInfo(paymentInfo);\n\n    }, [apiInstance, from, to, currencyId, amount, setPaymentInfo]);\n\n    return { estimatePaymentInfo, paymentInfo };\n}\n\nexport const useBalanceMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const transferBalance = useResolverToRef(\n        useCallback(async (\n            _obj,\n            { from, to, currencyId, amount }: TransferBalanceMutationVariables\n        ) => {\n            if (!from || !to || !currencyId || !amount) throw new Error(invalidTransferVariablesError);\n            if (loading || !apiInstance) throw new Error(polkadotJsNotReadyYetError);\n\n            return withGracefulErrors(async (resolve, reject) => {\n                const { signer } = await web3FromAddress(from);\n                await transferBalanceExtrinsic(apiInstance).apply(apiInstance, [to, currencyId, amount])\n                    .signAndSend(\n                        from,\n                        { signer },\n                        transferBalanceHandler(apiInstance, resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ]);\n        }, [apiInstance, loading])\n    )\n\n    return {\n        transferBalance\n    }\n}","import { web3Enable } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\n\nexport const __typename = 'Extension';\nexport const id = __typename;\nexport const useExtensionQueryResolvers = () => {\n    /**\n     * TODO: handle the followingc cases gracefully:\n     * - pending authorization request exists\n     * - user rejects the connection in the extension\n     * - app tries to connect again, after the connection has been rejected\n     */\n    const extension = useResolverToRef(\n        useCallback(async () => {\n            const extensions = await web3Enable('basilisk-ui');\n            return {\n                __typename,\n                id,\n                isAvailable: !!extensions.length,\n            };\n        }, [])\n    )\n\n    return {\n        extension\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { usePersistentConfig } from './usePersistentConfig';\n\nexport const accountCurrencyMapDataType = 'Option<u32>';\n\nexport const __typename = 'Config';\nexport const id = __typename;\n\nexport const nativeAssetId = '0';\n\nexport const useConfigQueryResolvers = () => {\n    const [persistedConfig] = usePersistentConfig();\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    const config = useResolverToRef(\n        useCallback(async (\n            _obj,\n            _variables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            if (!apiInstance || loading) return;\n\n            // TODO: evict config from the cache after active account changes\n            const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                query: GET_ACTIVE_ACCOUNT\n            })?.account?.id;\n\n            let feePaymentAsset =  address\n                ? apiInstance.createType(\n                    accountCurrencyMapDataType,\n                    await apiInstance.query.multiTransactionPayment.accountCurrencyMap(address)\n                )?.toHuman()\n                : null\n\n            feePaymentAsset = feePaymentAsset ? feePaymentAsset : nativeAssetId\n            \n            return {\n                __typename,\n                id,\n                ...persistedConfig,\n                feePaymentAsset\n            };\n        }, [apiInstance, loading])\n    );\n\n    return {\n        config\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../accounts/queries/useGetActiveAccountQuery';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../vesting/useVestingMutationResolvers';\nimport { defaultConfigValue, usePersistentConfig } from './usePersistentConfig';\nimport { SetConfigMutationVariables } from './useSetConfigMutation';\n\nexport const defaultAssetId = '0';\n\nexport const setCurrencyHandler = (resolve: resolve, reject: reject) => {\n    return vestingClaimHandler(resolve, reject);\n}\n\nexport const useConfigMutationResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const [_persistedConfig, setPersistedConfig] = usePersistentConfig();\n\n    const setConfig = useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: SetConfigMutationVariables,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            // TODO: error handling?\n            if (!apiInstance || loading) return;\n\n            // TODO: return an optimistic update to the cache with the new config\n            await withGracefulErrors(async (resolve, reject) => {\n                const address = cache.readQuery<GetActiveAccountQueryResponse>({\n                    query: GET_ACTIVE_ACCOUNT\n                })?.account?.id;\n\n                if (!address) return resolve();\n\n                const { signer } = await web3FromAddress(address);\n                \n                await apiInstance.tx.multiTransactionPayment.setCurrency(\n                    args.config?.feePaymentAsset || defaultAssetId\n                )\n                    .signAndSend(\n                        address,\n                        { signer },\n                        setCurrencyHandler(resolve, reject)\n                    )\n            }, [\n                gracefulExtensionCancelationErrorHandler\n            ]);\n            \n            const persistableConfig = args.config;\n            // there's no point in persisting the feePaymentAsset since it will\n            // be refetched from the node anyways\n            delete persistableConfig?.feePaymentAsset;\n            \n            setPersistedConfig(() => persistableConfig || defaultConfigValue);\n        }, [apiInstance, loading])\n    );\n\n    return {\n        setConfig\n    }\n}","import { useCallback } from 'react'\nimport { FeePaymentAsset } from '../../generated/graphql';\nimport { useResolverToRef } from '../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\n\nexport const __typename: FeePaymentAsset['__typename'] = 'FeePaymentAsset';\nexport const useFeePaymentAssetsQueryResolvers = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const feePaymentAssets = useResolverToRef(\n        useCallback(async () => {\n            if (!apiInstance || loading) return;\n\n            const acceptedCurrencies = await apiInstance.query.multiTransactionPayment.acceptedCurrencies.entries()\n            const feePaymentAssets: FeePaymentAsset[] = acceptedCurrencies.map((acceptedCurrency) => {\n                const assetId = (acceptedCurrency[0].toHuman() as string[])[0];\n                return {\n                    // TODO: is there a safer type way to do this?\n                    // TODO: maybe? combine this with known asset data\n                    __typename,\n                    id: assetId,\n                    assetId: assetId,\n                    fallbackPrice: acceptedCurrency[1].toString()\n                }\n            })\n            \n            return feePaymentAssets;\n        }, [apiInstance, loading])\n    );\n\n    return {\n        feePaymentAssets\n    }\n}","import constate from 'constate';\nimport { useEffect, useState } from 'react'\n\n// TODO: figure out how to extract types from the wasm type definitions\nexport interface HydraDxMathXyk {\n    get_spot_price: (a: string, b: string, c: string) => string | undefined,\n    calculate_in_given_out: (a: string, b: string, c: string) => string | undefined,\n    calculate_out_given_in: (a: string, b: string, c: string) => string | undefined\n}\n\nexport interface HydraDxMathLbp {\n    calculate_linear_weights: (start_x: string, end_x: string, start_y: string, end_y: string, at: string) => string,\n    calculate_in_given_out: (s: string, b: string, s_w: string, b_w: string, a: string) => string,\n    calculate_out_given_in: (s: string, b: string, s_w: string, b_w: string, a: string) => string,\n    get_spot_price: (s: string, b: string, s_w: string, b_w: string, a: string) => string,\n}\n\nexport interface HydraDxMath {\n    xyk: HydraDxMathXyk,\n    lbp: HydraDxMathLbp\n}\n\nexport const loadMath = async (): Promise<HydraDxMath> => {\n    return {\n        xyk: await import('hydra-dx-wasm/build/xyk/bundler'),\n        lbp: await import('hydra-dx-wasm/build/lbp/bundler') as unknown as HydraDxMathLbp\n    }\n}\n\n/**\n * Load the wasm math module\n * @returns \n */\nexport const useMath = () => {\n    const [wasm, setWasm] = useState<{\n        instance: HydraDxMath | undefined,\n        loading: boolean\n    } | undefined>({\n        instance: undefined,\n        loading: true,\n    });\n\n    useEffect(() => {\n        (async () => {\n            setWasm({\n                // TODO: if the module path is a variable, the module can't be found for some reason\n                instance: await loadMath(),\n                loading: false,\n            });\n        })();\n    }, [setWasm])\n\n    // TODO if we need additional math functions outside of wasm,\n    // inject them here\n    return { math: wasm?.instance, loading: wasm?.loading };\n}\n\nexport const [MathProvider, useMathContext] = constate(useMath);","import { useCallback } from 'react';\nimport { XykPool } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport type { StorageKey } from '@polkadot/types';\nimport type { AnyTuple, Codec } from '@polkadot/types/types';\nimport { ApiPromise } from '@polkadot/api';\n\nexport type PoolAssets = string[];\nexport const poolAssetsDataType = '(u32, u32)';\n\nexport const mapToPoolId = ([storageKey, codec]: [StorageKey<AnyTuple>, Codec]): [string, Codec] => {\n    const id = (storageKey.toHuman() as string[])[0];\n    return [id, codec];\n}\n\nexport const mapToPool = (apiInstance: ApiPromise) => ([id, codec]: [string, Codec]) => {\n    const poolAssets = codec.toHuman() as PoolAssets;\n\n    if (!poolAssets) return;\n\n    return {\n        id,\n        assetInId: poolAssets[0],\n        assetOutId: poolAssets[1],\n    } as XykPool\n}\n\nexport const useGetXykPools = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string, assetIds?: string[]) => {\n        if (!apiInstance || loading) return [];\n\n        if (poolId) {\n            return [(await apiInstance.query.xyk.poolAssets(poolId))]\n                .map(pool => [poolId, pool] as [string, Codec])\n                .map(mapToPool(apiInstance))\n        }\n    \n        return (await apiInstance.query.xyk.poolAssets.entries())\n            .map(mapToPoolId)  \n            .map(mapToPool(apiInstance)) || []\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import BigNumber from 'bignumber.js'\n\nexport const hundredWithPrecision6 = new BigNumber('100')\n    .multipliedBy(\n        new BigNumber('10').pow('6')\n    )\n\n/**\n * LBP pools specify weights only for the first asset in the pool,\n * the `opposite` weights need to be calculated by subtracting from `100`\n * @param weight \n * @returns Calculated oppostite weight as `100 - weight`\n */\nexport const calculateOppositeAssetWeight = (weight: string): string => {\n    return new BigNumber(hundredWithPrecision6)\n        .minus(\n            new BigNumber(weight)\n        )\n        .toFixed(0)\n}\n","import { LbpAssetWeights, LbpPool, Pool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\n\n/**\n * Used to determine the current asset weight, given the initial/final weights \n * and the interval it should be interpolated on.\n * \n * @param math \n * @param pool \n * @param weights \n * @param relaychainBlockNumber \n * @returns Current asset weight, calculated lineary from the inputs above\n */\nexport const calculateCurrentAssetWeight = (\n    math: HydraDxMath,\n    pool: Pick<LbpPool, 'startBlock' | 'endBlock'>,\n    weights: Pick<LbpAssetWeights, 'initial' | 'final'>,\n    relaychainBlockNumber: string\n): string => {\n    return math.lbp.calculate_linear_weights(\n        pool.startBlock,\n        pool.endBlock,\n        weights.initial,\n        weights.final,\n        relaychainBlockNumber\n    );\n}","import { ApolloClient, NormalizedCache } from '@apollo/client';\nimport { GetLastBlockQueryResponse, GET_LAST_BLOCK } from './useLastBlockQuery';\n\nexport const readLastBlock = (client: ApolloClient<object>) => {\n    return client.cache.readQuery<GetLastBlockQueryResponse>({\n        query: GET_LAST_BLOCK\n    });\n}","import { AccountId, AssetId } from '@open-web3/orml-types/interfaces';\nimport { ApiPromise } from '@polkadot/api';\nimport { useCallback } from 'react';\nimport { Fee, LbpAssetWeights, LbpPool } from '../../generated/graphql';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs';\nimport type { Codec } from '@polkadot/types/types';\nimport { mapToPoolId } from './useGetXykPools';\nimport { calculateOppositeAssetWeight } from './lbp/calculateOppositeAssetWeight';\nimport { HydraDxMath, useMath, useMathContext } from '../math/useMath';\nimport { calculateCurrentAssetWeight } from './lbp/calculateCurrentAssetWeight';\nimport { partial } from 'lodash';\nimport { ApolloClient, useApolloClient } from '@apollo/client';\nimport { readLastBlock } from '../lastBlock/readLastBlock';\nimport { getLockedBalanceByAddressAndLockId } from '../vesting/useGetVestingScheduleByAddress';\nimport log from 'loglevel';\nimport BigNumber from 'bignumber.js';\n\nexport type AssetPair = number[];\nexport interface PoolData {\n    assets: AssetPair,\n    feeCollector: string,\n    fee: {\n        numerator: number,\n        denominator: number\n    },\n    repayTarget: number,\n    initialWeight: number,\n    finalWeight: number,\n    start: number,\n    end: number,\n}\n\n// ID isnt parsed when converting the codec into a JSON\nexport const lbpRepayFeeLockId = '0x6c6270636c6c6374' // 'lbpcllct';\nexport const balanceDataType = 'BalanceOf';\n\n// fee applied in a case when the repayTarget has not been reached\nconst repayFee: Fee = {\n    numerator: '2',\n    denominator: '10',\n}\n\n/**\n * @param math \n * @param client \n * @returns Function to format the given codec into an LBPPool\n */\nexport const mapToPool = (\n    math: HydraDxMath,\n    client: ApolloClient<object>,\n    apiInstance: ApiPromise\n) => \n    /**\n     * @param [id, codec]\n     * @returns LBPPool parsed from the coded provided as an argument\n     */\n    async ([id, codec]: [string, Codec]) => {\n        // TODO this is possibly VERY unsafe and needs to be revisited for type parsing / creation\n        const poolData = codec.toJSON() as unknown as PoolData;\n        const lastBlockData = readLastBlock(client);\n        const relaychainBlockNumber = lastBlockData?.lastBlock?.relaychainBlockNumber;\n        \n        if (!poolData || !relaychainBlockNumber) return;\n\n        const feeCollector = poolData.feeCollector.toString();\n        const repayTarget = apiInstance.createType(\n            balanceDataType,\n            poolData.repayTarget.toString()\n        ).toString()\n\n        // construct the pool entity without weights\n        const partialPool: Omit<LbpPool, 'assetBWeights' | 'assetAWeights' | 'repayTargetReached' | 'fee'> = {\n            id,\n            assetInId: poolData.assets[0].toString(),\n            assetOutId: poolData.assets[1].toString(),\n            startBlock: poolData.start.toString(),\n            endBlock: poolData.end.toString()\n        }\n\n        // determine weights for asset A\n        const partialAssetAWeights: Omit<LbpAssetWeights, 'current'> = {\n            initial: poolData.initialWeight.toString(),\n            final: poolData.finalWeight.toString(),\n        }\n\n        const assetAWeights: LbpAssetWeights = {\n            ...partialAssetAWeights,\n            current: calculateCurrentAssetWeight(\n                math,\n                partialPool,\n                partialAssetAWeights,\n                relaychainBlockNumber\n            )\n        }\n\n         // determine weights for asset B\n         const assetBWeights: LbpAssetWeights = {\n            initial: calculateOppositeAssetWeight(assetAWeights.initial),\n            final: calculateOppositeAssetWeight(assetAWeights.final),\n            current: calculateOppositeAssetWeight(assetAWeights.current)\n        }\n\n        // TODO: this function only works by finding the first lock with the given ID\n        // TODO: this data fetching should be moved to a resolver, and this mapper\n        // should be a plain function\n        const feeCollectorBalanceLockAmount = (await getLockedBalanceByAddressAndLockId(\n            apiInstance,\n            feeCollector, \n            lbpRepayFeeLockId\n        ))?.amount?.toString();\n        \n        const repayTargetReached = repayTarget && feeCollectorBalanceLockAmount\n            // if collected fees are greater than the repay target, the repay target has been reached\n            // this means that we won't apply the repay fee down the line\n            ? new BigNumber(feeCollectorBalanceLockAmount).gt(new BigNumber(repayTarget))\n            : false\n\n        const poolFee: Fee = {\n            numerator: poolData.fee.numerator.toString(),\n            denominator: poolData.fee.denominator.toString(),\n        }\n\n        const pool: LbpPool = {\n            ...partialPool,\n            assetAWeights,\n            assetBWeights,\n            repayTargetReached,\n            // if we've haven't reached the repay target, the pool will carry a larger fee\n            fee: repayTargetReached ? poolFee : repayFee\n        };\n\n        return pool;\n    }\n\nexport const getLbpPools = async (\n    apiInstance: ApiPromise,\n    math: HydraDxMath,\n    client: ApolloClient<object>\n) => {\n    return await Promise.all(\n        (await apiInstance.query.lbp.poolData.entries())\n            .map(mapToPoolId) \n            .map(mapToPool(math, client, apiInstance))\n    ) || [];\n}\n\n/**\n * Hook to fetch and map LBPPool data\n * @returns Function that returns the on-chain LBPPool(s)\n */\nexport const useGetLbpPools = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const { math } = useMathContext()\n\n    return useCallback(async (client: ApolloClient<object>) => {\n        // return an empty array by default\n        if (!apiInstance || loading || !math) return [];\n        return getLbpPools(apiInstance, math, client);\n    }, [apiInstance, loading, math])\n}","import { ApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport log from 'loglevel';\nimport { useCallback } from 'react';\nimport { HydraDxMath, useMathContext } from '../math/useMath';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { mapToPool } from './useGetLbpPools';\n\nexport const getLbpPool = async (\n    math: HydraDxMath,\n    client: ApolloClient<object>,\n    apiInstance: ApiPromise,\n    poolId: string,\n) => {\n    return await mapToPool(math, client, apiInstance)([\n        poolId,\n        await apiInstance.query.lbp.poolData(poolId)\n    ])\n}\n\nexport const useGetLbpPool = () => {\n    const { apiInstance } = usePolkadotJsContext();\n    const { math } = useMathContext();\n\n    return useCallback(async (\n        client: ApolloClient<object>, \n        poolId?: string\n    ) => {\n        log.debug('useGetLbpPool', apiInstance, poolId, math)\n        if (!apiInstance || !poolId || !math) return;\n        return getLbpPool(math, client, apiInstance, poolId);\n    }, [apiInstance, math])\n}","import { ApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { Codec } from '@polkadot/types/types';\nimport { isArray, isObject } from 'lodash';\nimport log from 'loglevel';\nimport { useCallback } from 'react';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { LbpPool, XykPool } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers';\nimport { __typename } from '../../accounts/resolvers/useGetAccountsQueryResolver';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { useGetLbpPool } from '../useGetLbpPool';\nimport { useGetLbpPools } from '../useGetLbpPools';\nimport { useGetXykPool } from '../useGetXykPool';\nimport { useGetXykPools } from '../useGetXykPools';\n\nexport interface PoolQueryResolverArgs {\n    poolId?: string,\n    assetIds?: string[],\n    poolType?: PoolType\n}\n// Filter those out, until the following issue is implemented\n// https://github.com/galacticcouncil/Basilisk-node/issues/248\nexport const defaultLbpPoolId = 'bXnAY36Vvd3HdWTX5v1Cgej2tYFsq1UpzShWyAQAr5HQ9FaJx';\nexport const defaultXykPoolId = 'bXnAY36Vvd3HdWTX5v1Cgej2tYFsq1UpzShWyAQAr5HQ9FaJx';\n\nexport interface PoolIds {\n    lbpPoolId?: string,\n    xykPoolId?: string\n}\n\nexport const getPoolIdsByAssetIds = async (apiInstance: ApiPromise, assetIds: string[]) => {\n    let lbpPoolId: string | undefined = (await (apiInstance.rpc as any).lbp.getPoolAccount(\n        assetIds[0], assetIds[1]\n    )).toHuman();\n    \n    let xykPoolId: string | undefined = (await (apiInstance.rpc as any).xyk.getPoolAccount(\n        assetIds[0], assetIds[1]\n    )).toHuman();\n\n    return {\n        lbpPoolId,\n        xykPoolId\n    }\n}\n\nexport const useGetPoolsQueryResolver = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const getLbpPools = useGetLbpPools();\n    const getXykPools = useGetXykPools();\n    const getXykPool = useGetXykPool();\n    const getLbpPool = useGetLbpPool();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args?: PoolQueryResolverArgs,\n            context?: { client: ApolloClient<object> }\n        ) => {\n            if (!apiInstance || loading || !context?.client) return;\n            log.debug('useGetPoolsQueryResolver', 'fetching pools', args);\n\n            // use the provided poolId\n            let poolId = args?.poolId;\n            let poolIds: PoolIds = {\n                lbpPoolId: poolId,\n                xykPoolId: poolId\n            };\n\n            // if we're querying by assetIds, find the poolIds via RPC\n            if (args?.assetIds) {\n                poolIds = await getPoolIdsByAssetIds(apiInstance, args.assetIds);\n                log.debug('useGetPoolsQueryResolver', 'found poolIDs', poolIds, apiInstance);\n            }\n\n            // if the poolId is specified, try resolving with a single pool\n            if (poolIds.xykPoolId || poolIds.lbpPoolId) {\n                let lbpPool = await getLbpPool(context.client, poolIds.lbpPoolId);\n                let xykPool = await getXykPool(poolIds.xykPoolId);\n        \n                log.debug('useGetPoolsQueryResolver', 'found pools by poolIDs', lbpPool, xykPool);\n\n                // if the assets are matching, its a default value which means the pool was not found\n                if (xykPool?.assetInId === xykPool?.assetOutId) xykPool = undefined;\n                if (lbpPool?.assetInId === lbpPool?.assetOutId) lbpPool = undefined;\n\n                log.debug('useGetPoolsQueryResolver', 'eliminated default value pools', lbpPool, xykPool);\n\n                // TODO: which pool should have priority if both types exist for the same assets?\n                const pool = xykPool || lbpPool;\n                \n                log.debug('useGetPoolsQueryResolver', 'returning a single pool', pool);\n\n                return pool && ({\n                    ...pool,\n                    __typename: xykPool \n                        ? 'XYKPool' as XykPool['__typename']\n                        : lbpPool\n                            ? 'LBPPool' as LbpPool['__typename']\n                            : undefined\n                })\n            }\n\n            // if no extra args were provided, get all the pools\n            const [lbpPools, xykPools] = await Promise.all([\n                getLbpPools(context.client),\n                getXykPools()\n            ]);\n            \n            log.debug('useGetPoolsQueryResolver', 'returning multiple pools', [lbpPools, xykPools]);\n\n            return ([] as (LbpPool | XykPool)[])\n                .concat(\n                    lbpPools\n                        ?.map(pool => ({\n                            ...pool,\n                            __typename: 'LBPPool'\n                        }) as LbpPool)\n                )\n                .concat(\n                    xykPools\n                        ?.map(pool => ({\n                            ...pool,\n                            __typename: 'XYKPool'\n                        }) as XykPool)\n                )\n\n        }, [getLbpPools]),\n        'pools'\n    )\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport { mapToPool } from './useGetXykPools';\n\nexport const useGetXykPool = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async (poolId?: string) => {\n        if (!apiInstance || loading || !poolId) return;\n\n        return mapToPool(apiInstance)([\n            poolId,\n            await apiInstance.query.xyk.poolAssets(poolId)\n        ]);\n    }, [\n        apiInstance,\n        loading\n    ])\n}","import { useCallback } from 'react';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\nimport type { Codec } from '@polkadot/types/types';\nimport { ApiPromise } from '@polkadot/api';\nimport { Asset } from '../../generated/graphql';\n\nexport const assetDataType = 'Option<u32>';\n\n// TODO: parse the symbol from the storage key, or use a static client-side symbol map\nexport const mapToAsset = (apiInstance: ApiPromise) => ([_storageKey, codec]: [unknown, Codec]) => {\n    return {\n        id: (apiInstance.createType(\n                assetDataType,\n                codec\n            ).toHuman() as string)\n    } as Asset;\n        \n}\n\nexport const useGetAssets = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n\n    return useCallback(async () => {\n        if (!apiInstance || loading) return;\n\n        // TODO: do we wanna order these by id?\n        return (await apiInstance?.query.assetRegistry.assetIds.entries())\n            .map(mapToAsset(apiInstance)) || [];\n    }, [\n        apiInstance,\n        loading\n    ]);\n}","import { useCallback } from 'react';\nimport { Asset } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { useGetAssets } from '../useGetAssets';\n\nexport const __typename: Asset['__typename'] = 'Asset';\n\nexport const useGetAssetsQueryResolver = () => {\n    const { apiInstance, loading } = usePolkadotJsContext();\n    const getAssets = useGetAssets();\n\n    return useResolverToRef(\n        useCallback(async () => {\n            return (await getAssets())\n                ?.map(asset => ({\n                    ...asset,\n                    __typename\n                }))\n        }, [\n            apiInstance,\n            loading\n        ])\n    )\n}","import { ApolloCache } from '@apollo/client';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from './queries/useGetActiveAccountQuery';\n\nexport const readActiveAccount = (\n    cache: ApolloCache<object>\n) => {\n    return cache.readQuery<GetActiveAccountQueryResponse>({\n        query: GET_ACTIVE_ACCOUNT,\n        /**\n         * TODO: if the active account query does not return all the queried data,\n         * such as vesting schedules (fields should be nullable, but they are simply not returned.\n         * Then the cache is incomplete and would return null/undefined, thats why we need to\n         * accept only partial data below.\n         */\n        returnPartialData: true,\n    })?.account\n}","import { ApolloCache } from '@apollo/client'\nimport { ApiPromise } from '@polkadot/api'\nimport { web3FromAddress } from '@polkadot/extension-dapp'\nimport { useCallback } from 'react'\nimport { readActiveAccount } from '../../accounts/readActiveAccount'\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../../vesting/useVestingMutationResolvers'\n\nexport const buyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const buy = async (\n    cache: ApolloCache<object>,\n    apiInstance: ApiPromise,\n    assetBuy: string,\n    assetSell: string,\n    amountBuy: string,\n    maxSold: string,\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        if (!address) return reject(new Error('No active account found'));\n\n        const { signer } = await web3FromAddress(address);\n        \n        await apiInstance.tx.lbp.buy(\n            assetBuy,\n            assetSell,\n            amountBuy,\n            maxSold\n        )\n            .signAndSend(\n                address,\n                { signer },\n                buyHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ])\n}","import { ApolloCache } from '@apollo/client'\nimport { ApiPromise } from '@polkadot/api'\nimport { web3FromAddress } from '@polkadot/extension-dapp'\nimport { readActiveAccount } from '../../accounts/readActiveAccount'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../../vesting/useVestingMutationResolvers'\n\nexport const sellHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const sell = async (\n    cache: ApolloCache<object>,\n    apiInstance: ApiPromise,\n    assetSell: string,\n    assetBuy: string,\n    amountSell: string,\n    minBought: string,\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        if (!address) return reject(new Error('No active account found'));\n\n        const { signer } = await web3FromAddress(address);\n        \n        await apiInstance.tx.lbp.sell(\n            assetSell,\n            assetBuy,\n            amountSell,\n            minBought\n        )\n            .signAndSend(\n                address,\n                { signer },\n                sellHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ])\n}","import { ApolloCache, NormalizedCacheObject, useApolloClient } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react'\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../../accounts/queries/useGetActiveAccountQuery';\nimport { readActiveAccount } from '../../accounts/readActiveAccount';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { withGracefulErrors, gracefulExtensionCancelationErrorHandler, vestingClaimHandler, resolve, reject } from '../../vesting/useVestingMutationResolvers';\n\nexport const xykBuyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const discount = false;\n\nexport const buy = async (\n    cache: ApolloCache<NormalizedCacheObject>,\n    apiInstance: ApiPromise,\n    assetBuy: string, // 1\n    assetSell: string, // 49.7 + 0.2% = 49.9\n    amountBuy: string, // 99\n    maxSold: string, // 49.5 + 0.5%\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        // TODO: extract this error\n        if (!address) return reject(new Error('No active account found!'));\n\n        const { signer } = await web3FromAddress(address);\n\n        await apiInstance.tx.xyk.buy(\n            assetBuy,\n            assetSell,\n            amountBuy,\n            maxSold,\n            discount\n        )\n            .signAndSend(\n                address,\n                { signer },\n                xykBuyHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ])\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport { ApiPromise } from '@polkadot/api';\nimport { web3FromAddress } from '@polkadot/extension-dapp';\nimport { useCallback } from 'react';\nimport { GetActiveAccountQueryResponse, GET_ACTIVE_ACCOUNT } from '../../accounts/queries/useGetActiveAccountQuery';\nimport { readActiveAccount } from '../../accounts/readActiveAccount';\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs'\nimport { gracefulExtensionCancelationErrorHandler, reject, resolve, vestingClaimHandler, withGracefulErrors } from '../../vesting/useVestingMutationResolvers';\n\nexport const xykBuyHandler = (resolve: resolve, reject: reject, apiInstance: ApiPromise) => {\n    return vestingClaimHandler(resolve, reject, apiInstance);\n}\n\nexport const discount = false;\n\nexport const sell = async (\n    cache: ApolloCache<NormalizedCacheObject>,\n    apiInstance: ApiPromise,\n    assetSell: string,\n    assetBuy: string,\n    amountSell: string,\n    minBought: string,\n) => {\n    await withGracefulErrors(async (resolve, reject) => {\n        const activeAccount = readActiveAccount(cache);\n        const address = activeAccount?.id;\n\n        if (!address) return reject(new Error('No active account found!'));\n\n        const { signer } = await web3FromAddress(address);\n\n        await apiInstance.tx.xyk.sell(\n            assetSell,\n            assetBuy,\n            amountSell,\n            minBought,\n            discount\n        )\n            .signAndSend(\n                address,\n                { signer },\n                xykBuyHandler(resolve, reject, apiInstance)\n            )\n    }, [\n        gracefulExtensionCancelationErrorHandler\n    ]);\n}","import { useSubmitTradeMutationResolver } from './useSubmitTradeMutationResolvers'\n\nexport const usePoolsMutationResolvers = () => {\n    const submitTrade = useSubmitTradeMutationResolver();\n    \n    return {\n        submitTrade\n    }\n}","import { ApolloCache, NormalizedCacheObject } from '@apollo/client';\nimport BigNumber from 'bignumber.js';\nimport { gql } from 'graphql.macro';\nimport { useCallback } from 'react'\nimport { PoolType } from '../../../components/Chart/shared';\nimport { Maybe, TradeType } from '../../../generated/graphql';\nimport { useResolverToRef } from '../../accounts/resolvers/useAccountsMutationResolvers'\nimport { usePolkadotJsContext } from '../../polkadotJs/usePolkadotJs';\nimport { SubmitTradeMutationVariables } from '../mutations/useSubmitTradeMutation';\nimport { buy as buyLbp } from '../lbp/buy';\nimport { sell as sellLbp } from '../lbp/sell';\nimport { buy as buyXyk } from '../xyk/buy'\nimport { sell as sellXyk } from '../xyk/sell';\n\n// this is for buy, for sell we need to use minus, not plus\nexport const applyAllowedSlippage = (\n    amount: string, \n    allowedSlippage: string,\n    tradeType: TradeType\n) => {\n    let slippageAmount = new BigNumber(amount)\n        .multipliedBy(\n            new BigNumber(allowedSlippage)\n                .dividedBy(100)\n        )\n\n    const amountBN = new BigNumber(amount);\n    \n    const amountWithSlippage = tradeType === TradeType.Buy\n            // if you're buying an exact amount,\n            // you must be willing to pay more\n            ? amountBN.plus(slippageAmount)\n            // if you're selling an exact amount,\n            // you should be willing to receive less\n            : amountBN.minus(slippageAmount)\n    \n    return amountWithSlippage.toFixed(0);\n}\n\nexport const applyTradeFee = (\n    amount: string,\n    // TODO: get this from constants\n    tradeFee: string = '0.002', // 0.2% default\n    tradeType: TradeType\n) => {\n    let fee = new BigNumber(amount)\n        .multipliedBy(\n            new BigNumber(tradeFee)\n        )\n\n    const amountBN = new BigNumber(amount);\n    \n    const amountWithFee = tradeType === TradeType.Buy\n            ? amountBN.plus(fee)\n            : amountBN.minus(fee);\n            \n    return amountWithFee.toFixed(0);\n}\n\nexport const useSubmitTradeMutationResolver = () => {\n    const { apiInstance } = usePolkadotJsContext();\n\n    return useResolverToRef(\n        useCallback(async (\n            _obj,\n            args: Maybe<SubmitTradeMutationVariables>,\n            { cache }: { cache: ApolloCache<NormalizedCacheObject> }\n        ) => {\n            if (!args || !apiInstance) return\n            if (args?.poolType === PoolType.XYK && args?.tradeType === TradeType.Buy) {\n                return await buyXyk(\n                    cache,\n                    apiInstance,\n                    args.assetOutId,\n                    args.assetInId,\n                    args.assetOutAmount,\n                    args.amountWithSlippage,\n                );\n            }\n\n            if (args?.poolType === PoolType.XYK && args?.tradeType === TradeType.Sell) {\n                return await sellXyk(\n                    cache,\n                    apiInstance,\n                    args.assetInId,\n                    args.assetOutId,\n                    args.assetInAmount,\n                    args.amountWithSlippage,\n                );\n            }\n\n            if (args?.poolType === PoolType.LBP && args?.tradeType === TradeType.Buy) {\n                return await buyLbp(\n                    cache,\n                    apiInstance,\n                    args.assetOutId,\n                    args.assetInId,\n                    args.assetOutAmount,\n                    args.amountWithSlippage\n                )\n            }\n\n            if (args?.poolType === PoolType.LBP && args?.tradeType === TradeType.Sell) {\n                return await sellLbp(\n                    cache,\n                    apiInstance,\n                    args.assetOutId,\n                    args.assetInId,\n                    args.assetOutAmount,\n                    args.amountWithSlippage\n                )\n            }\n\n            throw new Error('We dont support this trade type yet');\n        }, [buyXyk, sellXyk, apiInstance])\n    )\n}","import { useMemo } from 'react';\nimport { ApolloClient, createHttpLink, from, InMemoryCache, Resolvers,  } from '@apollo/client';\nimport { useAccountsQueryResolvers } from '../accounts/resolvers/useAccountsQueryResolvers';\nimport { loader } from 'graphql.macro';\nimport { useAccountsMutationResolvers } from '../accounts/resolvers/useAccountsMutationResolvers';\nimport { useRefetchWithNewBlock } from '../lastBlock/useRefetchWithNewBlock';\nimport { usePersistentConfig } from '../config/usePersistentConfig';\nimport { useVestingMutationResolvers } from '../vesting/useVestingMutationResolvers';\n\nimport { useBalanceMutationResolvers } from '../balances/useBalanceMutationResolvers';\nimport { useExtensionQueryResolvers } from '../polkadotJs/useExtensionQueryResolvers';\nimport { useConfigQueryResolvers } from '../config/useConfigQueryResolvers';\nimport { useConfigMutationResolvers } from '../config/useConfigMutationResolver';\nimport { useFeePaymentAssetsQueryResolvers } from '../feePaymentAssets/useFeePaymentAssetsQueryResolvers';\nimport { usePoolsQueryResolver } from '../pools/resolvers/usePoolsQueryResolver';\nimport { useBalanceQueryResolvers } from '../balances/useBalanceQueryResolvers';\nimport { useAssetsQueryResolvers } from '../assets/resolvers/useAssetsQueryResolvers';\nimport { usePoolsMutationResolvers } from '../pools/resolvers/usePoolsMutationResolvers';\n\n/**\n * Add all local gql resolvers here\n * @returns Resolvers\n */\nexport const useResolvers: () => Resolvers = () => {\n    const { Query: AccountsQueryResolver, Account } = useAccountsQueryResolvers();\n    const { Query: PoolsQueryResolver, XYKPool, LBPPool } = usePoolsQueryResolver()\n    return {\n        Query: {\n            ...AccountsQueryResolver,\n            ...useExtensionQueryResolvers(),\n            ...useConfigQueryResolvers(),\n            ...useFeePaymentAssetsQueryResolvers(),\n            ...useBalanceQueryResolvers(),\n            ...PoolsQueryResolver,\n            ...useAssetsQueryResolvers(),\n        },\n        Mutation: {\n            ...useAccountsMutationResolvers(),\n            ...useVestingMutationResolvers(),\n            ...useBalanceMutationResolvers(),\n            ...useConfigMutationResolvers(),\n            ...usePoolsMutationResolvers()\n        },\n        Account,\n        XYKPool,\n        LBPPool\n    }\n};\n\nexport const typeDefs = loader('./../../schema.graphql');\n\n/**\n * Recreates the apollo client instance each time the config changes\n * @returns \n */\nexport const useConfigureApolloClient = () => {\n    const resolvers = useResolvers();\n    const cache =  new InMemoryCache();\n    // can't get the config from a query before we setup apollo\n    // therefore we get it from the local storage instead\n    const [{ processorUrl }] = usePersistentConfig();\n\n    const client = useMemo(() => {\n        return new ApolloClient({\n            uri: processorUrl,\n            cache,\n            // TODO: don't connect in production\n            connectToDevTools: true,\n            queryDeduplication: true,\n            resolvers,\n            typeDefs,\n        })\n    }, [processorUrl]);\n    \n    useRefetchWithNewBlock(client);\n    \n    return client;\n};\n\nexport const useApollo = () => useConfigureApolloClient();","import { Resolver } from '@apollo/client';\nimport { useCallback } from 'react';\nimport { useBalanceQueryResolvers } from '../../balances/useBalanceQueryResolvers';\nimport { useResolverToRef } from './useAccountsMutationResolvers';\nimport { useVestingScheduleQueryResolvers } from '../../vesting/useVestingScheduleQueryResolvers';\nimport { useGetAccountsQueryResolver } from './useGetAccountsQueryResolver';\n\n/**\n * Used to resolve queries for the `Account` (or `accounts`) entity.\n */\nexport const useAccountsQueryResolvers = () => {    \n    const getAccountsQueryResolver = useGetAccountsQueryResolver();\n\n    return {\n        Query: {\n            accounts: getAccountsQueryResolver\n        },\n        /**\n         * Additional sub-resolvers for the `Account` entity,\n         * resolving e.g. the `balances` or `vestingSchedules` fields.\n         */\n        Account: {\n            ...useBalanceQueryResolvers(),\n            ...useVestingScheduleQueryResolvers()\n        }\n    }\n}","import { useBalanceQueryResolvers } from '../../balances/useBalanceQueryResolvers'\nimport { useGetPoolsQueryResolver } from './useGetPoolsQueryResolver'\n\nexport const usePoolsQueryResolver = () => {\n    const getPoolsQueryResolver = useGetPoolsQueryResolver()\n    const poolFieldsQueryResolvers = {\n        ...useBalanceQueryResolvers()\n    }\n\n    return {\n        Query: {\n            pools: getPoolsQueryResolver,\n        },\n        XYKPool: poolFieldsQueryResolvers,\n        LBPPool: poolFieldsQueryResolvers\n    }\n}","import { useGetAssetsQueryResolver } from './useGetAssetsQueryResolver'\n\nexport const useAssetsQueryResolvers = () => {\n    const getAssetsQueryResolver = useGetAssetsQueryResolver();\n\n    return {\n        assets: getAssetsQueryResolver\n        // TODO: add stuff like a total circulating supply or other data we might need\n        // Asset:\n    }\n}","import { useLazyQuery, useQuery } from '@apollo/client';\nimport constate from 'constate';\nimport { loader } from 'graphql.macro';\nimport { Query } from '../../generated/graphql';\n\nexport const GET_EXTENSION = loader('./graphql/GetExtension.query.graphql');\n\nexport interface GetExtensionQueryResponse {\n    extension: Query['extension']\n}\n\nexport const useGetExtensionQuery = () => useQuery<GetExtensionQueryResponse>(GET_EXTENSION, {\n    notifyOnNetworkStatusChange: true,\n});\n\nexport const useGetExtensionLazyQuery = () => useLazyQuery<GetExtensionQueryResponse>(GET_EXTENSION, {\n    notifyOnNetworkStatusChange: true\n})\n\nexport const [GetExtensionQueryProvider, useContextualGetExtensionLazyQuery] = constate(useGetExtensionLazyQuery);","import { ApolloProvider, useApolloClient } from '@apollo/client';\nimport React from 'react';\nimport { GetActiveAccountQueryProvider } from '../hooks/accounts/queries/useGetActiveAccountQuery';\nimport { useConfigureApolloClient } from '../hooks/apollo/useApollo';\nimport { LastBlockProvider } from '../hooks/lastBlock/useSubscribeNewBlockNumber';\nimport { GetExtensionQueryProvider } from '../hooks/polkadotJs/useGetExtensionQuery';\nimport { PolkadotJsProvider } from '../hooks/polkadotJs/usePolkadotJs';\nimport { MathProvider } from '../hooks/math/useMath';\n\nexport const ConfiguredApolloProvider = ({ children }: { children: React.ReactNode }) => {\n    const client = useConfigureApolloClient();\n    return (\n        <ApolloProvider client={client}>\n            {children}\n        </ApolloProvider>\n    )\n}\n\nexport const QueryProvider = ({ children }: { children: React.ReactNode }) => (\n    <GetExtensionQueryProvider>\n        {children}\n    </GetExtensionQueryProvider>\n)\n\n// TODO: use react-multi-provider instead of ugly nesting\nexport const MultiProvider = ({ children }: { children: React.ReactNode }) => {\n    return (\n        <PolkadotJsProvider>\n            <MathProvider>\n                <LastBlockProvider>\n                    <ConfiguredApolloProvider>\n                        <QueryProvider>\n                            {children}\n                        </QueryProvider>\n                    </ConfiguredApolloProvider>\n                </LastBlockProvider>\n            </MathProvider>\n        </PolkadotJsProvider>\n\n    )\n}","import { useQuery } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { Pool } from '../../../generated/graphql';\nimport { GetPoolsQueryResponse } from './useGetPoolsQuery';\n\nexport const GET_POOL_BY_ASSETS = loader('./../graphql/GetPoolByAssets.query.graphql');\n\nexport interface GetPoolByAssetsQueryVariables {\n    assetInId?: string,\n    assetOutId?: string,\n}\nexport interface GetPoolQueryResponse {\n    pool: Pool\n}\n\nexport const useGetPoolByAssetsQuery = (variables: GetPoolByAssetsQueryVariables) => useQuery<GetPoolQueryResponse>(\n    GET_POOL_BY_ASSETS, \n    { \n        variables,\n        notifyOnNetworkStatusChange: true,\n    }\n);","import { useMemo } from 'react'\nimport { UseFormReturn } from 'react-hook-form'\n\nexport interface TokenInputProps {\n    assetIdInputProps: object,\n    assetAmountInputProps: object,\n    disabled?: boolean\n}\n\nexport const TokenInput = ({\n    assetIdInputProps,\n    assetAmountInputProps,\n    disabled\n}: TokenInputProps) => {\n    return <div>\n        <div>\n            <b>AssetId:</b> <br/>\n            <input\n                disabled={disabled}\n                type='text' \n                {...assetIdInputProps} \n            />\n        </div>\n        <div>\n            <b>Asset amount:</b> <br/>\n            <input\n                disabled={disabled}\n                type='text' \n                {...assetAmountInputProps}\n            />\n        </div>\n    </div>\n}","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\n\nexport const PRECISION_12 = 12;\nexport const PRECISION_18 = 18;\nexport const precision12 = new BigNumber(10).pow(PRECISION_12);\nexport const precision18 = new BigNumber(10).pow(PRECISION_18);\n\nexport const fromPrecision12 = (amount?: string | BigNumber) => (\n    amount && new BigNumber(amount)\n        .dividedBy(precision12).toFixed(PRECISION_12)\n)\nexport const useFromPrecision12 = (amount?: string | BigNumber) => (\n    useMemo(() => fromPrecision12(amount), [amount])\n)\n\nexport const useFromPrecision18 = (amount?: string | BigNumber) => (\n    useMemo(() => (\n        amount && new BigNumber(amount)\n            .dividedBy(precision18).toFixed(PRECISION_18)\n    ), [amount])\n)","import BigNumber from 'bignumber.js';\nimport { useMemo } from 'react';\nimport { PRECISION_12 } from './useFromPrecision';\n\nexport const PRECISION_0 = 0;\nexport const precision12 = new BigNumber(10).pow(12);\nexport const precision18 = new BigNumber(10).pow(18);\n\nexport const toPrecision12 = (amount?: string | BigNumber) => (\n    amount && new BigNumber(amount)\n            .multipliedBy(precision12).toFixed(PRECISION_0)\n);\nexport const useToPrecision12 = (amount?: string | BigNumber) => (\n    useMemo(() => toPrecision12(amount), [amount])\n)\n\nexport const useToPrecision18 = (amount?: string | BigNumber) => (\n    useMemo(() => (\n        amount && new BigNumber(amount)\n            .multipliedBy(precision18).toFixed(PRECISION_0)\n    ), [amount])\n)","// TODO: revisit, this is very hacky, possibly a memory leak because the event handlers are not removed\n\nimport { useEffect, useState } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Trigger a state update each time the given input changes (via the `input` event)\n * @param form \n * @param field \n * @returns \n */\n export const useListenForInput = (form: UseFormReturn<TradeFormFields>, field: string) => {\n    const [state, setState] = useState<boolean>(false);\n    \n    const inputRef = (form.control._fields[field] as any)?._f?.ref;\n\n    useEffect(() => {\n        if (!inputRef) return;\n        const listener = inputRef\n            ?.addEventListener('input', () => setState(state => !state));\n        \n        return () => inputRef?.removeEventListener('input', listener);\n    }, [inputRef])\n\n    return state;\n}","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { TradeType } from '../../../generated/graphql';\n\nconst SUBMIT_TRADE = loader('./../graphql/SubmitTrade.mutation.graphql');\n\nexport interface SubmitTradeMutationVariables {\n    assetInId: string,\n    assetOutId: string,\n    assetInAmount: string,\n    assetOutAmount: string,\n    poolType: PoolType,\n    tradeType: TradeType,\n    amountWithSlippage: string\n}\n\nexport const useSubmitTradeMutation = () => useMutation<void, SubmitTradeMutationVariables>(\n    SUBMIT_TRADE, \n    {\n        notifyOnNetworkStatusChange: true\n    }\n)\n\n/**\n * lbp.buy(assetOut, assetIn, amount, maxLimit)\n * lbp.sell(assetIn, assetOut, amount, maxLimit)\n * \n * exchange.buy(assetBuy, assetSell, amountBuy, maxSold, discount)\n * exchange.sell(assetSell, assetBuy, amountSell, minBought, discount)\n */\n\n","import log from 'loglevel';\nimport { useCallback } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { PoolType } from '../../../components/Chart/shared';\nimport { TradeType } from '../../../generated/graphql';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\nimport { useSubmitTradeMutation } from '../../../hooks/pools/mutations/useSubmitTradeMutation';\nimport { applyAllowedSlippage } from '../../../hooks/pools/resolvers/useSubmitTradeMutationResolvers';\nimport { SpotPrice } from '../../../pages/TradePage/TradePage';\nimport { TradeFormProps } from '../TradeForm';\nimport { Slippage } from './useSlippage';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Submit the trade mutation once the trade form has been submitted\n * @param tradeType\n * @param pool \n * @returns \n */\n export const useHandleSubmit = (\n    tradeType: TradeType,\n    allowedSlippage: string,\n    slippage?: Slippage,\n    pool?: TradeFormProps['pool'],\n\n) => {\n    const [submitTrade] = useSubmitTradeMutation();\n    return useCallback(({\n        assetInId,\n        assetOutId,\n        assetInAmount,\n        assetOutAmount\n    }: TradeFormFields) => {\n        if (!pool) throw new Error(`Can't submit a trade mutation without a pool`);\n\n        assetInAmount = toPrecision12(assetInAmount);\n        assetOutAmount = toPrecision12(assetOutAmount);\n\n        if (!assetInId || !assetOutId || !assetInAmount || !assetOutAmount || !slippage?.spotPriceAmount) {\n            throw new Error(`Can't submit a trade mutation without all the required arguments`)\n        }\n\n        const amountWithSlippage = applyAllowedSlippage(\n            slippage?.spotPriceAmount,\n            allowedSlippage,\n            tradeType\n        );\n\n        log.debug('TradeForm.useHandleSubmit', 'amountWithSlippage', {\n            spotPriceAmount: slippage.spotPriceAmount,\n            amountWithSlippage,\n            tradeType\n        });\n\n        const poolType = pool.__typename === 'LBPPool'\n            ? PoolType.LBP\n            : PoolType.XYK\n\n        // Submit a trade with the given parameters to be handled by Apollo\n        submitTrade({ variables: {\n            tradeType,\n            assetInId,\n            assetInAmount,\n            assetOutId,\n            assetOutAmount,\n            amountWithSlippage,\n            poolType,\n        }});\n\n    }, [submitTrade, pool, tradeType, slippage]);\n}","import { find } from 'lodash';\nimport { XykPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\n\nexport const calculateOutGivenIn = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    amountIn: string,\n) => math.xyk.calculate_out_given_in(inReserve, outReserve, amountIn);\n\nexport const calculateOutGivenInFromPool = (\n    math: HydraDxMath,\n    pool: XykPool,\n    assetInId: string,\n    assetOutId: string,\n    amountIn: string,\n) => {\n    const assetInBalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetOutBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    return calculateOutGivenIn(math, assetInBalance, assetOutBalance, amountIn);\n}","import { find } from 'lodash';\nimport { LbpPool, Pool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\n\n/**\n * Wrapper for `math.lbp.calculate_in_given_out`\n * @param math\n * @param inReserve \n * @param outReserve \n * @param inWeight \n * @param outWeight \n * @param amount \n * @returns \n */\nexport const calculateInGivenOut = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    inWeight: string,\n    outWeight: string,\n    amount: string\n) => {\n    return math.lbp.calculate_in_given_out(inReserve, outReserve, inWeight, outWeight, amount);\n}\n\nexport const getPoolBalances = (pool: Pool, assetInId: string, assetOutId: string) => {\n    const assetABalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetBBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    return { assetABalance, assetBBalance }\n}\n\nexport const getInAndOutWeights = (pool: LbpPool, assetInId: string, assetOutId: string) => {\n    const assetInWeight = assetInId === pool.assetInId\n        ? pool.assetAWeights.current\n        : pool.assetBWeights.current\n\n    const assetOutWeight = assetOutId === pool.assetOutId\n        ? pool.assetBWeights.current\n        : pool.assetAWeights.current;\n\n    return { assetInWeight, assetOutWeight };\n}\n\nexport const calculateInGivenOutFromPool = (\n    math: HydraDxMath,\n    pool: LbpPool,\n    assetInId: string,\n    assetOutId: string,\n    amountOut: string,\n) => {\n    const { assetABalance: assetInBalance, assetBBalance: assetOutBalance } = getPoolBalances(\n        pool,\n        assetInId,\n        assetOutId,\n    )\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    const { assetInWeight, assetOutWeight } = getInAndOutWeights(pool, assetInId, assetOutId);\n\n    return calculateInGivenOut(\n        math, \n        assetInBalance, \n        assetOutBalance,\n        assetInWeight,\n        assetOutWeight,\n        amountOut\n    );\n}","import { find } from 'lodash';\nimport { LbpPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\nimport { getInAndOutWeights, getPoolBalances } from './calculateInGivenOut';\n\n/**\n * Wrapper for `math.lbp.calculate_out_given_in`\n * @param math \n * @param inReserve \n * @param outReserve \n * @param inWeight \n * @param outWeight \n * @param amount \n * @returns \n */\nexport const calculateOutGivenIn = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    inWeight: string,\n    outWeight: string,\n    amount: string,\n) => {\n    return math.lbp.calculate_out_given_in(inReserve, outReserve, inWeight, outWeight, amount);\n}\n\nexport const calculateOutGivenInFromPool = (\n    math: HydraDxMath,\n    pool: LbpPool,\n    assetInId: string,\n    assetOutId: string,\n    amountIn: string,\n) => {\n    const { assetABalance: assetInBalance, assetBBalance: assetOutBalance } = getPoolBalances(\n        pool,\n        assetInId,\n        assetOutId,\n    )\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    const { assetInWeight, assetOutWeight } = getInAndOutWeights(pool, assetInId, assetOutId);\n\n    return calculateOutGivenIn(\n        math, \n        assetInBalance, \n        assetOutBalance,\n        assetInWeight,\n        assetOutWeight,\n        amountIn\n    );\n}","import { XykPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\nimport { getPoolBalances } from '../lbp/calculateInGivenOut';\n\nexport const calculateInGivenOut = (\n    math: HydraDxMath,\n    outReserve: string,\n    inReserve: string,\n    amountOut: string,\n) => math.xyk.calculate_in_given_out(outReserve, inReserve, amountOut);\n\nexport const calculateInGivenOutFromPool = (\n    math: HydraDxMath,\n    pool: XykPool,\n    assetInId: string,\n    assetOutId: string,\n    amountOut: string\n) => {\n    const { assetABalance: assetInBalance, assetBBalance: assetOutBalance } = getPoolBalances(\n        pool,\n        assetInId,\n        assetOutId,\n    )\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    //TODO: argument order appears swapped when compared to the hydradx-math library\n    return calculateInGivenOut(math, assetInBalance, assetOutBalance, amountOut);\n}","import { Pool } from '../../generated/graphql';\n\n/**\n * Check if the given pool contains the selected assets\n * @param pool \n * @param assetInId \n * @param assetOutId \n * @returns \n */\nexport const poolHasAssets = (pool: Pool, assetInId: string, assetOutId: string) => {\n    const poolAssets = [pool.assetInId, pool.assetOutId];\n    return poolAssets.includes(assetInId) && poolAssets.includes(assetOutId);\n}","import BigNumber from 'bignumber.js'\nimport { useMemo } from 'react';\nimport { toPrecision12 } from './useToPrecision';\n\nexport const percentageChange = (a?: string | BigNumber, b?: string | BigNumber) => {\n    if (!a || !b) return;\n    \n    const aBN = new BigNumber(a);\n    const bBN = new BigNumber(b);\n\n    return (bBN.minus(aBN))\n        .dividedBy(aBN)\n}\nexport const usePercentageChange = (a?: string, b?: string) => (\n    useMemo(() => percentageChange(a, b), [{a, b}])\n)","import BigNumber from 'bignumber.js';\nimport { isNaN } from 'lodash';\nimport { useMemo } from 'react';\nimport { TradeType } from '../../../generated/graphql';\nimport { fromPrecision12 } from '../../../hooks/math/useFromPrecision';\nimport { percentageChange } from '../../../hooks/math/usePercentageChange';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\n\nexport interface Slippage {\n    percentualSlippage: string,\n    spotPriceAmount: string\n}\n\nexport const calculateSlippage = (\n    spotPrice: string,\n    assetInAmount: string,\n    assetOutAmount: string,\n) => {\n    const spotPriceAmount = new BigNumber(spotPrice)\n        .multipliedBy(\n            fromPrecision12(assetOutAmount)!\n        )\n        .toFixed(0);\n\n    const resultPercentageChange = percentageChange(\n        spotPriceAmount,\n        assetInAmount\n    );\n\n    if (!resultPercentageChange || resultPercentageChange.isNaN()) return;\n\n    // TODO: don't use this for every bignumber call\n    // TODO: fix edge cases for .09 decimal formatting\n    BigNumber.config({ ROUNDING_MODE: BigNumber.ROUND_UP });\n    const percentualSlippage = new BigNumber(resultPercentageChange)\n        .multipliedBy(100)\n        .abs()\n        .toFixed(10) // TODO: deal with formatting to 2 decimal places when displaying the result\n\n    const slippage: Slippage = {\n        percentualSlippage,\n        spotPriceAmount\n    }\n    return slippage\n}\n\n/**\n * Slippage is the percieved difference between\n * the given `spotPrice` and the given assetAmount`\n * \n * @param spotPrice\n * @param assetAmount \n * @returns \n */\nexport const useSlippage = (\n    tradeType: TradeType,\n    spotPrice?: {\n        aToB?: string,\n        bToA?: string\n    },\n    assetInAmount?: string,\n    assetOutAmount?: string,\n) => {\n    if (!spotPrice?.aToB || !spotPrice?.bToA || !assetInAmount || !assetOutAmount) return;\n    return calculateSlippage.apply(null,\n        tradeType === TradeType.Buy\n            ? [spotPrice.bToA, assetInAmount, assetOutAmount]\n            : [spotPrice.aToB, assetOutAmount, assetInAmount]\n    )\n}","import { Fee } from './generated/graphql';\n\nexport default {\n    appName: 'basilisk-ui',\n    xykFee: {\n        numerator: '2',\n        denominator: '1000'\n    } as Fee\n}","import BigNumber from 'bignumber.js';\nimport { Fee, LbpPool, Pool } from '../../../generated/graphql';\nimport constants from './../../../constants';\n\nexport const feeToPercentage = (fee: Fee) => {\n    return new BigNumber(fee.numerator)\n        .dividedBy(fee.denominator)\n        .multipliedBy('100')\n        .toFixed(2);\n}\n\nexport const feeFromPool = (pool?: Pool): Fee | undefined => {\n    return pool\n        ? (\n            pool.__typename === 'XYKPool'\n                ? constants.xykFee\n                : (pool as LbpPool).fee\n        ) : undefined\n}\n\nexport const usePercentageFee = (pool?: Pool) => {\n    const fee = feeFromPool(pool);\n    if (!fee) return;\n    return feeToPercentage(fee);\n} ","import { useEffect, useMemo } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { Fee, LbpPool, Pool } from '../../../generated/graphql';\nimport { TradeFormFields } from './useTradeForm';\nimport BigNumber from 'bignumber.js';\nimport log from 'loglevel';\nimport { feeFromPool, feeToPercentage } from './usePercentageFee';\n\nexport const defaultAllowedSlippage = {\n    xyk: '5',\n    lbp: '5'\n}\n\nexport const addFeeToSlippage = (slippage: string, fee?: Fee) => {\n    if (!fee) return slippage;\n    \n    return new BigNumber(slippage).plus(\n        feeToPercentage(fee)\n    ).toFixed(2);\n}\n\nexport const useCalculateAllowedSlippage = (\n    form: UseFormReturn<TradeFormFields>,\n    pool?: Pool,\n) => {\n    const watchAutoSlippage = form.watch('autoSlippage');\n    const allowedSlippageInputDisabled = useMemo(() => (\n        form.getValues('autoSlippage')\n    ), [watchAutoSlippage]);\n\n    useEffect(() => {\n        if (!allowedSlippageInputDisabled) return;\n\n        // TODO: depending on if the LBP repay fee is applied,\n        // increase the lbp default slippage\n        const allowedSlippage = pool\n            ? (\n                pool?.__typename === 'XYKPool'\n                ? defaultAllowedSlippage.xyk\n                : defaultAllowedSlippage.lbp\n            ) : defaultAllowedSlippage.xyk;\n\n        const allowedSlippageWithFee = addFeeToSlippage(\n            allowedSlippage,\n            feeFromPool(pool)\n        )\n\n        log.debug('TradeForm.useCalculateAllowedSlippage', 'allowedSlippageWithFee', allowedSlippageWithFee);\n\n        form.setValue('allowedSlippage', allowedSlippageWithFee);\n    }, [pool, allowedSlippageInputDisabled])\n\n    return { allowedSlippageInputDisabled };\n}","import log from 'loglevel'\nimport { useCallback, useEffect, useMemo, useState } from 'react'\nimport { useForm, UseFormReturn } from 'react-hook-form'\nimport { usePreviousDistinct } from 'react-use'\nimport { PoolType } from '../../components/Chart/shared'\nimport { TokenInput } from '../../components/Input/TokenInput'\nimport { Pool, TradeType } from '../../generated/graphql'\nimport { useSubmitTradeMutation } from '../../hooks/pools/mutations/useSubmitTradeMutation'\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolXYK } from '../../hooks/pools/xyk/calculateOutGivenIn'\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolLBP } from '../../hooks/pools/lbp/calculateOutGivenIn'\nimport { useMathContext } from '../../hooks/math/useMath'\nimport { fromPrecision12 } from '../../hooks/math/useFromPrecision'\nimport { toPrecision12 } from '../../hooks/math/useToPrecision'\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolLBP } from '../../hooks/pools/lbp/calculateInGivenOut'\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolXYK } from '../../hooks/pools/xyk/calculateInGivenOut'\nimport { SpotPrice } from '../../pages/TradePage/TradePage'\nimport { useTradeForm } from './hooks/useTradeForm'\nimport { useListenForInput } from './hooks/useListenForInput'\nimport { useTradeType } from './hooks/useTradeType'\nimport { useHandleAssetIdsChange } from './hooks/useHandleAssetIdsChange'\nimport { useHandleSubmit } from './hooks/useHandleSubmit';\nimport { poolHasAssets } from '../../hooks/pools/poolHasAssets'\nimport { useCalculateInAndOut } from './hooks/useCalculateInAndOut'\nimport { useSlippage } from './hooks/useSlippage'\nimport { isEqual } from 'lodash'\nimport { useResetAmountInputsOnPoolChange } from './hooks/useResetAmountInputsOnPoolChange'\nimport { useCalculateAllowedSlippage } from './hooks/useCalculateAllowedSlippage'\nimport { usePercentageFee } from './hooks/usePercentageFee'\n\nexport interface TradeFormProps {\n    pool?: Pool,\n    loading: boolean,\n    assetIds: {\n        assetInId: string,\n        assetOutId?: string\n    },\n    spotPrice?: SpotPrice,\n    onAssetIdsChange: (assetInId: string, assetOutId?: string) => void\n}\n\nexport const TradeForm = ({\n    pool,\n    loading,\n    onAssetIdsChange,\n    assetIds,\n    spotPrice\n}: TradeFormProps) => {\n    const form = useTradeForm(assetIds);\n    const fee = usePercentageFee(pool);\n    const tradeType = useTradeType(form);\n    useHandleAssetIdsChange(form, onAssetIdsChange);\n    useCalculateInAndOut(form, tradeType, pool);\n    useResetAmountInputsOnPoolChange(form, pool);\n\n    // TODO: adjust the precision in the hook itself?\n    const slippage = useSlippage(tradeType, spotPrice, \n        toPrecision12(form.getValues('assetInAmount')),\n        toPrecision12(form.getValues('assetOutAmount'))\n    );\n\n    const handleSubmit = useHandleSubmit(\n        tradeType, \n        form.getValues('allowedSlippage'), \n        slippage, \n        pool\n    );\n\n    const { allowedSlippageInputDisabled } = useCalculateAllowedSlippage(form, pool);\n\n    return <div>\n        <form onSubmit={form.handleSubmit(handleSubmit)}>\n            <p>{tradeType}</p>\n            <TokenInput\n                assetIdInputProps={form.register('assetInId')}\n                assetAmountInputProps={form.register('assetInAmount')}\n            />\n\n            <br/>\n\n            <TokenInput\n                assetIdInputProps={form.register('assetOutId')}\n                assetAmountInputProps={form.register('assetOutAmount')}\n            />\n\n            <div>\n                <b>Allowed slippage</b><br/>\n                <input \n                    type=\"text\"\n                    disabled={allowedSlippageInputDisabled}\n                    {...form.register('allowedSlippage')}\n                />\n                <br/>\n                <b>Auto slippage</b> \n                <input type=\"checkbox\" {...form.register('autoSlippage')}/>\n            </div>\n\n            <br/>\n\n            <p>\n                <b>Slippage:</b> {slippage?.percentualSlippage} / {fromPrecision12(slippage?.spotPriceAmount)}\n            </p>\n            <p>\n                <b>Fee:</b> {fee}%\n            </p>\n\n            <button\n                disabled={loading}\n                type='submit'\n            >\n                Trade\n            </button>\n        </form>\n    </div>\n}","import { useForm } from 'react-hook-form'\nimport { TradeFormProps } from '../TradeForm'\n\nexport interface TradeFormFields {\n    assetInId: string,\n    assetOutId?: string,\n    assetInAmount?: string,\n    assetOutAmount?: string,\n    allowedSlippage: string,\n    autoSlippage: boolean,\n}\n\n\n/**\n * Define fields for the TradeForm\n * @param param0 \n * @returns \n */\n export const useTradeForm = ({ assetInId, assetOutId }: TradeFormProps['assetIds']) => {\n    return useForm<TradeFormFields>({\n        defaultValues: {\n            assetInId,\n            assetOutId,\n            assetInAmount: '0',\n            assetOutAmount: '0',\n            allowedSlippage: '5',\n            autoSlippage: true,\n        }\n    })\n}","import log from 'loglevel';\nimport { useState, useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { TradeType } from '../../../generated/graphql';\nimport { useListenForInput } from './useListenForInput';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Listen to changes to inputs within the trade form, and set the trade type\n * according to which input field has been interacted with last\n * @param form \n * @returns \n */\n export const useTradeType = (form: UseFormReturn<TradeFormFields>) => {\n    const [tradeType, setTradeType] = useState<TradeType>(TradeType.Sell);\n    \n    const watchassetInAmount = useListenForInput(form, 'assetInAmount');\n    const watchAassetInId = useListenForInput(form, 'assetInId');\n\n    const watchAassetOutAmount = useListenForInput(form, 'assetOutAmount');\n    const watchAassetOutId = useListenForInput(form, 'assetOutId');\n\n    useEffect(() => { \n        log.debug('TradeForm.setTradeType', TradeType.Sell)\n        setTradeType(TradeType.Sell) \n    }, [watchassetInAmount, watchAassetInId]);\n\n    useEffect(() => {\n        log.debug('TradeForm.setTradeType', TradeType.Buy)\n        setTradeType(TradeType.Buy) \n    }, [watchAassetOutAmount, watchAassetOutId]);\n\n    return tradeType;\n}","import log from 'loglevel';\nimport { useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { TradeFormProps } from '../TradeForm';\nimport { TradeFormFields } from './useTradeForm';\n\n/**\n * Inform parent components about asset ID changes in the form\n * @param form \n * @param onAssetIdsChange \n */\n export const useHandleAssetIdsChange = (\n    form: UseFormReturn<TradeFormFields>,\n    onAssetIdsChange: TradeFormProps['onAssetIdsChange']\n) => {\n    const [assetInId, assetOutId] = form.watch(['assetInId', 'assetOutId']);\n    useEffect(() => {\n        log.debug('TradeForm.useHandleAssetIdsChange', assetInId, assetOutId);\n        onAssetIdsChange(assetInId, assetOutId);\n    }, [assetInId, assetOutId]);\n}","import { useMemo, useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { Pool, TradeType } from '../../../generated/graphql';\nimport { useMathContext } from '../../../hooks/math/useMath';\nimport { toPrecision12 } from '../../../hooks/math/useToPrecision';\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolXYK } from '../../../hooks/pools/xyk/calculateOutGivenIn';\nimport { calculateOutGivenInFromPool as calculateOutGivenInFromPoolLBP } from '../../../hooks/pools/lbp/calculateOutGivenIn';\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolXYK } from '../../../hooks/pools/xyk/calculateInGivenOut';\nimport { calculateInGivenOutFromPool as calculateInGivenOutFromPoolLBP } from '../../../hooks/pools/lbp/calculateInGivenOut';\nimport { poolHasAssets } from '../../../hooks/pools/poolHasAssets';\nimport { fromPrecision12 } from '../../../hooks/math/useFromPrecision';\nimport log from 'loglevel';\nimport { TradeFormFields } from './useTradeForm';\n\n// TODO: loading state when calculating the fee\n/**\n * Calculate in/out amounts respectively for both XYK & LBP\n * @param form \n * @param tradeType \n * @param pool \n */\n export const useCalculateInAndOut = (\n    form: UseFormReturn<TradeFormFields>,\n    tradeType: TradeType,\n    pool?: Pool\n) => {\n    const { math } = useMathContext();\n    let [assetInId, assetInAmount] = form.watch(['assetInId', 'assetInAmount']);\n    let [assetOutId, assetOutAmount] = form.watch(['assetOutId', 'assetOutAmount']);\n    \n    // convert the user input to the required precision\n    assetInAmount = toPrecision12(assetInAmount);\n    assetOutAmount = toPrecision12(assetOutAmount);\n\n    const calculateOutGivenIn = useMemo(() => (\n        pool?.__typename === 'XYKPool'\n            ? calculateOutGivenInFromPoolXYK\n            : calculateOutGivenInFromPoolLBP\n    ), [pool])\n\n    const calculateInGivenOut = useMemo(() => (\n        pool?.__typename === 'XYKPool'\n            ? calculateInGivenOutFromPoolXYK\n            : calculateInGivenOutFromPoolLBP\n    ), [pool]);\n    \n    useEffect(() => {\n        if (!pool || !math || !assetOutId || !assetInAmount) return;\n        if (!poolHasAssets(pool, assetInId, assetOutId)) return;\n        if (tradeType !== TradeType.Sell) return;\n\n        const outAmount = calculateOutGivenIn(\n            math, \n            pool as any, \n            assetInId, \n            assetOutId, \n            assetInAmount\n        )\n        \n        /**\n         * if LBP && assetOut == accumulated asset then \n         * apply fee on top of outAmount\n         */\n\n        log.debug('TradeForm.useCalculateInAndOut', 'outAmount', outAmount);\n\n        form.setValue('assetOutAmount', fromPrecision12(outAmount));\n    }, [assetInAmount, assetInId, assetOutId, tradeType, pool])\n\n    useEffect(() => {\n        if (!pool || !math || !assetOutId || !assetOutAmount) return;\n        if (!poolHasAssets(pool, assetInId, assetOutId)) return;\n        if (tradeType !== TradeType.Buy) return;\n\n        // TODO: when LBP & assetOut === accumulated asset\n        // then calculateFee with assetOutAmount\n\n        /**\n         * when the case above happens, your trade happens at a worse spot price\n         * and the pool pays the repayFee on your behalf\n         */\n\n        const inAmount = calculateInGivenOut(\n            math, \n            pool as any, \n            assetInId, \n            assetOutId, \n            // difference between calc (assetOut+fee) and calc(assetOut) is the absolute fee\n            assetOutAmount //TODO: use assetOutAmount + fee\n        );\n        \n        log.debug('TradeForm.useCalculateInAndOut', 'inAmount', fromPrecision12(inAmount));\n\n        form.setValue('assetInAmount', fromPrecision12(inAmount));\n    }, [assetOutAmount, assetInId, assetOutId, tradeType, pool])\n}","import { isEqual } from 'lodash';\nimport { useEffect } from 'react';\nimport { UseFormReturn } from 'react-hook-form';\nimport { usePreviousDistinct } from 'react-use';\nimport { Pool } from '../../../generated/graphql';\nimport { TradeFormFields } from './useTradeForm';\n\nexport const useResetAmountInputsOnPoolChange = (\n    form: UseFormReturn<TradeFormFields>,\n    pool?: Pool\n) => {\n    const previousPoolId = usePreviousDistinct(pool?.id);\n    useEffect(() => {\n        if (!isEqual(previousPoolId, pool?.id)) {\n            form.resetField('assetInAmount');\n            form.resetField('assetOutAmount');\n        }\n    }, [previousPoolId, pool?.id])\n}","import { fromPrecision12 } from '../hooks/math/useFromPrecision'\nimport { SpotPrice } from '../pages/TradePage/TradePage'\n\nexport interface PoolLiquidity {\n    assetABalance?: string,\n    assetBBalance?: string,\n}\nexport interface TradeChartProps {\n    spotPrice?: SpotPrice,\n    poolLiquidity: PoolLiquidity\n}\nexport const TradeChart = ({ spotPrice, poolLiquidity }: TradeChartProps) => {\n    return <div>\n        <p>TradeChart</p>\n        <div>\n            <b>Spot price</b><br/>\n            <span>1 A = {fromPrecision12(spotPrice?.aToB)}B</span><br/>\n            <span>1 B = {fromPrecision12(spotPrice?.bToA)}A</span>\n            \n            <br/><br/>\n\n            <b>Pool liquidity</b><br/>\n            <span>A = {fromPrecision12(poolLiquidity.assetABalance)}</span><br/>\n            <span>B = {fromPrecision12(poolLiquidity.assetBBalance)}</span>\n\n            <br/><br/>\n        </div>\n    </div>\n}","import { find } from 'lodash';\nimport { useMemo } from 'react';\nimport { LbpPool } from '../../../generated/graphql';\nimport { HydraDxMath, useMathContext } from '../../math/useMath';\n\nexport const oneWithPrecision = '1000000000000'; // 10^12 doesnt work, use 10^9 instead\n\nexport const calculateSpotPrice = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n    inWeight: string,\n    outWeight: string,\n    amount: string = oneWithPrecision,\n) => math.lbp.get_spot_price(inReserve, outReserve, inWeight, outWeight, amount);\n\nexport const calculateSpotPriceFromPool = (\n    math: HydraDxMath,\n    pool: LbpPool,\n    assetInId: string,\n    assetOutId: string,\n) => {\n    const assetInBalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetOutBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    if (!assetInBalance || !assetOutBalance) throw new Error(`Can't find the required balances in the pool`);\n\n    const assetInWeight = assetInId === pool.assetInId\n        ? pool.assetAWeights.current\n        : pool.assetBWeights.current\n\n    const assetOutWeight = assetOutId === pool.assetOutId\n        ? pool.assetBWeights.current\n        : pool.assetAWeights.current;\n\n    return calculateSpotPrice(\n        math, \n        assetInBalance, \n        assetOutBalance,\n        assetInWeight,\n        assetOutWeight,\n    );\n}\n","import { find } from 'lodash';\nimport { XykPool } from '../../../generated/graphql';\nimport { HydraDxMath } from '../../math/useMath';\nimport { oneWithPrecision } from '../lbp/calculateSpotPrice';\n\nexport const calculateSpotPrice = (\n    math: HydraDxMath,\n    inReserve: string,\n    outReserve: string,\n) => math.xyk.get_spot_price(inReserve, outReserve, oneWithPrecision);\n\nexport const calculateSpotPriceFromPool = (\n    math: HydraDxMath,\n    pool: XykPool,\n    assetInId: string,\n    assetOutId: string,\n) => {\n    const assetInBalance = find(pool.balances, { assetId: assetInId })?.balance;\n    const assetOutBalance = find(pool.balances, { assetId: assetOutId })?.balance\n\n    if (!assetInBalance || !assetOutBalance) return;\n\n    return calculateSpotPrice(\n        math,\n        assetInBalance,\n        assetOutBalance\n    )\n}","import { find, isEqual } from 'lodash';\nimport { useMemo, useState } from 'react';\nimport { useGetPoolByAssetsQuery } from '../../hooks/pools/queries/useGetPoolByAssetsQuery';\nimport { TradeForm, TradeFormProps } from '../../containers/TradeForm/TradeForm';\nimport { PoolLiquidity, TradeChart } from '../../containers/TradeChart';\nimport log from 'loglevel';\nimport { useSpotPrice } from './hooks/useSpotPrice';\nimport { usePreviousDistinct } from 'react-use';\nimport { Pool } from '../../generated/graphql';\n\nexport interface SpotPrice {\n    aToB?: string,\n    bToA?: string\n}\n\n/**\n * Trade page responsible for fetching pool data\n * @returns \n */\nexport const TradePage = () => {\n    // TODO default values here should come from the router where query args are parsed\n    const [assetIds, setAssetIds] = useState<TradeFormProps['assetIds']>({\n        assetInId: '0',\n        assetOutId: '2'\n    })\n\n    // automatically fetch a pool by the given assets\n    const { \n        data: poolData, \n        loading: poolLoading, \n        error: poolError \n    } = useGetPoolByAssetsQuery(assetIds);\n    log.debug('TradePage.useGetPoolByAssetsQuery', assetIds);\n\n    const pool: Pool | undefined = useMemo(() => poolData?.pool, [poolData?.pool]);\n\n    // if there was a problem fetching the pool, log it\n    poolError && log.error(poolError);\n\n    // combined loading state from all the required queries\n    const loading = useMemo(() => {\n        const loading = poolLoading;\n        log.debug('TradePage.loading', loading);\n        return loading;\n    }, [poolLoading]);\n\n    log.debug('TradePage.poolData.pool', poolData?.pool);\n\n    // when the underlying form's assetIds change, update the state\n    const handleAssetIdsChange = (assetInId: string, assetOutId?: string) => {\n        const newIds = { assetInId, assetOutId };\n        log.debug('TradePage.handleAssetIdsChange', isEqual(assetIds, newIds), newIds);\n        if (!isEqual(assetIds, newIds)) setAssetIds(newIds);\n    }\n\n    const spotPrice = useSpotPrice(\n        assetIds,\n        poolData?.pool\n    );\n\n    const poolLiquidity: PoolLiquidity = useMemo(() => {\n        return {\n            assetABalance: find(pool?.balances, { assetId: assetIds.assetInId })?.balance,\n            assetBBalance: find(pool?.balances, { assetId: assetIds.assetOutId })?.balance,\n        }\n    }, [pool]);\n\n    return <div>\n        <h1>Trade</h1>\n\n        <br /><br />\n\n        <TradeChart\n            poolLiquidity={poolLiquidity}\n            spotPrice={spotPrice}\n        />\n        \n        <TradeForm\n            onAssetIdsChange={handleAssetIdsChange}\n            assetIds={assetIds}\n            loading={loading}\n            pool={pool}\n            spotPrice={spotPrice}\n        />\n    </div>\n}","import { useApolloClient } from '@apollo/client';\nimport { useMemo } from 'react';\nimport { TradeFormProps } from '../../../containers/TradeForm/TradeForm';\nimport { Pool } from '../../../generated/graphql';\nimport { readLastBlock } from '../../../hooks/lastBlock/readLastBlock';\nimport { useMathContext } from '../../../hooks/math/useMath';\nimport { SpotPrice } from '../TradePage';\nimport { calculateSpotPriceFromPool as calculateSpotPriceFromPoolLBP } from '../../../hooks/pools/lbp/calculateSpotPrice';\nimport { calculateSpotPriceFromPool as calculateSpotPriceFromPoolXYK } from '../../../hooks/pools/xyk/calculateSpotPrice';\nimport log from 'loglevel';\n\nexport const useSpotPrice = (\n    { assetInId, assetOutId }: TradeFormProps['assetIds'],\n    pool?: Pool,\n): SpotPrice | undefined => {\n    const client = useApolloClient();\n    const relaychainBlockNumber = readLastBlock(client);\n    const { math } = useMathContext();\n   \n    return useMemo(() => {\n        if (!math || !pool || !assetInId || !assetOutId || !relaychainBlockNumber) return;\n\n        // if the pool is an XYKPool, use the XYKPool spot price calculation and vice versa\n        const calculateSpotPriceFromPool = pool?.__typename === 'XYKPool'\n            ? calculateSpotPriceFromPoolXYK\n            : calculateSpotPriceFromPoolLBP\n\n        const spotPrice: SpotPrice = {\n            // TODO: get rid of `as any` since its not type safe *at all*\n            aToB: calculateSpotPriceFromPool(math, pool as any, assetInId, assetOutId),\n            bToA: calculateSpotPriceFromPool(math, pool as any, assetOutId, assetInId)\n        }\n\n        log.debug('TradePage.useSpotPrice', spotPrice);\n\n        return spotPrice;\n    }, [relaychainBlockNumber, assetInId, assetOutId, pool]);\n}","import { useMutation } from '@apollo/client';\nimport { loader } from 'graphql.macro';\nimport { GET_ACTIVE_ACCOUNT } from '../queries/useGetActiveAccountQuery';\n\nexport const SET_ACTIVE_ACCOUNT = loader('./../graphql/SetActiveAccount.mutation.graphql');\n\nexport interface SetActiveAccountMutationVariables {\n    id: string | undefined\n}\n\nexport const useSetActiveAccountMutation = (variables: SetActiveAccountMutationVariables) => useMutation<void, SetActiveAccountMutationVariables>(\n    SET_ACTIVE_ACCOUNT,\n    {\n        variables,\n        refetchQueries: [\n            // TODO: figure out why do we need to refetch active account manually,\n            // while all accounts query gets updated automatically\n            GET_ACTIVE_ACCOUNT\n        ]\n    }\n)","import { useMemo } from 'react';\nimport { Account as AccountModel } from '../generated/graphql';\nimport { useSetActiveAccountMutation } from '../hooks/accounts/mutations/useSetActiveAccountMutation';\nimport { useGetAccountsQuery } from '../hooks/accounts/queries/useGetAccountsQuery'\nimport { useGetExtensionQuery } from '../hooks/polkadotJs/useGetExtensionQuery';\n\nexport const Account = ({ account }: { account?: AccountModel }) => {\n    // TODO: you can get the loading state of the mutation here as well\n    // but it probably needs to be turned into a contextual mutation\n    // in order to share the loading state accross multiple mutation hook calls\n    const [setActiveAccount] = useSetActiveAccountMutation({\n        id: account?.id\n    });\n\n    const [unsetActiveAccount] = useSetActiveAccountMutation({\n        id: undefined\n    });\n\n    return (\n        <div style={{\n            marginBottom: '24px',\n            padding: '12px',\n            paddingLeft: 0\n        }}>\n            <h3>\n                {account?.name}\n                {account?.isActive\n                    ? ' [active]'\n                    : <></>\n                }\n            </h3>\n            <p>\n                <b>Address:</b>\n                {account?.id}\n            </p>\n            <div>\n                <b>Balances:</b>\n                {account?.balances.map((balance, i) => (\n                    <p key={i}>\n                        {balance.assetId}:\n                        <i> {balance.balance}</i>\n                    </p>\n                ))}\n            </div>\n            <button\n                onClick={_ => account?.isActive ? unsetActiveAccount() : setActiveAccount()}\n            >\n                {account?.isActive ? 'Unset active' : 'Set active'}\n            </button>\n        </div>\n    )\n}\n\nexport const WalletPage = () => {\n    const { data: accountsData, loading: accountsLoading } = useGetAccountsQuery();\n    const { data: extensionData, loading: extensionLoading } = useGetExtensionQuery();\n\n    const loading = useMemo(() => {\n        return accountsLoading || extensionLoading;\n    }, [accountsLoading, extensionLoading])\n\n    return <div style={{\n        textAlign: 'left'\n    }}>\n        <h1>Accounts</h1>\n\n        {loading\n            ? <i>[WalletPage] Loading accounts...</i>\n            : <i>[WalletPage] Everything is up to date</i>\n        }\n\n        <br /><br />\n\n        {extensionData?.extension.isAvailable\n            ? (\n                <div>\n                    {accountsData?.accounts?.map((account, i) => (\n                        <Account\n                            key={i}\n                            account={account}\n                        />\n                    ))}\n                </div>\n            )\n            : <p>Extension unavailable</p>\n        }\n    </div>\n}","import { Routes, Route, Navigate } from 'react-router-dom';\nimport { TradePage } from '../pages/TradePage/TradePage';\nimport { WalletPage } from '../pages/WalletPage';\n\nexport const Router = () => {\n    return (\n        <Routes>\n            <Route path='/' element={<TradePage />} />\n            <Route path='wallet' element={<WalletPage />} />\n            <Route path=\"*\" element={<Navigate to='/'/>}/>\n        </Routes>\n    )\n}","import './ActionBar.scss';\nimport { Link } from 'react-router-dom';\n\nexport interface ActionBarProps {\n    isExtensionAvailable: boolean;\n  extensionLoading: boolean;\n  activeAccountLoading: boolean;\n  accountData?: {\n          name?: string;\n          address?: string;\n          nativeAssetBalance?: string;\n  };\n}\n\nexport const ActionBar = ({\n  extensionLoading,\n  activeAccountLoading,\n  accountData,\n  isExtensionAvailable,\n}: ActionBarProps) => {\n  return (\n    <div className=\"action-bar\">\n      <div className='action-bar-icons action-bar-item'>\n        <div className=\"action-bar-help action-bar-icon \">?</div>\n        <div className=\"action-bar-notifications action-bar-icon \">!</div>\n      </div>\n      <div>\n        {extensionLoading || activeAccountLoading ? (\n          <div className='action-bar-error action-bar-item'>loading...</div>\n        ) : isExtensionAvailable ? (\n          <>\n            {accountData?.name ? (\n                <div className='action-bar-account-info action-bar-item'>\n                    <div className='action-bar-account-balance action-bar-account-item'>\n                        {accountData?.nativeAssetBalance} BSX\n                    </div>\n                    {/* TODO! Acc name / address + Icon component*/}\n                    <div className='action-bar-account-name action-bar-account-item'>\n                        {accountData?.name}\n                    </div>\n                </div>\n            ) : (\n              <Link className='action-bar-select-account action-bar-item' to=\"/wallet\">select an account</Link>\n            )}\n          </>\n        ) : (\n          <div className='action-bar-error action-bar-item'>Extension unavailable</div>\n        )}\n      </div>\n      <div className='action-bar-settings action-bar-item'>v</div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './Navigation.scss';\nimport { Link} from 'react-router-dom';\n\nexport const Modal = ({ children }: { children: React.ReactNode }) => {\n  return (\n    <div>\n      <h1>modal</h1>\n      {children}\n      <button>click me</button>\n    </div>\n  );\n};\n\nexport const ConfigModal = () => <h1>Config</h1>;\n\nexport const useModal = (content: React.ReactNode) => {\n  const [show, setShow] = useState<boolean>(false);\n\n  return {\n    modal: show ? <Modal>{content}</Modal> : <></>,\n    toggleModal: () => setShow((show) => !show),\n  };\n};\n\nexport const Navigation = () => (\n  <div>\n    <Link className= 'basilisk-logo' to=\"https://bsx.fi\">()</Link>\n    <Link to=\"/\">Trade</Link>\n    {' | '}\n    <Link to=\"/\">Pools</Link>\n    {' | '}\n    <Link to=\"/wallet\">Wallet</Link>\n  </div>\n);\n\nexport const NavigationContainer = () => {\n  return <Navigation />;\n};\n","import { first } from 'lodash';\nimport { useMemo } from 'react';\nimport { ActionBar } from '../components/Navigation/ActionBar';\nimport { Navigation } from '../components/Navigation/Navigation';\nimport { useGetActiveAccountQuery } from '../hooks/accounts/queries/useGetActiveAccountQuery';\nimport { nativeAssetId } from '../hooks/balances/useGetBalancesByAddress';\nimport { useLastBlockQuery } from '../hooks/lastBlock/useLastBlockQuery';\nimport { useGetExtensionQuery } from '../hooks/polkadotJs/useGetExtensionQuery';\n\nimport './TopBar.scss';\n\nexport const TopBar = () => {\n    // TODO: there is no loading state for last block\n    // since its populated in the cache manually\n    const { data: lastBlockData } = useLastBlockQuery();\n    const { data: activeAccountData, loading: activeAccountLoading, error } = useGetActiveAccountQuery();\n    const { data: extensionData, loading: extensionLoading } = useGetExtensionQuery();\n\n    error && console.error(error);\n    \n    // TODO: should probably be showing the fee payment asset here\n    const nativeAssetBalance = useMemo(() => (\n        first(\n            activeAccountData?.account?.balances\n                ?.filter(balance => balance.assetId === nativeAssetId)\n        )?.balance\n    ), [activeAccountData])\n\n    return (\n        <div className='top-bar'>\n            <Navigation />\n            \n            <div>\n                <b>Last block: </b>\n                {lastBlockData?.lastBlock?.parachainBlockNumber\n                    ? `#${lastBlockData?.lastBlock?.parachainBlockNumber} / #${lastBlockData?.lastBlock?.relaychainBlockNumber}`\n                    : 'loading...'\n                }\n            </div>\n                \n            <ActionBar {...{\n                isExtensionAvailable: !!extensionData && !!extensionData.extension?.isAvailable,\n                extensionLoading,\n                activeAccountLoading,\n                accountData: activeAccountData ? { \n                    name: activeAccountData.account ? activeAccountData.account.name ? activeAccountData.account.name : undefined  : undefined,\n                    nativeAssetBalance,\n                    address: 'placeholder fill me'\n                } : undefined\n            }}/>                \n        </div>\n    )\n}","import React from 'react'\nimport { useLoading } from '../hooks/misc/useLoading'\nimport { TopBar } from './TopBar'\n\nexport const PageContainer = ({ children }: { children: React.ReactNode }) => {\n    const loading = useLoading();\n    return (\n        <div style={{\n            padding: '24px',\n            width: '650px',\n            margin: '0 auto'\n        }}>\n            <TopBar />\n            {loading\n                ? <div style={{\n                    width: '100%',\n                    textAlign: 'center',\n                }}>\n                    <i>Connecting to the node...</i>\n                </div>\n                : children\n            }\n        </div>\n    )\n}","import { useMathContext } from '../math/useMath';\nimport { usePolkadotJsContext } from '../polkadotJs/usePolkadotJs'\n\nexport const useLoading = () => {\n    const { apiInstance } = usePolkadotJsContext();\n    const { math } = useMathContext();\n    return !apiInstance || !math;\n}","import './App.scss';\nimport { MultiProvider } from './containers/MultiProvider';\nimport log from 'loglevel';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Router } from './containers/Router';\nimport { PageContainer } from './containers/PageContainer';\n\nlog.setLevel('debug');\n\nexport const branch = process.env.REACT_APP_GIT_BRANCH;\nexport const baseName = branch?.length ? `basilisk-ui/${branch}/app` : undefined;\n\nexport const App = () => {\n  return (\n    <MultiProvider>\n      <BrowserRouter basename={baseName}>\n        <PageContainer>\n          <Router />\n        </PageContainer>\n      </BrowserRouter>\n    </MultiProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './index.scss';\n\nReactDOM.render(\n  // TODO: figure out a way to enable react strict mode\n  // without triggering duplicate graphql queries\n  // https://github.com/apollographql/react-apollo/issues/3906#issuecomment-636604835\n  // <React.StrictMode>\n    <App/>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}